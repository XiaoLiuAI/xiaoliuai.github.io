<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: maven | 记往开来]]></title>
<link href="http://xiaoliuai.github.io/tags/maven/atom.xml" rel="self"/>
<link href="http://xiaoliuai.github.io/"/>
<updated>2015-03-01T00:54:50+01:00</updated>
<id>http://xiaoliuai.github.io/</id>
<author>
<name><![CDATA[Xiao Liu]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Start Maven Example]]></title>
<link href="http://xiaoliuai.github.io/blog/2015-02-28-start-maven-example.html"/>
<updated>2015-02-28T00:00:00+01:00</updated>
<id>http://xiaoliuai.github.io/blog/start-maven-example</id>
<content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Simple POM</a></li>
<li><a href="#sec-2">2. Basic command</a></li>
<li><a href="#sec-3">3. Directory layout</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/tags/maven/atom.xml"><span class="section-number-2">1</span> Simple POM</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Maven projects are defined with an XML file named <i>pom.xml</i>. This
file gives the project&#8217;s name, version, and dependencies that it
has on external libraries. Here is an <a href="http://spring.io/guides/gs/maven/#initial">example</a>.
</p>
<div class="org-src-container">

<pre class="src src-xml">&lt;?<span style="color: #859900;">xml</span> <span style="color: #6c71c4;">version</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">1.0</span><span style="color: #2aa198;">"</span> <span style="color: #6c71c4;">encoding</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">UTF-8</span><span style="color: #2aa198;">"</span>?&gt;
&lt;<span style="color: #b58900;">project</span> <span style="color: #6c71c4;">xmlns</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">http://maven.apache.org/POM/4.0.0</span><span style="color: #2aa198;">"</span> <span style="color: #6c71c4;">xmlns</span>:<span style="color: #6c71c4;">xsi</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">http://www.w3.org/2001/XMLSchema-instance</span><span style="color: #2aa198;">"</span>
    <span style="color: #6c71c4;">xsi</span>:<span style="color: #6c71c4;">schemaLocation</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd</span><span style="color: #2aa198;">"</span>&gt;
    &lt;<span style="color: #b58900;">modelVersion</span>&gt;4.0.0&lt;/<span style="color: #b58900;">modelVersion</span>&gt;
    &lt;<span style="color: #b58900;">groupId</span>&gt;org.springframework&lt;/<span style="color: #b58900;">groupId</span>&gt;
    &lt;<span style="color: #b58900;">artifactId</span>&gt;gs-maven&lt;/<span style="color: #b58900;">artifactId</span>&gt;
    &lt;<span style="color: #b58900;">packaging</span>&gt;jar&lt;/<span style="color: #b58900;">packaging</span>&gt;
    &lt;<span style="color: #b58900;">version</span>&gt;0.1.0&lt;/<span style="color: #b58900;">version</span>&gt;

    &lt;<span style="color: #b58900;">build</span>&gt;
        &lt;<span style="color: #b58900;">plugins</span>&gt;
            &lt;<span style="color: #b58900;">plugin</span>&gt;
                &lt;<span style="color: #b58900;">groupId</span>&gt;org.apache.maven.plugins&lt;/<span style="color: #b58900;">groupId</span>&gt;
                &lt;<span style="color: #b58900;">artifactId</span>&gt;maven-shade-plugin&lt;/<span style="color: #b58900;">artifactId</span>&gt;
                &lt;<span style="color: #b58900;">version</span>&gt;2.1&lt;/<span style="color: #b58900;">version</span>&gt;
                &lt;<span style="color: #b58900;">executions</span>&gt;
                    &lt;<span style="color: #b58900;">execution</span>&gt;
                        &lt;<span style="color: #b58900;">phase</span>&gt;package&lt;/<span style="color: #b58900;">phase</span>&gt;
                        &lt;<span style="color: #b58900;">goals</span>&gt;
                            &lt;<span style="color: #b58900;">goal</span>&gt;shade&lt;/<span style="color: #b58900;">goal</span>&gt;
                        &lt;/<span style="color: #b58900;">goals</span>&gt;
                        &lt;<span style="color: #b58900;">configuration</span>&gt;
                            &lt;<span style="color: #b58900;">transformers</span>&gt;
                                &lt;<span style="color: #b58900;">transformer</span>
                                    <span style="color: #6c71c4;">implementation</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">org.apache.maven.plugins.shade.resource.ManifestResourceTransformer</span><span style="color: #2aa198;">"</span>&gt;
                                    &lt;<span style="color: #b58900;">mainClass</span>&gt;hello.HelloWorld&lt;/<span style="color: #b58900;">mainClass</span>&gt;
                                &lt;/<span style="color: #b58900;">transformer</span>&gt;
                            &lt;/<span style="color: #b58900;">transformers</span>&gt;
                        &lt;/<span style="color: #b58900;">configuration</span>&gt;
                    &lt;/<span style="color: #b58900;">execution</span>&gt;
                &lt;/<span style="color: #b58900;">executions</span>&gt;
            &lt;/<span style="color: #b58900;">plugin</span>&gt;
        &lt;/<span style="color: #b58900;">plugins</span>&gt;
    &lt;/<span style="color: #b58900;">build</span>&gt;
&lt;/<span style="color: #b58900;">project</span>&gt;
</pre>
</div>
<ul class="org-ul">
<li><code>&lt;modelVerion&gt;</code> POM model version
</li>
<li><code>&lt;groupId&gt;</code> Domain name of the group or organization.
</li>
<li><code>&lt;artifactId&gt;</code> Name to the project&#8217;s library artifact (name of
JAR file)
</li>
<li><code>&lt;version&gt;</code> Version of the project
</li>
<li><code>&lt;packaging&gt;</code> How it should be packaged (in JAR or WAR file)
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Basic command</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-bash">mvn compile
mvn package
mvn install
</pre>
</div>
<p>
The first command compiles the project, and the <i>.classfiles</i> shold be
in the <i>target/classes</i> directory.
The second command compile the code, run tests and finish by
packaging the code up in a JAR file in the <i>target</i> directory.
Tht third command does the same thing as the second command, then
copy the JAR file into the local <span class="underline">dependency repository</span>, under the
directories with name of groupId, artifactId and version. So on my
machine, its location is
<code>~/.m2/repository/org/springframework/gs-maven/0.1.0/gs-maven-0.1.0.jar</code>.
</p>

<p>
Add dependencies of project into the <i>pom.xml</i> file, in the
<code>&lt;project&gt;</code> element.
</p>
<div class="org-src-container">

<pre class="src src-xml">&lt;<span style="color: #b58900;">dependencies</span>&gt;
     &lt;<span style="color: #b58900;">dependency</span>&gt;
         &lt;<span style="color: #b58900;">groupId</span>&gt;joda-time&lt;/<span style="color: #b58900;">groupId</span>&gt;
         &lt;<span style="color: #b58900;">artifactId</span>&gt;joda-time&lt;/<span style="color: #b58900;">artifactId</span>&gt;
         &lt;<span style="color: #b58900;">version</span>&gt;2.2&lt;/<span style="color: #b58900;">version</span>&gt;
     &lt;/<span style="color: #b58900;">dependency</span>&gt;
 &lt;/<span style="color: #b58900;">dependencies</span>&gt;
</pre>
</div>
<p>
This description will tell the maven to get the <i>joda-time</i> package
as external library. You can specify a <code>&lt;scope&gt;</code> element to specify
if the dependencies are required for compiling the code but will be
provided during runtime by <code>provided</code>; or decalre the dependencies
are only necessary for compiling and running tests.
</p>

<p>
When I compile the command, <i>maven</i> downloads the <i>joda-time</i>
pakcage from <a href="https://repo.maven.apache.org/maven2/joda-time/">https://repo.maven.apache.org/maven2/joda-time/</a>. Does
the maven use its domain when the group id does not contain the
domain by default?
</p>

<p>
<b>You can also create a project from scratch</b>
</p>
<div class="org-src-container">

<pre class="src src-bash">mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Directory layout</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-bash">project
    src
        main
            java
            [scala]
            resources
                environment.properties
                environment.test.properties
                environment.prod.properties
                config
                    application.yml
                    application-dev.yml
                    application-[profile].yml
                [other]
        test
            java
            [scala]
    target
        classes
            the classes with the same structure as src/main
            the directories in src/main/resources
        test-classes
            the classes with the same structure as src/mainproject
        xxx.jar
    target
</pre>
</div>
</div>
</div>

]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Principles of Reactive Programming on Coursera]]></title>
<link href="http://xiaoliuai.github.io/blog/2015-02-28-principles-of-reactive-programming-on-coursera.html"/>
<updated>2015-02-28T00:00:00+01:00</updated>
<id>http://xiaoliuai.github.io/blog/principles-of-reactive-programming-on-coursera</id>
<content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Monad</a></li>
<li><a href="#sec-2">2. ScalaCheck &amp; ScalaTest</a>
<ul>
<li><a href="#sec-2-1">2.1. Tutorial of ScalaCheck</a></li>
<li><a href="#sec-2-2">2.2. ScalaTest</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/tags/maven/atom.xml"><span class="section-number-2">1</span> Monad</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Honestly, I don&#8217;t understand it. But I collect my thoughts about it
here. First, the monda is used to chain operations and if the first
(preceding) operation fails, the whole chain stops. An example that
I understand is the usage of for-expression with pattern match. If
the pattern matches, go next operation, else skip this element.
</p>

<p>
Another point of view is about the unit operation. A monad flatMap
with its unit operation will return the monad itself.
</p>

<p>
<b>My conclusion</b>:
</p>

<p>
A monad is a container that supports operation chain and follows
the monad laws. The basic operations of this container are
<code>flatMap</code> and <code>unit</code>, where <code>flatMap</code> actually accepts a function
that maps each element to a container, then binds these containers
together; <code>unit</code> returns a container given an element. Monad laws
guarantee the reliability of operation chain on these contains.
</p>

<p>
Monad seems like a design pattern that enables the operation chain
along with pattern match in functional programming. Because
<code>flatMap</code> chain with different functions is equivalent to nested
<code>flatMap</code>, the for-expression is a syntax sugar based on <code>flatMap</code>
chain. The advantage of this design pattern is avoding side effect.
</p>

<p>
Generator is created by <code>yield</code> as well as
<b>for-expression</b>. Pay attention, there is no generator
class/type/trait. The genrator created through for-expression has
the same type of the sequence/iterator/stream used in
for-expression. That proves the for-expression is a syntax sugar of
monad types. So, guess what will happen when we create a
for-expression using both <b>list</b> and <b>stream</b>?
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">fibo</span>:Stream[Int] = 1 #:: 1 #:: fibo.zip(fibo.tail).map(x=&gt;x._1+x._2)
val l = List(1,2,3,4,5)
val lsg = <span style="color: #859900;">for</span>{x &lt;- l; fib &lt;- fibo} yield (x,fib)<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">infinite loop, crash the software/your machine</span>
val slg = <span style="color: #859900;">for</span>{fib &lt;- fibo; x &lt;- l} yield (x,fib)<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">return a stream</span>
</pre>
</div>
<p>
Following the definition of Monad, the first mixture <code>lsg</code> actually
makes <code>l flatMap (x =&gt; fibo)</code>, which returns a List that tries to
expand infinite stream <code>fibo</code>, hence block your machine. The second
mixture <code>slg</code> returns a Stream that expand the list <code>l</code>, hence,
works well. Besides, I have to clarify one thing: different monads
demonstrated above all accept <code>GenTraversableOnce</code> as parameter and
return monad of their own type. That is why they can be mixed
together and the first expression decides the type of the final
output of for-expression.
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> ScalaCheck &amp; ScalaTest</h2>
<div class="outline-text-2" id="text-2">
<p>
It is a tool for property-based testing for scala. It has <b>NO</b>
external dependencies and integrated in the test frameworks
<b>ScalaTest</b>. It can also be used standalone, with its built-in test
runner.
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Tutorial of ScalaCheck</h3>
<div class="outline-text-3" id="text-2-1">
<p>
First, create a class that extends class
<code>org.scalacheck.Properties</code> with the name of data object that you
want to test. It is used for the library to generate test data to
test your algorithm.
</p>

<p>
Second, create test case by
</p>
<div class="org-src-container">

<pre class="src src-java">property(<span style="color: #2aa198;">"NAME_OF_FUNCTION"</span>) = forAll{
    CONTAINER_OF_DATA =&gt; TEST_CASE_WITH_TARGET_FUNCTION
}
</pre>
</div>
<p>
<code>forAll</code> is the function <code>org.scalacheck.Prop.forAll</code>.
</p>

<p>
Third, to run the tests, you can put the properties in
<code>src/test/scala</code> then use test task to check them.
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> ScalaTest</h3>
<div class="outline-text-3" id="text-2-2">
<p>
In the example provided by the oneline course, they used <b>JUnit</b>,
<b>ScalaTest</b> and <b>ScalaCheck</b> together, which is much more complext
than the tutorial. In their example, the class of <code>Properties</code> is
in <code>src/main/scala</code> and is called by another class defined under
<code>src/test/scala</code>. In the class under test folder, many instances
of the <code>Properties</code> class are created to check different children
classes of the target class.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">@RunWith</span>(<span style="color: #268bd2;">classOf</span>[JUnitRunner])
<span style="color: #859900;">class</span> <span style="color: #268bd2;">QuickCheckSuite</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">FunSuite</span> with Checkers {
  <span style="color: #268bd2;">def</span> <span style="color: #b58900;">checkBogus</span>(p: Prop) {
    <span style="color: #268bd2;">var</span> <span style="color: #6c71c4;">ok</span> = <span style="color: #268bd2;">false</span>
    <span style="color: #859900;">try</span> {
      check(p)
    } <span style="color: #859900;">catch</span> {
      <span style="color: #859900;">case</span> e: TestFailedException =&gt;
        ok = <span style="color: #268bd2;">true</span>
    }
    assert(ok, <span style="color: #2aa198;">"A bogus heap should NOT satisfy all properties. Try to find the bug!"</span>)
  }

  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Binomial heap satisfies properties."</span>) {
    check(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with BinomialHeap)
  }

  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (1) binomial heap does not satisfy properties."</span>) {
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus1BinomialHeap)
  }

  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (2) binomial heap does not satisfy properties."</span>) {
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus2BinomialHeap)
  }

  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (3) binomial heap does not satisfy properties."</span>) {
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus3BinomialHeap)
  }

  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (4) binomial heap does not satisfy properties."</span>) {
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus4BinomialHeap)
  }

  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (5) binomial heap does not satisfy properties."</span>) {
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus5BinomialHeap)
  }
}
</pre>
</div>
<ul class="org-ul">
<li>This class uses the junit framework for unittest. JUnit will
invoke the class with <code>@RunWith</code> annotation (extend by type
hierarchies) to run the tests. The annotation parameter in the
example is a class of the type <code>JUnitRunner</code>. In fact, any class
extends <code>Runner</code> is acceptabel. Notice that function <code>classOf</code>
acts the same as <code>obj.getClass()</code>.
</li>
<li>The annotation uses class of <code>JUnitRunner</code> as parameter. This
class is provided by scala-test framework.
</li>
<li>It is mentioned on <a href="http://www.scalatest.org/user_guide/using_the_scalatest_maven_plugin">ScalaTest Maven Plugin</a> that this annotaiton
is necessary to run the test without this plugin. So you can run
tests without this annotation by using this plugin.
<ul class="org-ul">
<li><b>Maven</b> Running tests with command <code>mvn test</code>. In fact, you
<b>cannot</b> run the tests with the example above. <b>Solution</b> is
to change the name <code>QuickCheckSuite</code> to <code>QuickCheckSuiteTest</code>
or <code>TestQuickCheckSuite</code> or <code>QuickCheckSuiteTestCase</code> to run
the tests. Even I did not explicitly specify plugin
<code>surefire</code>, maven uses this plugin to run test with my
configuration. By default, maven following name convertions
when looking for tests to run. So I have to change the name or
modify the <code>surefire</code> configuration to apply new name
convertion rules.
</li>
<li><b>ScalaTest</b> plugin. <b>TODO</b>
</li>
</ul>
</li>
<li><code>org.scalatest.FunSuite</code> and <code>org.scalatest.prop.Checkers</code>.
<b>TODO</b>
</li>
</ul>
</div>
</div>
</div>

]]></content>
</entry>

<entry>
<title type="html"><![CDATA[POM Configuration]]></title>
<link href="http://xiaoliuai.github.io/blog/2015-02-28-pom-configuration.html"/>
<updated>2015-02-28T00:00:00+01:00</updated>
<id>http://xiaoliuai.github.io/blog/pom-configuration</id>
<content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Identify our project</a></li>
<li><a href="#sec-2">2. Inheritance</a></li>
<li><a href="#sec-3">3. Tasks</a></li>
</ul>
</div>
</div>




<p>
See example  <a href="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html">POM Configuration</a>.
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/tags/maven/atom.xml"><span class="section-number-2">1</span> Identify our project</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Fully qualified name of project is
&#8220;&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;&#8221;. If <i>groupId</i> is a domain, it
will be transformed into directory path while downloading. Download
something with <i>groupId=org.X.A</i> from <i>url.com</i> will download
things from <i>url.com/org/X/A</i> in the end.
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Inheritance</h2>
<div class="outline-text-2" id="text-2">
<p>
When we have two projects, A and B, A is supposed to be parent
project of B. You have to specify the <i>pom.xml</i> of project B to
indicate that the <i>parent</i> of B is A with the <i>groupId</i>,
<i>artifactId</i> and <i>version</i> of A. You can remove the <i>groupId</i> and
<i>version of B to make A and B have the same /groupId</i> and
<i>version</i>. One can also indicate the <code>&lt;relativePath&gt;</code> for parent
project to put the A and B in the same directory level.
</p>

<p>
B inherite the dependencies from A.所以parent用来继承POM,dependency
用来解决代码依赖. <b>parent的项目在代码上没有关系.</b>
</p>

<p>
The packages downloaded by <i>maven</i> are put under
<i>HOME</i>.m2/repository/.
</p>

<p>
所有 <i>POM.xml</i> 里面的元素都可以用 <code>${project.A.B.C}</code> 的方式进行引用.比
方说如果在 <i>XML</i> 根路径下有这样的结构
<code>&lt;A&gt;&lt;B&gt;lalala&lt;C&gt;blabla&lt;C/&gt;&lt;/B&gt;&lt;/A&gt;</code>, <code>${project.A.B.C}</code> 就等于
<code>blabla</code>.
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Tasks</h2>
<div class="outline-text-2" id="text-3">
<p>
首先,maven可以使用一系列的plugin来支持各种功能,包括发布,运行测试等
等.在使用 <code>spring-boot-maven-plugin</code> 的时候,可以用 <code>mvn
   spring-boot:run</code> 来运行程序. <code>spring-boot</code> 应该是plugin的名字, <code>run</code>
则是定义好的task. 在使用 <code>maven-scala-plugin</code> 的时候,如果加入以下设
置
</p>
<div class="org-src-container">

<pre class="src src-xml">&lt;<span style="color: #b58900;">executions</span>&gt;
    &lt;<span style="color: #b58900;">execution</span>&gt;
        &lt;<span style="color: #b58900;">goals</span>&gt;
            &lt;<span style="color: #b58900;">goal</span>&gt;compile&lt;/<span style="color: #b58900;">goal</span>&gt;
            &lt;<span style="color: #b58900;">goal</span>&gt;testCompile&lt;/<span style="color: #b58900;">goal</span>&gt;
        &lt;/<span style="color: #b58900;">goals</span>&gt;
    &lt;/<span style="color: #b58900;">execution</span>&gt;
&lt;/<span style="color: #b58900;">executions</span>&gt;
</pre>
</div>
<p>
运行 <code>mvn scala:testCompile</code> 则只会编译test部分的代码.
</p>
</div>
</div>

]]></content>
</entry>

</feed>
