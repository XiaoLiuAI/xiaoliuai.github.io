<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: Maven | 记往开来]]></title>
<link href="http://xiaoliuai.github.io/tags/maven/atom.xml" rel="self"/>
<link href="http://xiaoliuai.github.io/"/>
<updated>2015-12-10T22:17:02+01:00</updated>
<id>http://xiaoliuai.github.io/</id>
<author>
<name><![CDATA[Xiao Liu]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Spring Tutorial]]></title>
<link href="http://xiaoliuai.github.io/blog/2015-03-04-spring-tutorial.html"/>
<updated>2015-03-04T00:00:00+01:00</updated>
<id>http://xiaoliuai.github.io/blog/spring-tutorial</id>
<content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Project file structure</a></li>
<li><a href="#sec-2">2. Management with Maven</a></li>
<li><a href="#sec-3">3. Application Configuration</a>
<ul>
<li><a href="#sec-3-1">3.1. Inject configurations</a></li>
<li><a href="#sec-3-2">3.2. Load configuration files.</a></li>
<li><a href="#sec-3-3">3.3. Define configuration source class</a></li>
<li><a href="#sec-3-4">3.4. Automatically assign properties.</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Authentication &amp; Securing</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/tags/maven/atom.xml"><span class="section-number-2">1</span> Project file structure</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Generally, we use maven to manage the directory layout. Hence, you
will get a <b>standard directory</b> layout like below:
</p>
<div class="org-src-container">

<pre class="src src-bash">project
    src
        main
            java
            [scala]
            resources
                environment.properties
                environment.test.properties
                environment.prod.properties
                config
                    application.yml
                    application-dev.yml
                    application-[profile].yml
                [other]
        test
            java
            [scala]
    target
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Management with Maven</h2>
<div class="outline-text-2" id="text-2">
<p>
The files <code>environment.[profile].properties</code> are used to provide
different profiles to <b><a href="http://maven.apache.org/guides/mini/guide-building-for-different-environments.html">maven</a></b>.
</p>

<p>
Since maven is used to manage the package dependencies, different
maven profiles enables you to use different dependencies for
development and production, e.g. run different tasks. I am not
farmiliar with maven, and cannot tell how and when it can be used.
</p>

<p>
You have to add <code>spring-boot-maven-plugin</code> as one of the plugins
under <code>build</code> node in pom.xml.
</p>
<ul class="org-ul">
<li>Development
<ul class="org-ul">
<li>Compile the project by <code>maven clean insatll</code>
</li>
<li>More than Build

<p>
Maven can help running test, web application and produceing
reports by plugins. TODO
</p>
</li>
<li><b>Compile and run</b>: <code>mvn spring-boot:run</code> to run the
application with default profile; <code>mvn -Pprod spring-boot:run</code>
to run the application with <i>prod</i> profile.
</li>
</ul>
</li>
<li>Production
<ul class="org-ul">
<li>Package the files

<ul class="org-ul">
<li><b>Jar file</b>. Run <code>mvn clean package</code> to build the jar file
and run it through command line.
</li>

<li><b>War file</b>. Add <code>&lt;packaging&gt;war&lt;/packaging&gt;</code> in pom.xml
file, under the root node. Then run <code>mvn package</code> as
building the jar file.
</li>
</ul>
</li>

<li>Deploy
</li>
</ul>
</li>
</ul>

<p>
From command line, you can run the jar file with specification of
profile.
</p>
<div class="org-src-container">

<pre class="src src-bash">java -jar -Dspring.profiles.active=production YOUR_JAR.jar
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Application Configuration</h2>
<div class="outline-text-2" id="text-3">
<p>
The files <code>application-[profile].yml</code> are used to provide different
configurations for <b><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html">spring</a></b>.
</p>

<p>
Spring configuration files let you to inject different
configurations for development and production. For example, you can
use different database for development and production (different
host, port, username and password, etc.).
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Inject configurations</h3>
<div class="outline-text-3" id="text-3-1">
<p>
You can get access to these configurations through many ways
</p>
<ul class="org-ul">
<li>Inject the value of configuration to attribute of this class by
<code>@Value("${NAME:DEFAULT_VALUE}")</code>.
</li>
<li>You can also inject <code>Environment</code> object.
<div class="org-src-container">

<pre class="src src-java"><span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">This line is not about get the property, but about define</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">property and let it accessible by somewhere else.</span>&#57344;&#57345;&#57345;
<span style="color: #268bd2;">@Configuration</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">AppConfig</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span> <span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">env</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Bean</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">MyBean</span> <span style="color: #b58900;">myBean</span>() {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">MyBean</span> <span style="color: #6c71c4;">myBean</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">MyBean</span>();&#57344;&#57345;&#57345;
        myBean.setName(env.getProperty(<span style="color: #2aa198;">"bean.name"</span>));&#57344;&#57345;&#57345;
        <span style="color: #859900;">return</span> myBean;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>You can also implement the <code>EnvironmentAware</code> interface to get
an environment object to get the property.
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">MailConfiguration</span> <span style="color: #859900;">implements</span> <span style="color: #268bd2;">EnvironmentAware</span> {&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">setEnvironment</span>(<span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">environment</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">this</span>.propertyResolver = <span style="color: #859900;">new</span> <span style="color: #268bd2;">RelaxedPropertyResolver</span>(environment, ENV_SPRING_MAIL);&#57344;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
</ul>

<p>
One difference between <code>Environment</code> and <code>@Value</code> is that we can
access the information related to profiles. The environment can
determine which profiles are currently active, and which profile
should be active by default.
</p>
<div class="org-src-container">

<pre class="src src-java">env.acceptsProfiles(<span style="color: #268bd2;">String</span>... <span style="color: #6c71c4;">profiles</span>)&#57344;&#57345;&#57345;
env.getActiveProfiles() <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">return an array of strings</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>Environment</code> interface extends <code>PropertyResolver</code>, which is used
to acess the properties. You can get property directly from the
environment object. The example above provide a way that get
properties by key name following a relaxed rule.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Load configuration files.</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Different property sources are loaded in predefined order. You
can set the default additional property file by
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">SimpleCommandLinePropertySource</span> <span style="color: #6c71c4;">source</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">SimpleCommandLinePropertySource</span>(args);&#57344;&#57345;
<span style="color: #859900;">if</span> (<span style="color: #268bd2;">!</span>source.containsProperty(<span style="color: #2aa198;">"spring.profiles.active"</span>)){&#57344;&#57345;&#57345;
    app.setAdditionalProfiles([profile_name])&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Define configuration source class</h3>
<div class="outline-text-3" id="text-3-3">
<p>
 A class is recognized as a source of configuration if it has the
<code>@Configuration</code> class. <code>@Bean</code> defined in this class can be
accessed from <code>AnnotationConfigApplicationContext</code>. It is a
replacement of XML configuration files that defines beans.
Get the configuration from configuration class in some where
else.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">ConfigurationTest</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Test</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">testHelloworld</span> () {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">AnnotationConfigApplicationContext</span> <span style="color: #6c71c4;">ctx</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">AnnotationConfigApplicationContext</span>(AppConfig.<span style="color: #859900;">class</span>);&#57344;&#57345;
        Assert.assertEquals(<span style="color: #2aa198;">"hello"</span>, ctx.getBean(<span style="color: #2aa198;">"message"</span>)); <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">message is the name of the Bean method in configuration class</span>&#57344;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it can also be used to get any kind of object</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>AppConfig</code> is the class that used as configuration source.
</p>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Automatically assign properties.</h3>
<div class="outline-text-3" id="text-3-4">
<p>
In configuration source, add
<code>@EnableConfigurationProperties(A.class)</code>. In target class <code>A</code>,
add <code>@ConfigurationProperties(prefix = "PREFIX")</code>. Then the
properties under <code>PREFIX</code> will be automatically assigned to the
attributes of class <code>A</code>. <b>DETAILS OF THE CONFIGURATION SOURCE</b>???
</p>

<p>
<code>@EnableAutoConfiguration</code> auto configure the application. I
don&#8217;t know the details of this annotation, but it auto wires the
configurations into the embedded tomcat. Besides, it also
configures the database (host and port) automatically when
database template is injected in the project.
</p>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Authentication &amp; Securing</h2>
<div class="outline-text-2" id="text-4">
<p>
It is mainly implemented by <code>HttpSecurity</code>, which can be injected
and configured in method of class that extends
<code>WebSecurityConfigurerAdapter</code>.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">SecurityConfig</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">WebSecurityConfigurerAdapter</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">UserDetailsService</span> <span style="color: #6c71c4;">userDetailsService</span>;&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">class access to the user database</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Value</span>(<span style="color: #2aa198;">"${drill.security.rememberme.key}"</span>)&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">remerberMeKey</span>;&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">key for cookies</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configureGlobal</span>(<span style="color: #268bd2;">AuthenticationManagerBuilder</span> <span style="color: #6c71c4;">auth</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;
        auth&#57344;&#57345;&#57345;
            .userDetailsService(userDetailsService) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">the point that connect the authentication module and user database</span>&#57344;&#57345;
            .passwordEncoder(passwordEncoder());&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">WebSecurity</span> <span style="color: #6c71c4;">web</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Spring security ignore following URL</span>&#57344;&#57345;&#57345;
        web.ignoring()&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/bower_components/**"</span>)&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/fonts/**"</span>)&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/images/**"</span>)&#57344;&#57345;&#57345;
            ...;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">protected</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">HttpSecurity</span> <span style="color: #6c71c4;">http</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        http.authorizeRequests()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/**"</span>).authenticated()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/rest/register"</span>).permitAll()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/rest/logs/**"</span>).hasAuthority(<span style="color: #268bd2;">Authority</span>.ADMIN)&#57344;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">set authorities</span>&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .formLogin()&#57344;&#57345;&#57345;
                .usernameParameter(<span style="color: #2aa198;">"username"</span>)&#57344;&#57345;&#57345;
                .passwordParameter(<span style="color: #2aa198;">"password"</span>)&#57344;&#57345;&#57345;
                .loginProcessingUrl(<span style="color: #2aa198;">"/app/authentication"</span>)&#57344;&#57345;&#57345;
                .successHandler(ajaxAuthenticationSuccessHandler)&#57344;&#57345;&#57345;
                .failureHandler(ajaxAuthenticationFailureHandler)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">set login service url</span>&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .logout()&#57344;&#57345;&#57345;
                .logoutUrl(<span style="color: #2aa198;">"/app/logout"</span>)&#57344;&#57345;&#57345;
                .logoutSuccessHandler(ajaxLogoutSuccessHandler)&#57344;&#57345;&#57345;
                .deleteCookies(<span style="color: #2aa198;">"JSESSIONID"</span>)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .exceptionHandling()&#57344;&#57345;&#57345;
                .authenticationEntryPoint(authenticationEntryPoint)&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .rememberMe()&#57344;&#57345;&#57345;
                .rememberMeServices(rememberMeServices)&#57344;&#57345;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it is not persistent token</span>&#57344;&#57345;&#57345;
                .key(remerberMeKey)&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .csrf().disable()  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">not clear</span>&#57344;&#57345;&#57345;
                .headers().cacheControl(); <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">not clear</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>

<p>
The foundation of user securing is about session and cookies. Once
the user logged in, the server will set the cookies in
browser. Then browser will send the cookies via HTTP protocol
everytime it send new request to the server. On the server side,
<i>session</i> is also kept with a unique random id to identify the
client. Look another blog <i>Init the project</i> to see how to replace
the in memory user store by a repository that connects to
database. On the server side, programmer can get the user
information by:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">static</span> <span style="color: #268bd2;">String</span> <span style="color: #b58900;">getCurrentLogin</span>() {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">SecurityContext</span> <span style="color: #6c71c4;">securityContext</span> = SecurityContextHolder.getContext();&#57344;&#57345;
    <span style="color: #268bd2;">Authentication</span> <span style="color: #6c71c4;">authentication</span> = securityContext.getAuthentication();&#57344;&#57345;
    <span style="color: #268bd2;">UserDetails</span> <span style="color: #6c71c4;">springSecurityUser</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">userName</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">if</span>(authentication != <span style="color: #268bd2;">null</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> UserDetails) {&#57344;&#57345;&#57345;
            springSecurityUser = (<span style="color: #268bd2;">UserDetails</span>) authentication.getPrincipal();&#57344;&#57345;
            userName = springSecurityUser.getUsername();&#57344;&#57345;&#57345;
        } <span style="color: #859900;">else</span> <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> String) {&#57344;&#57345;&#57345;
            userName = (<span style="color: #268bd2;">String</span>) authentication.getPrincipal();&#57344;&#57345;&#57345;
        }&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> userName;&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

]]></content>
</entry>

</feed>
