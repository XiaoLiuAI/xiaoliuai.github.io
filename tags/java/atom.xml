<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: Java | 记往开来]]></title>
<link href="http://xiaoliuai.github.io/tags/java/atom.xml" rel="self"/>
<link href="http://xiaoliuai.github.io/"/>
<updated>2016-01-20T18:36:47+01:00</updated>
<id>http://xiaoliuai.github.io/</id>
<author>
<name><![CDATA[Xiao Liu]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Spring Tutorial]]></title>
<link href="http://xiaoliuai.github.io/blog/2015-03-04-spring-tutorial.html"/>
<updated>2015-03-04T00:00:00+01:00</updated>
<id>http://xiaoliuai.github.io/blog/spring-tutorial</id>
<content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Project file structure</a></li>
<li><a href="#sec-2">2. Management with Maven</a></li>
<li><a href="#sec-3">3. Application Configuration</a>
<ul>
<li><a href="#sec-3-1">3.1. Inject configurations</a></li>
<li><a href="#sec-3-2">3.2. Load configuration files.</a></li>
<li><a href="#sec-3-3">3.3. Define configuration source class</a></li>
<li><a href="#sec-3-4">3.4. Automatically assign properties.</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Authentication &amp; Securing</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/tags/java/atom.xml"><span class="section-number-2">1</span> Project file structure</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Generally, we use maven to manage the directory layout. Hence, you
will get a <b>standard directory</b> layout like below:
</p>
<div class="org-src-container">

<pre class="src src-bash">project
    src
        main
            java
            [scala]
            resources
                environment.properties
                environment.test.properties
                environment.prod.properties
                config
                    application.yml
                    application-dev.yml
                    application-[profile].yml
                [other]
        test
            java
            [scala]
    target
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Management with Maven</h2>
<div class="outline-text-2" id="text-2">
<p>
The files <code>environment.[profile].properties</code> are used to provide
different profiles to <b><a href="http://maven.apache.org/guides/mini/guide-building-for-different-environments.html">maven</a></b>.
</p>

<p>
Since maven is used to manage the package dependencies, different
maven profiles enables you to use different dependencies for
development and production, e.g. run different tasks. I am not
farmiliar with maven, and cannot tell how and when it can be used.
</p>

<p>
You have to add <code>spring-boot-maven-plugin</code> as one of the plugins
under <code>build</code> node in pom.xml.
</p>
<ul class="org-ul">
<li>Development
<ul class="org-ul">
<li>Compile the project by <code>maven clean insatll</code>
</li>
<li>More than Build

<p>
Maven can help running test, web application and produceing
reports by plugins. TODO
</p>
</li>
<li><b>Compile and run</b>: <code>mvn spring-boot:run</code> to run the
application with default profile; <code>mvn -Pprod spring-boot:run</code>
to run the application with <i>prod</i> profile.
</li>
</ul>
</li>
<li>Production
<ul class="org-ul">
<li>Package the files

<ul class="org-ul">
<li><b>Jar file</b>. Run <code>mvn clean package</code> to build the jar file
and run it through command line.
</li>

<li><b>War file</b>. Add <code>&lt;packaging&gt;war&lt;/packaging&gt;</code> in pom.xml
file, under the root node. Then run <code>mvn package</code> as
building the jar file.
</li>
</ul>
</li>

<li>Deploy
</li>
</ul>
</li>
</ul>

<p>
From command line, you can run the jar file with specification of
profile.
</p>
<div class="org-src-container">

<pre class="src src-bash">java -jar -Dspring.profiles.active=production YOUR_JAR.jar
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Application Configuration</h2>
<div class="outline-text-2" id="text-3">
<p>
The files <code>application-[profile].yml</code> are used to provide different
configurations for <b><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html">spring</a></b>.
</p>

<p>
Spring configuration files let you to inject different
configurations for development and production. For example, you can
use different database for development and production (different
host, port, username and password, etc.).
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Inject configurations</h3>
<div class="outline-text-3" id="text-3-1">
<p>
You can get access to these configurations through many ways
</p>
<ul class="org-ul">
<li>Inject the value of configuration to attribute of this class by
<code>@Value("${NAME:DEFAULT_VALUE}")</code>.
</li>
<li>You can also inject <code>Environment</code> object.
<div class="org-src-container">

<pre class="src src-java"><span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">This line is not about get the property, but about define</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">property and let it accessible by somewhere else.</span>&#57344;&#57345;&#57345;
<span style="color: #268bd2;">@Configuration</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">AppConfig</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span> <span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">env</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Bean</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">MyBean</span> <span style="color: #b58900;">myBean</span>() {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">MyBean</span> <span style="color: #6c71c4;">myBean</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">MyBean</span>();&#57344;&#57345;&#57345;
        myBean.setName(env.getProperty(<span style="color: #2aa198;">"bean.name"</span>));&#57344;&#57345;&#57345;
        <span style="color: #859900;">return</span> myBean;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>You can also implement the <code>EnvironmentAware</code> interface to get
an environment object to get the property.
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">MailConfiguration</span> <span style="color: #859900;">implements</span> <span style="color: #268bd2;">EnvironmentAware</span> {&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">setEnvironment</span>(<span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">environment</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">this</span>.propertyResolver = <span style="color: #859900;">new</span> <span style="color: #268bd2;">RelaxedPropertyResolver</span>(environment, ENV_SPRING_MAIL);&#57344;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
</ul>

<p>
One difference between <code>Environment</code> and <code>@Value</code> is that we can
access the information related to profiles. The environment can
determine which profiles are currently active, and which profile
should be active by default.
</p>
<div class="org-src-container">

<pre class="src src-java">env.acceptsProfiles(<span style="color: #268bd2;">String</span>... <span style="color: #6c71c4;">profiles</span>)&#57344;&#57345;&#57345;
env.getActiveProfiles() <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">return an array of strings</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>Environment</code> interface extends <code>PropertyResolver</code>, which is used
to acess the properties. You can get property directly from the
environment object. The example above provide a way that get
properties by key name following a relaxed rule.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Load configuration files.</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Different property sources are loaded in predefined order. You
can set the default additional property file by
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">SimpleCommandLinePropertySource</span> <span style="color: #6c71c4;">source</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">SimpleCommandLinePropertySource</span>(args);&#57344;&#57345;
<span style="color: #859900;">if</span> (<span style="color: #268bd2;">!</span>source.containsProperty(<span style="color: #2aa198;">"spring.profiles.active"</span>)){&#57344;&#57345;&#57345;
    app.setAdditionalProfiles([profile_name])&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Define configuration source class</h3>
<div class="outline-text-3" id="text-3-3">
<p>
 A class is recognized as a source of configuration if it has the
<code>@Configuration</code> class. <code>@Bean</code> defined in this class can be
accessed from <code>AnnotationConfigApplicationContext</code>. It is a
replacement of XML configuration files that defines beans.
Get the configuration from configuration class in some where
else.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">ConfigurationTest</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Test</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">testHelloworld</span> () {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">AnnotationConfigApplicationContext</span> <span style="color: #6c71c4;">ctx</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">AnnotationConfigApplicationContext</span>(AppConfig.<span style="color: #859900;">class</span>);&#57344;&#57345;
        Assert.assertEquals(<span style="color: #2aa198;">"hello"</span>, ctx.getBean(<span style="color: #2aa198;">"message"</span>)); <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">message is the name of the Bean method in configuration class</span>&#57344;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it can also be used to get any kind of object</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>AppConfig</code> is the class that used as configuration source.
</p>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Automatically assign properties.</h3>
<div class="outline-text-3" id="text-3-4">
<p>
In configuration source, add
<code>@EnableConfigurationProperties(A.class)</code>. In target class <code>A</code>,
add <code>@ConfigurationProperties(prefix = "PREFIX")</code>. Then the
properties under <code>PREFIX</code> will be automatically assigned to the
attributes of class <code>A</code>. <b>DETAILS OF THE CONFIGURATION SOURCE</b>???
</p>

<p>
<code>@EnableAutoConfiguration</code> auto configure the application. I
don&#8217;t know the details of this annotation, but it auto wires the
configurations into the embedded tomcat. Besides, it also
configures the database (host and port) automatically when
database template is injected in the project.
</p>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Authentication &amp; Securing</h2>
<div class="outline-text-2" id="text-4">
<p>
It is mainly implemented by <code>HttpSecurity</code>, which can be injected
and configured in method of class that extends
<code>WebSecurityConfigurerAdapter</code>.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">SecurityConfig</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">WebSecurityConfigurerAdapter</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">UserDetailsService</span> <span style="color: #6c71c4;">userDetailsService</span>;&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">class access to the user database</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Value</span>(<span style="color: #2aa198;">"${drill.security.rememberme.key}"</span>)&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">remerberMeKey</span>;&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">key for cookies</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configureGlobal</span>(<span style="color: #268bd2;">AuthenticationManagerBuilder</span> <span style="color: #6c71c4;">auth</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;
        auth&#57344;&#57345;&#57345;
            .userDetailsService(userDetailsService) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">the point that connect the authentication module and user database</span>&#57344;&#57345;
            .passwordEncoder(passwordEncoder());&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">WebSecurity</span> <span style="color: #6c71c4;">web</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Spring security ignore following URL</span>&#57344;&#57345;&#57345;
        web.ignoring()&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/bower_components/**"</span>)&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/fonts/**"</span>)&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/images/**"</span>)&#57344;&#57345;&#57345;
            ...;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">protected</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">HttpSecurity</span> <span style="color: #6c71c4;">http</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        http.authorizeRequests()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/**"</span>).authenticated()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/rest/register"</span>).permitAll()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/rest/logs/**"</span>).hasAuthority(<span style="color: #268bd2;">Authority</span>.ADMIN)&#57344;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">set authorities</span>&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .formLogin()&#57344;&#57345;&#57345;
                .usernameParameter(<span style="color: #2aa198;">"username"</span>)&#57344;&#57345;&#57345;
                .passwordParameter(<span style="color: #2aa198;">"password"</span>)&#57344;&#57345;&#57345;
                .loginProcessingUrl(<span style="color: #2aa198;">"/app/authentication"</span>)&#57344;&#57345;&#57345;
                .successHandler(ajaxAuthenticationSuccessHandler)&#57344;&#57345;&#57345;
                .failureHandler(ajaxAuthenticationFailureHandler)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">set login service url</span>&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .logout()&#57344;&#57345;&#57345;
                .logoutUrl(<span style="color: #2aa198;">"/app/logout"</span>)&#57344;&#57345;&#57345;
                .logoutSuccessHandler(ajaxLogoutSuccessHandler)&#57344;&#57345;&#57345;
                .deleteCookies(<span style="color: #2aa198;">"JSESSIONID"</span>)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .exceptionHandling()&#57344;&#57345;&#57345;
                .authenticationEntryPoint(authenticationEntryPoint)&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .rememberMe()&#57344;&#57345;&#57345;
                .rememberMeServices(rememberMeServices)&#57344;&#57345;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it is not persistent token</span>&#57344;&#57345;&#57345;
                .key(remerberMeKey)&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .csrf().disable()  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">not clear</span>&#57344;&#57345;&#57345;
                .headers().cacheControl(); <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">not clear</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>

<p>
The foundation of user securing is about session and cookies. Once
the user logged in, the server will set the cookies in
browser. Then browser will send the cookies via HTTP protocol
everytime it send new request to the server. On the server side,
<i>session</i> is also kept with a unique random id to identify the
client. Look another blog <i>Init the project</i> to see how to replace
the in memory user store by a repository that connects to
database. On the server side, programmer can get the user
information by:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">static</span> <span style="color: #268bd2;">String</span> <span style="color: #b58900;">getCurrentLogin</span>() {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">SecurityContext</span> <span style="color: #6c71c4;">securityContext</span> = SecurityContextHolder.getContext();&#57344;&#57345;
    <span style="color: #268bd2;">Authentication</span> <span style="color: #6c71c4;">authentication</span> = securityContext.getAuthentication();&#57344;&#57345;
    <span style="color: #268bd2;">UserDetails</span> <span style="color: #6c71c4;">springSecurityUser</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">userName</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">if</span>(authentication != <span style="color: #268bd2;">null</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> UserDetails) {&#57344;&#57345;&#57345;
            springSecurityUser = (<span style="color: #268bd2;">UserDetails</span>) authentication.getPrincipal();&#57344;&#57345;
            userName = springSecurityUser.getUsername();&#57344;&#57345;&#57345;
        } <span style="color: #859900;">else</span> <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> String) {&#57344;&#57345;&#57345;
            userName = (<span style="color: #268bd2;">String</span>) authentication.getPrincipal();&#57344;&#57345;&#57345;
        }&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> userName;&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Spring Guide Examples]]></title>
<link href="http://xiaoliuai.github.io/blog/2015-03-04-spring-guide-examples.html"/>
<updated>2015-03-04T00:00:00+01:00</updated>
<id>http://xiaoliuai.github.io/blog/spring-guide-examples</id>
<content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Start RESTFul Server</a></li>
<li><a href="#sec-2">2. Securing Web</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/tags/java/atom.xml"><span class="section-number-2">1</span> Start RESTFul Server</a></h2>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Securing Web</h2>
<div class="outline-text-2" id="text-2">
<p>
This example uses WebMvc framework, which uses
<code>WebMvcConfigurerAdapter</code> and <code>ViewControllerRegistry</code> to connect
the urls and html templates.
</p>

<p>
Add <code>spring-boot-starter-security</code> into dependency, make
<code>WebSecurityConfig.java</code>.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">@Configuration</span>&#57344;&#57345;&#57345;
<span style="color: #268bd2;">@EnableWebMvcSecurity</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">WebSecurityConfig</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">WebSecurityConfigurerAdapter</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">protected</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">HttpSecurity</span> <span style="color: #6c71c4;">http</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        http&#57344;&#57345;&#57345;
            .authorizeRequests()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/"</span>, <span style="color: #2aa198;">"/home"</span>).permitAll()&#57344;&#57345;&#57345;
                .anyRequest().authenticated()&#57344;&#57345;&#57345;
                .and()&#57344;&#57345;&#57345;
            .formLogin()&#57344;&#57345;&#57345;
                .loginPage(<span style="color: #2aa198;">"/login"</span>)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
                .and()&#57344;&#57345;&#57345;
            .logout()&#57344;&#57345;&#57345;
                .permitAll();&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Autowired</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configureGlobal</span>(<span style="color: #268bd2;">AuthenticationManagerBuilder</span> <span style="color: #6c71c4;">auth</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;
        auth&#57344;&#57345;&#57345;
            .inMemoryAuthentication()&#57344;&#57345;&#57345;
                .withUser(<span style="color: #2aa198;">"user"</span>).password(<span style="color: #2aa198;">"password"</span>).roles(<span style="color: #2aa198;">"USER"</span>);&#57344;&#57345;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">user repository in memory with username = "user" and password = "password"</span>&#57344;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it is just for demon</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Drill的Java后端]]></title>
<link href="http://xiaoliuai.github.io/blog/2014-12-18-drilljava.html"/>
<updated>2014-12-18T00:00:00+01:00</updated>
<id>http://xiaoliuai.github.io/blog/drilljava</id>
<content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 环境与配置加载</a>
<ul>
<li><a href="#sec-1-1">1.1. 配置文件</a></li>
<li><a href="#sec-1-2">1.2. 获取配置内容</a></li>
<li><a href="#sec-1-3">1.3. 根据配置进行渲染</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 持久化</a></li>
<li><a href="#sec-3">3. 业务层</a>
<ul>
<li><a href="#sec-3-1">3.1. Controller</a>
<ul>
<li><a href="#sec-3-1-1">3.1.1. <code>AccountResource</code></a></li>
<li><a href="#sec-3-1-2">3.1.2. <code>UserResource</code></a></li>
</ul>
</li>
<li><a href="#sec-3-2">3.2. Service</a></li>
<li><a href="#sec-3-3">3.3. DTO</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Security</a>
<ul>
<li><a href="#sec-4-1">4.1. <code>SecurityContextHolder</code></a></li>
<li><a href="#sec-4-2">4.2. <code>UserDetails</code></a></li>
<li><a href="#sec-4-3">4.3. <code>GrantedAuthority</code></a></li>
<li><a href="#sec-4-4">4.4. 其它</a></li>
</ul>
</li>
</ul>
</div>
</div>


<p>
Java后端负责业务逻辑,数据持久化(数据库),安全等等.目前接触到的内容有
账号注册登录管理,本地化设置等等.将整个后端当做一个应用,那么在主目录
下有一个 <code>Application.java</code> 类作为整个应用的入口.这个类最基本的应用需要
<code>@ComponentScan</code> 和 <code>@EnableAutoConfiguration</code> 两个标签来声明自动配
置和扫描组件;同时在 <code>main</code> 函数里实例化一个 <code>SpringApplication</code> 对象
并调用对象函数 <code>run()</code> 就行了. 目前的程序里还用
<code>app.setAdditionalProfiles</code> 在没有命令行参数的时候默认加载dev配置.
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/tags/java/atom.xml"><span class="section-number-2">1</span> 环境与配置加载</a></h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 配置文件</h3>
<div class="outline-text-3" id="text-1-1">
<p>
<code>SpringApplication</code> 会自动搜索以下路径来寻找
<code>application.properties</code> 作为配置文件.
</p>
<ol class="org-ol">
<li>当前路径下地 <code>/config</code> 子文件夹
</li>
<li>当前路径
</li>
<li><code>classpath:/config</code>
</li>
<li><code>classpath</code>
</li>
</ol>
<p>
同时,SpringApplication还支持 <font
    color='blue'>YAML</font> 文件,即 <i>applicaiton.yml</i>.
函数 <code>SpringApplication.setAdditionalProfiles("dev")</code> 则会额外加载
<i>application-dev.yml</i> (或者 <i>application-dev.properties</i>), 而不是
<i>dev.yml</i>.
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 获取配置内容</h3>
<div class="outline-text-3" id="text-1-2">
<p>
当我们有类继承了EnvironmentAware这个接口的时候,框架会自动调用这个类
的 <code>setEnvironment</code> 方法,将一个 <code>Environment</code> 对象交给这个类的对象
从而使这个类获得配置文件中提供的参数. <code>LocaleConfiguration</code> 和
<code>MailConfiguration</code> 两个类展示了相关的编程方法.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">MailConfiguration</span> <span style="color: #859900;">implements</span> <span style="color: #268bd2;">EnvironmentAware</span> {&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">setEnvironment</span>(<span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">environment</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">this</span>.propertyResolver = <span style="color: #859900;">new</span> <span style="color: #268bd2;">RelaxedPropertyResolver</span>(environment, ENV_SPRING_MAIL);&#57344;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>

<p>
另一种方法是直接 <code>@Inject</code> 一个 <code>Environment</code> 的对象.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">MailService</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">env</span>;&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<b><font color='red'>&lt;&#x2013;这种方法跟之前所介绍的有什么区别,暂时不知道.&#x2013;&gt;</font></b>
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 根据配置进行渲染</h3>
<div class="outline-text-3" id="text-1-3">
<p>
<code>LocalResolver</code> 和 <code>Interceptor</code>. 在接受请求的时候, <code>Interceptor</code>
拦截请求中特定的参数值,并且调用 <code>LocalResolver</code> 的函数来进行相关渲
染处理.在 <code>LocaleConfiguration</code> 中,龙伟权通过定义Bean来指定特定的
<code>LocalResolver</code>, 即 <code>AngularCookieLocaleResolver</code>.
</p>

<p>
问题:
</p>
<ol class="org-ol">
<li><code>LocaleConfiguration</code> 和 <code>ThymeleafConfiguration</code> 都有方法返回
<code>MessageSource</code>, <code>MailService</code> 里面貌似引用的是
<code>LocaleConfiguration</code> 返回的对象,为什么?
</li>
</ol>
</div>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 持久化</h2>
<div class="outline-text-2" id="text-2">
<p>
对象的关联问题.Mongodb本身作为NoSql的典范,内部以文件和类似json的数
据形式来储存数据.Mongodb中一个Document可以看做关系数据库中的一行数
据,一个Repository可以看做关系数据库中的一个表(table).目前我们有三个
标记为 <code>@Document</code> 的类 <code>PersistentToken,Task,User</code> 和对应的
<code>Repository</code> 类.
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 业务层</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Controller</h3>
<div class="outline-text-3" id="text-3-1">
<p>
控制器类都在org.team.drill.web下面,统一以 <i>XXXResource</i> 命名.
</p>
</div>
<div id="outline-container-sec-3-1-1" class="outline-4">
<h4 id="sec-3-1-1"><span class="section-number-4">3.1.1</span> <code>AccountResource</code></h4>
<div class="outline-text-4" id="text-3-1-1">
<ul class="org-ul">
<li>registerAccount
注册账户,接受新账户信息,验证账户,创建账户,发送激活邮件.
</li>
<li>activateAccount
激活账户,通过激活key来确定当前User.
</li>
<li>isAuthenticate
这个什么时候会用到?
<ul class="org-ul">
<li>HttpServletRequest request.getRemoteUser()
</li>
</ul>
</li>
<li>getAccount
这个貌似是浏览账户信息的时候用, 返回 <i>UserDTO</i>
</li>
<li>saveAccount
这个是修改用户信息用, email 地址必须唯一
</li>
<li>changePassword (newPassword)
这个是修改用户密码用
</li>
<li>getCurrentSession
貌似是获得所有当前用户的登录记录(多地自动登录产生多个记录)
</li>
<li>invalideSession
取消某个登录记录(已登录)
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-1-2" class="outline-4">
<h4 id="sec-3-1-2"><span class="section-number-4">3.1.2</span> <code>UserResource</code></h4>
<div class="outline-text-4" id="text-3-1-2">
<ul class="org-ul">
<li>getUser
通过String login获取user, 直接返回 <i>User</i>
</li>
</ul>

<p>
登录功能是在 <i>SecurityConfig</i> 中间接实现的.
</p>
</div>
</div>
</div>


<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Service</h3>
<div class="outline-text-3" id="text-3-2">
<p>
<i>Service</i> 里面通过 <i>SecurityContextHolder</i> 来获取当前用户.
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> DTO</h3>
<div class="outline-text-3" id="text-3-3">
<p>
位于 <i>web.dto</i> 包下面的 <code>UserDTO</code> 类型,似乎是用来作为JS交互的数据
对象?但是内容上跟 <i>domain</i> 里的 <code>User</code> 差不多,用来保证安全.在更复
杂的应用环境中有用.
</p>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Security</h2>
<div class="outline-text-2" id="text-4">
<p>
不论是Service还是Resource,都是靠 <code>SecurityUtils.getCurrentLogin()</code>
来获取当前用户的.那么问题来了,SecurityUtils如何知道当前用户是谁?
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">final</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">SecurityUtils</span> {&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #b58900;">SecurityUtils</span>() {&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #d33682;">/**</span>&#57344;&#57345;&#57345;
<span style="color: #d33682;">     * Get the login of the current user.</span>&#57344;&#57345;&#57345;
<span style="color: #d33682;">     */</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #859900;">static</span> <span style="color: #268bd2;">String</span> <span style="color: #b58900;">getCurrentLogin</span>() {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">SecurityContext</span> <span style="color: #6c71c4;">securityContext</span> = SecurityContextHolder.getContext();&#57344;&#57345;
        <span style="color: #268bd2;">Authentication</span> <span style="color: #6c71c4;">authentication</span> = securityContext.getAuthentication();&#57344;&#57345;
        <span style="color: #268bd2;">UserDetails</span> <span style="color: #6c71c4;">springSecurityUser</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">userName</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
        <span style="color: #859900;">if</span>(authentication != <span style="color: #268bd2;">null</span>) {&#57344;&#57345;&#57345;
            <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> UserDetails) {&#57344;&#57345;
                springSecurityUser = (<span style="color: #268bd2;">UserDetails</span>) authentication.getPrincipal();&#57344;&#57345;
                userName = springSecurityUser.getUsername();&#57344;&#57345;&#57345;
            } <span style="color: #859900;">else</span> <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> String) {&#57344;&#57345;
                userName = (<span style="color: #268bd2;">String</span>) authentication.getPrincipal();&#57344;&#57345;&#57345;
            }&#57344;&#57345;&#57345;
        }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
        <span style="color: #859900;">return</span> userName;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> <code>SecurityContextHolder</code></h3>
<div class="outline-text-3" id="text-4-1">
<p>
包含安全上下文信息,并且默认为/ThreadLocal/,即对于一个线程采用一
个统一的安全上下文信息.同时,=SecurityContextHolder= 中还储存了当前
与App进行交互的主体(<i>principal</i>)的详情,用 <code>Authentication</code> 对象来表
示.上面的代码示例中体现的是获取当前用户信息的标准用法.
</p>

<p>
<b><font color='red'>&lt;&#x2013;spring应用内部线程到底是如何管理
的?&#x2013;&gt;</font></b>
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> <code>UserDetails</code></h3>
<div class="outline-text-3" id="text-4-2">
<p>
在以上代码片段中我们可以看到一个特殊的类 <code>UserDetails</code>,在获取当前主
体的时候,返回的可能是一个 <i>String</i> 或者一个 <i>UserDetails</i> 的对象.那
么这个/UserDetails/到底是什么东西,为什么它的方法 <code>getUsername()</code> 刚
好能包含我们的 <code>User</code> 类所需的 <i>login</i>?
</p>

<p>
<i>UserDetails</i> 是一个接口,包含了 <code>getPassword()</code>, <code>getUsername()</code> 等
一系列方法. 在 <i>UserDetails</i> 中加入我们定义的 <i>login</i>,这是靠实现
<code>UserDetailsService</code> 接口来做到的. 这个接口只包含一个方法,这个方法
接受一个 <i>String</i> 参数,并返回一个实现了 <code>UserDetails</code> 接口的对象.目
前在org.team.drill.security包中的 <code>UserDetailsService</code> 类里面,龙伟
权实现了这个方法,并且将 <code>org.team.drill.domain.User</code> 的 <i>login</i> 包
装到实现了 <i>UserDetails</i> 接口的
<code>org.springframework.security.core.userdetails.User</code> 类中.
</p>

<p>
到这里,我试着把 <i>SecurityContextHolder</i> 到 <i>UserDetails</i> 串起来. 个
人认为,在通过
<code>SecurityContextHolder.getContext().getAuthentication().getPrincipal()</code>
来获取 <i>UserDetails</i> 的时候,spring通过调用实现了
<code>org.springframework.security.core.userdetails.UserDetailsService</code>
接口的对象的方法来尝试获取 <i>UserDetails</i>, 这个方法本身接受一个
String参数. <font color='red'>又绕回来了,这个String参数是
从哪来的?依靠http协议?还是session?</font>
因为某种原因,
<i>getPrincipal</i> 方法返回的是一个 <i>Object</i>,那么实际上给出了一种可能性,就
是通过某个实现了 <i>UserDetails</i> 的类使用额外的业务逻辑.我们可以创建
一个实现了 <i>UserDetals</i> 的类 <b>A</b>,在 <i>UserDetailsService</i> 中返回 <b>A</b>
的对象,然后将 <i>getPrincipal()</i> 返回的对象强制转换为 <b>A</b> 并调用相关
方法.当然,强制转换类型总是有风险的.
</p>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> <code>GrantedAuthority</code></h3>
<div class="outline-text-3" id="text-4-3">
<p>
<code>Authentication</code> 提供两个重要的方法,第一个是上面说过的
<i>getPrincipal</i>,另一个则是 <i>getAuthorities</i> .它返回一个
<i>GrantedAuthoriy</i> 对象数组.顾名思义,这是用来管理用户权限的.在
<i>UserDetailsService</i> 里面进行加载.目前drill中加载的是
<code>SimpleGrantedAuthority</code> 数组,每个 <i>SimpleGrantedAuthority</i> 里面包
含一个字符串,代表某种权限(自定义于
<code>org.team.drill.security.Authority</code> 中).
</p>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> 其它</h3>
<div class="outline-text-3" id="text-4-4">
<p>
用 <code>random.nextBytes</code> 来产生 <i>PersistentToken</i> 的序列号,不怕重复?
虽然16位Byte确实已经很大(10亿的4次方).
</p>
</div>
</div>
</div>

]]></content>
</entry>

</feed>
