<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[记往开来]]></title>
  <link href="http://xiaoliuai.github.io/atom.xml" rel="self"/>
  <link href="http://xiaoliuai.github.io/"/>
  <updated>2014-11-26T19:38:28+01:00</updated>
  <id>http://xiaoliuai.github.io/</id>
  <author>
    <name><![CDATA[Xiao Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parallelism]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-11-26-parallelism.html"/>
    <updated>2014-11-26T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/parallelism</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Installation</a>
<ul>
<li><a href="#sec-1-1">1.1. Local Machine</a></li>
<li><a href="#sec-1-2">1.2. Virtual Machine</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Ocatve</a></li>
<li><a href="#sec-3">3. C</a></li>
<li><a href="#sec-4">4. Performance Comparison</a></li>
</ul>
</div>
</div>
<p>
In this article, I will introduce the installation and basic use of MPI
framework through octave. Matlab is widely used in many scientific
domains as it enables the developers focus on the algorithms other
than programming skills. However, the support of parallelism computing
from Matlab is limited and expensive, especially for computing on
clusters. Currently, two parallelism frameworks are widely used: MPI
(Message Passage Interface) and MapReduce. Hadoop, which is an Java
implementation of MapReduce, does not currently support Matlab or
Octave. Therefore, I choose the MPI + Octave as a parallelism solution
for Matlab users.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-11-26-parallelism.html"><span class="section-number-2">1</span> Installation</a></h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Local Machine</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Install open-mpi.
<ul class="org-ul">
<li>On Mac OS X with homebrew, <code>brew install open-mpi</code>
</li>
<li>On Ubuntu, the direct way is install the packages via package
manager <code>sudo apt-get install openmpi-bin openmpi-common
        openmpi-checkpoint libopenmpi-dev libopenmpi-X.X</code>. However,
the OpenMPI installed through this method does not work with
the octave-mpi package due to a library linkage problem. A
fast cue is compiling and installing it manually.
Download the openmpi package <a href="http://www.open-mpi.org/software/ompi/v1.8/">openmpi-1.8.3.tar.gz</a>.
<div class="org-src-container">

<pre class="src src-bash">tar xzvf openmpi-1.8.3.tar.gz
cd openmpi-1.8.3
./configure --dsiable-dlopen
make
sudo make install
</pre>
</div>
</li>
</ul>
</li>
<li>Install octave
<ul class="org-ul">
<li>On Mac OS X with homebrew
<ol class="org-ol">
<li>install XQuartz from image file downloaded from <a href="http://xquartz.macosforge.org/landing/">http://xquartz.macosforge.org/landing/</a>.
</li>
<li><code>brew tap homebrew/science</code>
</li>
<li>install gfortran <code>brew install gcc</code>
</li>
<li><code>brew install octave</code>
</li>
</ol>
</li>
<li>On Ubuntu
<code>sudo apt-get install octave</code>
</li>
</ul>
</li>
<li>Install octave mpi package
<ul class="org-ul">
<li>Inside octave
<div class="org-src-container">

<pre class="src src-octave">putenv (<span style="color: #2aa198;">"PATH"</span><span style="color: #6c71c4;">,</span> [<span style="color: #2aa198;">"path/to/mpic++/:"</span> getenv(<span style="color: #2aa198;">"PATH"</span>)]) <span style="color: #93a1a1; font-style: italic;">% optional</span>&#57344;&#57345;&#57345;
pkg install <span style="color: #6c71c4;">-</span>forge mpi      <span style="color: #93a1a1; font-style: italic;">% install mpi from internet or</span>&#57344;&#57345;&#57345;
pkg install PATH<span style="color: #6c71c4;">/</span>TO<span style="color: #6c71c4;">/</span>PACKAGE <span style="color: #93a1a1; font-style: italic;">% install mpi from downloaded package</span>&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>Through package manager in Ubuntu (deprecated), run <code>apt-get
        install octave-openmpi-ext</code>. As the pakcage manager could
automatically install the OpenMPI package, which does not work
with the octave-mpi actually, we suggest do NOT use this
method.
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Virtual Machine</h3>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Ocatve</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Run octave code with mpi.
<ul class="org-ul">
<li>First way is run code from shell/terminal/ssh.
<div class="org-src-container">

<pre class="src src-bash">mpirun [OPTIONS] octave -q --eval '[octave code, function or script name]'
</pre>
</div>
</li>
<li>Second way is call the system command inside octave.
<div class="org-src-container">

<pre class="src src-octave">system (<span style="color: #2aa198;">"mpirun octave -q --eval '[octave code, function or script name]"</span>)<span style="color: #6c71c4;">;</span>&#57344;&#57345;
</pre>
</div>
</li>
<li>Octave mpi package contains some simple examples to show you
how to write the octave code that enables the parallelism via
MPI. These codes are in two possible locations if you install
the octave mpi package globally:
<ul class="org-ul">
<li><code>/usr/share/doc/octave-mpi/examples/</code>
</li>
<li><code>/usr/share/octave/packages/mpi-1.2.0/</code>
</li>
</ul>
<p>
If you install the package under user&#8217;s home folder, you can
find exmaple codes under <code>$HOME/octave/packages/mpi-1.2.0/</code>. To
test the example inside octave, run command
<code>system ("mpirun octave -q --eval 'pkg load mpi; helloworld
       ()'");</code>
</p>
</li>
<li>Frequently used mpirun options: <code>--hostfile</code> indicate the file
that contains the hostnames of cluster; <code>-np</code> number of
processes to run.
</li>
</ul>
</li>

<li>The interface provided by octave mpi package is a subset of all
MPI functions. How to parallelize the code?
Example 1, basic example about initializing the environment, send
and receive messages/variables. Basically, these functions are
enough to create the parallelism program.
<div class="org-src-container">

<pre class="src src-octave">MPI_Init()<span style="color: #6c71c4;">;</span>&#57344;&#57345;&#57345;
communicator <span style="color: #6c71c4;">=</span> MPI_Comm_Load(<span style="color: #2aa198;">"a label string"</span>) <span style="color: #93a1a1; font-style: italic;">% one can use multiple communicators indicated by different label</span>&#57344;&#57345;
my_rank <span style="color: #6c71c4;">=</span> MPI_Comm_rank(communicator) <span style="color: #93a1a1; font-style: italic;">% rank is the indicator(id) of current process</span>&#57344;&#57345;
p <span style="color: #6c71c4;">=</span> MPI_Comm_size(CW) <span style="color: #93a1a1; font-style: italic;">% the size of a communicator is the number of processes handled by the communicator</span>&#57344;&#57345;
[info] <span style="color: #6c71c4;">=</span> MPI_Send(value<span style="color: #6c71c4;">,</span> ranks<span style="color: #6c71c4;">,</span> TAG<span style="color: #6c71c4;">,</span> communicator)<span style="color: #6c71c4;">;</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">value:  a octave variable</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">ranks:  a vector that contains the id of destination processes, can be an integer</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">TAG:    an integer to identify the message (when there are many messages sent in the same context)</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">info:   an integer that indicates the success of failure state of process</span>&#57344;&#57345;
[value<span style="color: #6c71c4;">,</span> info] <span style="color: #6c71c4;">=</span> MPI_Recv(source<span style="color: #6c71c4;">,</span> TAG<span style="color: #6c71c4;">,</span> communicator)&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">source: the id the process that send this message</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">%         </span><span style="color: #93a1a1; font-style: italic;">receive from any process if source is -1</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">%         </span><span style="color: #93a1a1; font-style: italic;">process starts from 0 and process 0 is usually used as master process</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">value:  received variable</span>&#57344;&#57345;&#57345;
MPI_Finalize()&#57344;&#57345;&#57345;
</pre>
</div>

<p>
Process sequence control functions:
</p>
<ul class="org-ul">
<li>Function <code>MPI_Barrier(communicator)</code> will block the process until
all the processes reached this location.
</li>

<li>Function <code>MPI_Probe(RANK, TAG, COMM)</code> test if process [RANK] send
a message with TAG from communicator COMM. Block the process if
no message arrive.
</li>

<li>Function <code>MPI_Iprobe(RANK, TAG, COMM)</code> test if process [RANK] send
a message with TAG from communicator COMM. NOT block the process
if no message arrive.
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> C</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>Point-to-point communication
<ul class="org-ul">
<li>blocked
</li>
<li>non-blocked
</li>
</ul>
</li>
<li>Collective communication
<ul class="org-ul">
<li>MPI_Reduce
</li>
<li>MPI_Scatter
</li>
</ul>
</li>
<li>Derived data type
</li>
<li>Group and communicator management
</li>
<li>Virtual topology routine
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Performance Comparison</h2>
<div class="outline-text-2" id="text-4">
<p>
<iframe
src="https://docs.google.com/spreadsheets/d/1kOLf_azmw872VHm6lmOxsPUvpD0hs-ZvbPUJDOjMBFM/pubhtml?gid=0&amp;single=true&amp;widget=true&amp;headers=false"
width="900" height="600"></iframe>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Blog Using Org-mode and Octopress]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-10-29-writing-blog-using-org-mode-and-octopress.html"/>
    <updated>2014-10-29T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/writing-blog-using-org-mode-and-octopress</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Octopress Installation</a>
<ul>
<li><a href="#sec-1-1">1.1. Installation of old version ruby with rbenv</a></li>
<li><a href="#sec-1-2">1.2. Setup the octopress</a>
<ul>
<li><a href="#sec-1-2-1">1.2.1. Copy octopress repository</a></li>
<li><a href="#sec-1-2-2">1.2.2. Install dependencies</a></li>
<li><a href="#sec-1-2-3">1.2.3. Install the default theme</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-2">2. Common usage</a></li>
</ul>
</div>
</div>
<p>
After the installation  and the configuration of jekyll along with
the org-mode. I tried to find some configurations to facilitate the
creation of org files (create file with date in front of file name,
insert heads, etc.) I did not realize the existence of relative
emacs packages in elpa and asked google for solutions. My
inefficient search key-words let the google returns undesired
answer: the <b>octopress</b>. Octopress is based on the jekyll, but
provide richer blog settings. Finally, I migrated to octopress and
use it to manager my github pages.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-10-29-writing-blog-using-org-mode-and-octopress.html"><span class="section-number-2">1</span> Octopress Installation</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Installation of octopress is little complex since it requires low
version ruby.
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Installation of old version ruby with rbenv</h3>
<div class="outline-text-3" id="text-1-1">
<p>
You can following the instructions on the <a href="http://octopress.org/docs/setup/rbenv">official manual</a>.
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #6c71c4;">cd</span> <span style="color: #93a1a1; font-style: italic;"># </span><span style="color: #93a1a1; font-style: italic;">go to home</span>&#57344;&#57345;&#57345;
git clone git://github.com/sstephenson/rbenv.git .rbenv&#57344;&#57345;&#57345;
git clone git://github.com/sstephenson/ruby-build.git .rbenv/plugins/ruby-build&#57344;&#57345;
</pre>
</div>
<p>
Add two lines into the end of shell profile (.zshrc in my case).
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #6c71c4;">export</span> <span style="color: #6c71c4;">PATH</span>=$<span style="color: #6c71c4;">HOME</span>/.rbenv/bin:$<span style="color: #6c71c4;">PATH</span>&#57344;&#57345;&#57345;
<span style="color: #6c71c4;">eval</span> <span style="color: #2aa198;">"$(rbenv init -)"</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Then reload the profile by <code>source ~/.zshrc</code> or resume the
terminal.
The installation of rbenv and ruby-build can be replaced by
</p>
<div class="org-src-container">

<pre class="src src-sh">brew update&#57344;&#57345;&#57345;
brew install rbenv&#57344;&#57345;&#57345;
brew install ruby-build&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Attention: the shell profile must be modified with both
installation methods.
</p>

<p>
Then install ruby 1.9.3, which is required by octopress.
</p>
<div class="org-src-container">

<pre class="src src-sh">rbenv install 1.9.3-p0&#57344;&#57345;&#57345;
rbenv local 1.9.3-p0&#57344;&#57345;&#57345;
rbenv rehash&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Setup the octopress</h3>
<div class="outline-text-3" id="text-1-2">
<p>
My setup experience is basically the same with the <a href="http://octopress.org/docs/setup/">official
manual</a>. However, after the installation, I replaced the octopress
directory to <code>~/WorkSpace/xiaoliuai.github.io</code> because it actually
becomes the repository of my github pages (<b>magnificent!</b>). So I
suggest to clone the octopress git repository into the directory
with the same name of the repository of your github pages at the
beginning.
</p>
</div>

<div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> Copy octopress repository</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
(_I suggest to clone shallow copy with option_ <code>depth</code>)
</p>
<div class="org-src-container">

<pre class="src src-sh">git clone git://github.com/imathis/octopress.git octopress&#57344;&#57345;&#57345;
<span style="color: #6c71c4;">cd</span> octopress&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2"><span class="section-number-4">1.2.2</span> Install dependencies</h4>
<div class="outline-text-4" id="text-1-2-2">
<div class="org-src-container">

<pre class="src src-sh">gem install bundler&#57344;&#57345;&#57345;
rbenv rehash    <span style="color: #93a1a1; font-style: italic;"># </span><span style="color: #93a1a1; font-style: italic;">If you use rbenv, rehash to be able to run the bundle command</span>&#57344;&#57345;
bundle install&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2-3" class="outline-4">
<h4 id="sec-1-2-3"><span class="section-number-4">1.2.3</span> Install the default theme</h4>
<div class="outline-text-4" id="text-1-2-3">
<p>
(_I suggest to ignore this step and install the 3rd-party theme
       directly_)
</p>
<div class="org-src-container">

<pre class="src src-sh">rake install&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>
</div>
</div>



<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Common usage</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Local site

<p>
The octopress puts the generated web site, including the pages,
layouts, images, etc. into the <code>_deploy</code> folder. The <code>source</code>
folder contains all the source files used to generate the site,
including the layout HTML files, Java-scripts, style-sheets,
etc. It can be seemed as a hyper <code>_posts</code> folder that contains
source files more than blog HTML files. The familiar <code>_posts</code>
folder used in jekyll is under this folder. Let&#8217;s <a href="http://octopress.org/docs/blogging/">start blogging</a>.
</p>

<p>
First, go into the octopress folder, type <code>rake
      new_post["title"]</code>, octopress will ask you to give a blog tile,
then creates a <code>markdown</code> file into the <code>_posts</code> folder with
jekyll format (concatenate date and the title as the file name).
</p>
<div class="org-src-container">

<pre class="src src-sh">rake new_post[<span style="color: #2aa198;">"My first blog"</span>]&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;"># </span><span style="color: #93a1a1; font-style: italic;">create source/_posts/2014-10-28-my-first-blog.markdown</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
This file should be edited respect to the jekyll protocol.
</p>

<p>
Second, ran <code>rake generate</code> to generate the site in <code>_deploy</code>
and then ran <code>rake preview</code> to mount a web-server at
<a href="http://localhost:4000">http://localhost:4000</a>.
</p>
</li>

<li>Deploying to Github Pages

<p>
Octopress integrated commands to let you deploy the generated
site to the github.
</p>
<div class="org-src-container">

<pre class="src src-sh">rake setup_github_pages&#57344;&#57345;&#57345;
</pre>
</div>
<p>
This command will ask you for a URL of the Github repo, then it
will store your Github pages repository URL as the <i>origin</i>
remote and change the octopress remote to <i>octopress</i>. The
directory of octopress becomes the repository of the <b>source</b>
branch of the origin remote (your Github Pages repo). The
<code>_deploy</code> directory, which contains the generated site, becomes
the <b>master</b> branch of the origin remote.
Run command:
</p>
<div class="org-src-container">

<pre class="src src-sh">rake deploy&#57344;&#57345;&#57345;
</pre>
</div>
<p>
will push the generated site in <code>_deploy</code> to the master branch
of the origin remote.
To keep your settings and sources tracked, run
</p>
<div class="org-src-container">

<pre class="src src-sh">git add .&#57344;&#57345;&#57345;
git commit -m<span style="color: #2aa198;">'Your message'</span>&#57344;&#57345;&#57345;
git push origin source&#57344;&#57345;&#57345;
</pre>
</div>
<p>
to push the contents in octopress directory to the source branch
of the origin remote.
</p>

<p>
<span class="underline">One thing confusing is that one repository (master branch) is</span>
<span class="underline">under another repository. But the directory <code>_deploy</code> is in the</span>
<span class="underline"><code>gitignore</code> of source branch, hence solve the self-contain
problem.</span>
</p>
</li>
</ul>

<p>

</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initialize the First Blog]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-10-29-initialize-the-first-blog.html"/>
    <updated>2014-10-29T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/initialize-the-first-blog</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Install necessary softwares <b>org-mode</b> in <b>emacs</b>, <b>jekyll</b>.</a></li>
<li><a href="#sec-2">2. Initialize the web folder by jekyll.</a></li>
<li><a href="#sec-3">3. From org-mode to jekyll</a>
<ul>
<li><a href="#sec-3-1">3.1. Configuration of emacs org setting</a></li>
<li><a href="#sec-3-2">3.2. The head inserted into the org file for blog.</a></li>
<li><a href="#sec-3-3">3.3. Comments</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Build the server.</a></li>
<li><a href="#sec-5">5. Configuration</a></li>
</ul>
</div>
</div>
<p>
This is my first blog that is generated using org-mode, jekyll and is
published on GitHub.
I made this page following the instructions on <a href="http://orgmode.org/worg/org-tutorials/org-jekyll.html">org-jekyll</a>.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-10-29-initialize-the-first-blog.html"><span class="section-number-2">1</span> Install necessary softwares <b>org-mode</b> in <b>emacs</b>, <b>jekyll</b>.</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Note that the built-in org-mode in emacs might be outdated, the best
solution is to remove the built-in org-mode and reinstall it from
the package manager via <code>M-x list-packages</code>. Jekyll can be installed
through <b>RubyGem</b>. On my OSX, the ruby and gem are preinstalled, so
<code>gem install jekyll</code> works for me.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Initialize the web folder by jekyll.</h2>
<div class="outline-text-2" id="text-2">
<p>
As my final goal is posting the blog to GitHub, the working folder
of my blog is <code>xiaoliuai.github.io</code>.
</p>
<div class="org-src-container">

<pre class="src src-bash">jekyll new xiaoliuai.github.io
cd xiaoliuai.github.io
jekyll serve
</pre>
</div>
<p>
Then you can see the portal page by opening <code>localhost:4000</code> in
your web browser.
</p>

<p>
Now I would like to introudce the directory hierarchy of jekyll. Since
I will move to octopress, which is a wrapper of jekyll with different
directory setting, I just introduce the essential part to make the
things work.
</p>
<div class="org-src-container">

<pre class="src src-sh">xiaoliuai.github.io/&#57344;&#57345;&#57345;
-- _posts/&#57344;&#57345;&#57345;
-- _sites/&#57344;&#57345;&#57345;
...&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Two main directories need special attention, that are,
<code>_posts</code> and <code>_sites</code>. The first folder contains the <i>source</i> files,
which are markdown file, html file, etc. as input for jekyll; the
second folder contains the generated static server pages. All the
project should be uploaded to github to be displayed where the
<code>index.html</code> file is the portal of web site. The GitHub Pages
understand this directory configuration and will automatically display
the contents in <code>_sites</code>.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> From org-mode to jekyll</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Configuration of emacs org setting</h3>
<div class="outline-text-3" id="text-3-1">
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #657b83;">(</span><span style="color: #2aa198;">"blog-org"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:base-directory</span> <span style="color: #2aa198;">"~/Emacs/org/blog"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:base-extension</span> <span style="color: #2aa198;">"org"</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:publishing-directory</span> <span style="color: #2aa198;">"~/WorkSpace/xiaoliuai.github.io/"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:recursive</span> t&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:publishing-function</span> org-html-publish-to-html&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:headline-levels</span> 4&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:html-extension</span> <span style="color: #2aa198;">"html"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:body-only</span> t <span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">Only export section between &lt;body&gt; &lt;/body&gt;</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:with-toc</span> nil <span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">don't export toc, it clobbers the YAML front matter</span>&#57344;&#57345;&#57345;
 <span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
<span style="color: #657b83;">(</span><span style="color: #2aa198;">"blog-static"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:base-directory</span> <span style="color: #2aa198;">"~/Emacs/org/blog"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:base-extension</span> <span style="color: #2aa198;">"css</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">js</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">png</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">jpg</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">gif</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">pdf</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">mp3</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">swf</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">gz</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">txt</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">el"</span>&#57344;&#57345;
 <span style="color: #6c71c4;">:publishing-directory</span> <span style="color: #2aa198;">"~/WorkSpace/xiaoliuai.github.io/"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:recursive</span> t&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:publishing-function</span> org-publish-attachment&#57344;&#57345;&#57345;
 <span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
<span style="color: #657b83;">(</span><span style="color: #2aa198;">"blog"</span><span style="color: #6c71c4;">:components</span> <span style="color: #2aa198;">(</span><span style="color: #2aa198;">"blog-org"</span> <span style="color: #2aa198;">"blog-static"</span><span style="color: #2aa198;">)</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
With this org-mode configuration, you have to create a folder <code>_posts</code>
under the <code>~/Emacs/org/blog</code>, then org-mode will export the folder and
html files into the right place.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> The head inserted into the org file for blog.</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-org"><span style="color: #93a1a1; font-style: italic;">#+STARTUP: showall indent</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">#+STARTUP: hidestars</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">#+BEGIN_HTML</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">---</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">layout: default</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">title: Xiao Liu's First Blog</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">excerpt: First blog with org-mode, jekyll.</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">categories:</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">    - org</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">---</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">#+END_HTML</span>&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Comments</h3>
<div class="outline-text-3" id="text-3-3">
<p>
The two lines with comments form the main differences to ordinary
html exportation. Jekyll will read the body of html files
generated by org-mode and add it&#8217;s own heads to specify the
styles. Org-mode will export the table of contents (TOC) at the
beginning of exported html file, hence mask the YAML Front
Matter. <a href="http://ccom.uprrp.edu/~humberto//blog/2013/11/03/org-jekyll-is-awesome/">Disable the TOC</a> can sovle this problem. However, there
might be other solutions to change the position of TOC.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Build the server.</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">

<pre class="src src-bash">cd xiaoliuai.github.io
jekyll build
jekyll serve
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Configuration</h2>
<div class="outline-text-2" id="text-5">
<p>
The simplest personalization of the blog site is editting
<code>_config.yml</code> under the project directory. Following the attribute
names in this file, you can easily understand how to specify the blog
name, description, email address, etc.
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
