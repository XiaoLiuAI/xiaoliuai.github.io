<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[记往开来]]></title>
  <link href="http://xiaoliuai.github.io/atom.xml" rel="self"/>
  <link href="http://xiaoliuai.github.io/"/>
  <updated>2016-01-20T18:36:47+01:00</updated>
  <id>http://xiaoliuai.github.io/</id>
  <author>
    <name><![CDATA[Xiao Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Akka]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-03-13-akka.html"/>
    <updated>2015-03-13T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/akka</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Actors</a>
<ul>
<li><a href="#sec-1-1">1.1. Falt toleration</a></li>
<li><a href="#sec-1-2">1.2. Persistent Actor</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Cluster</a>
<ul>
<li><a href="#sec-2-1">2.1. Simple Cluster</a>
<ul>
<li><a href="#sec-2-1-1">2.1.1. Configuration</a></li>
<li><a href="#sec-2-1-2">2.1.2. Code</a></li>
<li><a href="#sec-2-1-3">2.1.3. Running</a></li>
</ul>
</li>
<li><a href="#sec-2-2">2.2. Dial-in example</a></li>
<li><a href="#sec-2-3">2.3. Cluster Aware Routers</a>
<ul>
<li><a href="#sec-2-3-1">2.3.1. <b>Group router</b></a></li>
<li><a href="#sec-2-3-2">2.3.2. <b>Pool router</b></a></li>
</ul>
</li>
<li><a href="#sec-2-4">2.4. Adaptive Load Balancing</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-03-13-akka.html"><span class="section-number-2">1</span> Actors</a></h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">import</span> akka.<span style="color: #268bd2;">actor</span>.{ ActorRef, ActorSystem, Props, Actor, Inbox }&#57344;&#57345;&#57345;
<span style="color: #859900;">import</span> scala.concurrent.duration.<span style="color: #268bd2;">_</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Three messages, one is object, two are case classes</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">case</span> object Greet&#57344;&#57345;&#57345;
<span style="color: #859900;">case</span> <span style="color: #859900;">class</span> WhoToGreet(who: String)&#57344;&#57345;&#57345;
<span style="color: #859900;">case</span> <span style="color: #859900;">class</span> Greeting(message: String)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #859900;">class</span> Greeter <span style="color: #859900;">extends</span> <span style="color: #268bd2;">Actor</span> {&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">var</span> <span style="color: #6c71c4;">greeting</span> = <span style="color: #2aa198;">""</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  def receive = {&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> WhoToGreet(who) =&gt; greeting = s<span style="color: #2aa198;">"hello, $who"</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> Greet           =&gt; sender <span style="color: #268bd2;">!</span> Greeting(greeting)&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Send the current greeting back to the sender</span>&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #268bd2;">object</span> <span style="color: #6c71c4;">HelloAkkaScala</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">App</span> {&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Create the 'helloakka' actor system</span>&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">system</span> = ActorSystem(<span style="color: #2aa198;">"helloakka"</span>)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Create the 'greeter' actor</span>&#57344;&#57345;&#57345;
  val greeter = system.actorOf(<span style="color: #268bd2;">Props</span>[Greeter], <span style="color: #2aa198;">"greeter"</span>)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Create an "actor-in-a-box"</span>&#57344;&#57345;&#57345;
  val inbox = Inbox.create(system)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Tell the 'greeter' to change its 'greeting' message</span>&#57344;&#57345;&#57345;
  greeter.tell(WhoToGreet(<span style="color: #2aa198;">"akka"</span>), ActorRef.noSender)&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Ask the 'greeter for the latest 'greeting'</span>&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Reply should go to the "actor-in-a-box"</span>&#57344;&#57345;&#57345;
  inbox.send(greeter, Greet)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Wait 5 seconds for the reply with the 'greeting' message</span>&#57344;&#57345;&#57345;
  val Greeting(message1) = inbox.receive(5.seconds)&#57344;&#57345;&#57345;
  println(s<span style="color: #2aa198;">"Greeting: $message1"</span>)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Change the greeting and ask for it again</span>&#57344;&#57345;&#57345;
  greeter.tell(WhoToGreet(<span style="color: #2aa198;">"typesafe"</span>), ActorRef.noSender)&#57344;&#57345;&#57345;
  inbox.send(greeter, Greet)&#57344;&#57345;&#57345;
  val Greeting(message2) = inbox.receive(5.seconds)&#57344;&#57345;&#57345;
  println(s<span style="color: #2aa198;">"Greeting: $message2"</span>)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  val greetPrinter = system.actorOf(<span style="color: #268bd2;">Props</span>[GreetPrinter])&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">after zero seconds, send a Greet message every second to the greeter with a sender of the greetPrinter</span>&#57344;&#57345;
  system.scheduler.schedule(0.seconds, 1.second, greeter, Greet)(system.dispatcher, greetPrinter)&#57344;&#57345;
&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">prints a greeting</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">class</span> <span style="color: #268bd2;">GreetPrinter</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">Actor</span> {&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">def</span> <span style="color: #6c71c4;">receive</span> = {&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> Greeting(message) =&gt; println(message)&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>

<ul class="org-ul">
<li>Sending messages
<ol class="org-ol">
<li><code>actor ! message</code> or <code>actor.tell(message, sender)</code>.
</li>
<li><code>inbox.send(sender, message)</code>
</li>
<li><code>system.scheduler.schedule(initDelay, interval, receiver,
        message)(executor, sender)</code>
</li>
<li><code>actor ? message</code>, it means &#8220;ask&#8221;, which resturns a <code>Future</code>
representing a possible reply. When you implement ask
function, you have to catch the exception and send a Failure
to the sender
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">try</span> {&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">result</span> = operation()&#57344;&#57345;&#57345;
  sender() <span style="color: #268bd2;">!</span> result&#57344;&#57345;&#57345;
} <span style="color: #859900;">catch</span> {&#57344;&#57345;&#57345;
  <span style="color: #859900;">case</span> e: Exception =&gt;&#57344;&#57345;&#57345;
    sender() <span style="color: #268bd2;">!</span> <span style="color: #268bd2;">akka</span>.<span style="color: #268bd2;">actor</span>.<span style="color: #268bd2;">Status</span>.Failure(e)&#57344;&#57345;&#57345;
    <span style="color: #859900;">throw</span> e&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
You can set a timeout period for the <code>Future</code> by implicit
value <code>implicit val timeout = Timeout(5 seconds)</code> or using
curry function <code>myActor.ask(msg)(5 seconds)</code>.
</p>
</li>
</ol>
</li>
<li>Receiving messages
<ol class="org-ol">
<li><code>receive</code> defined method in actor will be called when message
comes. <b>Attention:</b>, the <code>sender()</code> method returns the current
sender when the method is called, <b>DO NOT</b> use this function
in callbacks since the sender method may returns wrong sender
(deadletter in many cases) when the callback is actually
invoked.
</li>
<li><code>inbox.receive</code>
</li>
<li>Set timeout period for receiving method,
<code>context.setReceiveTimeout(30 milliseconds)</code>. Then you can
catch this event by receiving message <code>case ReceiveTimeout</code>.
</li>
</ol>
</li>
<li>Forward message
<code>target forward message</code>, it will keep the sender unchanged. A
send msg to B, B forward msg to C, the sender for C is still A
instead of B
</li>
<li>Stop actor
<code>akka.actor.PoisonPill</code> message will stop the
actor. <code>gracefulStop</code> is useful to wait for termination or
compose ordered termination of several actors. It is a pattern,
not precoded, it sends a user defined message to the actor and
returns a <code>Future</code>, you can <code>Await</code> this future for a duration.

<p>
<code>actor ! Kill</code> will also stop this actor, but it causes the actor
to throw a <code>ActorKilledException</code>. This actor will suspend and
like the supervisor to decide how to handle the failure.
</p>
</li>
<li>Become/Unbecome
<code>context.become</code> method in Actor can setting the receive
function, hence the behavior of Actor is changed. <code>unbecome</code> lets
the actor returns to previews behavior.

<p>
You can use <code>stash</code> and <code>unstash</code> to save mails into a queue in
one behavior and get them back in another behavior. Of course,
you have to mix the trait <code>Stash</code> to be able to use it.
</p>
</li>
<li>Extend actor and intialization patterns
Use <code>PartialFunction#orElse</code> to chain the <code>receive</code> function of
the extended actor.

<p>
Three init patterns
</p>
<ol class="org-ol">
<li>constructor
</li>
<li>preStart
</li>
<li>Message
</li>
</ol>
</li>
</ul>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Falt toleration</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Example code from document.
</p>
<ol class="org-ol">
<li><code>Counter</code>, increment and save count to storage, return current
count number
</li>
<li><code>Storage</code>, simulate database, store (String, Long) pairs.
</li>
<li><code>CounterService</code>, override supervisorStrategy by
<code>OneForOneStrategy</code>
<div class="org-src-container">

<pre class="src src-java">override <span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">supervisorStrategy</span> = OneForOneStrategy(maxNrOfRetries = 3,&#57344;&#57345;
  withinTimeRange = 5.seconds) {&#57344;&#57345;&#57345;
  <span style="color: #859900;">case</span> _: <span style="color: #268bd2;">Storage</span>.StorageException =&gt; Restart&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>

<p>
init with actor refererences to the wrapper (watcher) of
storage, tell counter (when initialized?) to use the storage.
</p>

<p>
forward message (increment, getCurrentCount) to counter if it
exists; save <code>sender-&gt;msg</code> pair to log if counter is not
available.
</p>

<p>
if storage is terminated, tell counter that storage is not
available, schedule task to initStorage again (reconnect).
</p>
</li>
<li><code>Worker</code>, stop when receiving message from CounterService. init
<code>CounterService</code> actor.
</li>
<li><code>Listener</code>, shutdown the system while timeout. Listen
<code>Progress</code>, which is a case class of <code>Worker</code>.
</li>
<li>App object init worker and listener. Tell worker to assign the
listener, which will schedule task to use the <code>CounterService</code>
to increment count and pipe the message to listener.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Persistent Actor</h3>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Cluster</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Simple Cluster</h3>
<div class="outline-text-3" id="text-2-1">
</div><div id="outline-container-sec-2-1-1" class="outline-4">
<h4 id="sec-2-1-1"><span class="section-number-4">2.1.1</span> Configuration</h4>
<div class="outline-text-4" id="text-2-1-1">
<p>
To run cluster, you have to first creat a configuration file that
specify the URI, actors, etc.
</p>
<pre class="example">
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      "akka.tcp://ClusterSystem@127.0.0.1:2552"]

    auto-down-unreachable-after = 10s
  }
}
</pre>
</div>
</div>

<div id="outline-container-sec-2-1-2" class="outline-4">
<h4 id="sec-2-1-2"><span class="section-number-4">2.1.2</span> Code</h4>
<div class="outline-text-4" id="text-2-1-2">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">package</span> sample.cluster.<span style="color: #268bd2;">simple</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #859900;">import</span> <span style="color: #268bd2;">com</span>.<span style="color: #268bd2;">typesafe</span>.<span style="color: #268bd2;">config</span>.<span style="color: #268bd2;">ConfigFactory</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">import</span> <span style="color: #268bd2;">akka</span>.<span style="color: #268bd2;">actor</span>.<span style="color: #268bd2;">ActorSystem</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">import</span> <span style="color: #268bd2;">akka</span>.<span style="color: #268bd2;">actor</span>.<span style="color: #268bd2;">Props</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #268bd2;">object</span> <span style="color: #6c71c4;">SimpleClusterApp</span> {&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">def</span> <span style="color: #6c71c4;">main</span>(args: Array[String]): Unit = {&#57344;&#57345;&#57345;
    <span style="color: #859900;">if</span> (args.isEmpty)&#57344;&#57345;&#57345;
      startup(Seq(<span style="color: #2aa198;">"2551"</span>, <span style="color: #2aa198;">"2552"</span>, <span style="color: #2aa198;">"0"</span>))&#57344;&#57345;&#57345;
    <span style="color: #859900;">else</span>&#57344;&#57345;&#57345;
      startup(args)&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">def</span> <span style="color: #6c71c4;">startup</span>(ports: Seq[String]): Unit = {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">ports</span> <span style="color: #6c71c4;">foreach</span> { port =&gt;&#57344;&#57345;&#57345;
      <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Override the configuration of the port</span>&#57344;&#57345;&#57345;
      val config = ConfigFactory.parseString(<span style="color: #2aa198;">"akka.remote.netty.tcp.port="</span> + port).&#57344;&#57345;
        withFallback(ConfigFactory.load())&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
      <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Create an Akka system</span>&#57344;&#57345;&#57345;
      val system = ActorSystem(<span style="color: #2aa198;">"ClusterSystem"</span>, config)&#57344;&#57345;&#57345;
      <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">One system on one port?</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
      <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Create an actor that handles cluster domain events</span>&#57344;&#57345;&#57345;
      system.actorOf(<span style="color: #268bd2;">Props</span>[SimpleClusterListener], name = <span style="color: #2aa198;">"clusterListener"</span>)&#57344;&#57345;
    }&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #859900;">class</span> <span style="color: #268bd2;">SimpleClusterListener</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">Actor</span> with ActorLogging {&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">cluster</span> = Cluster(context.system)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">subscribe to cluster changes, re-subscribe when restart</span>&#57344;&#57345;&#57345;
  override def preStart(): Unit = {&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">//</span><span style="color: #93a1a1; font-style: italic;">#subscribe</span>&#57344;&#57345;&#57345;
    cluster.subscribe(self, initialStateMode = InitialStateAsEvents,&#57344;&#57345;&#57345;
      classOf[MemberEvent], classOf[UnreachableMember])&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">//</span><span style="color: #93a1a1; font-style: italic;">#subscribe</span>&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
  override <span style="color: #268bd2;">def</span> <span style="color: #b58900;">postStop</span>(): Unit = cluster.unsubscribe(self)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  def receive = {&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> MemberUp(member) =&gt;&#57344;&#57345;&#57345;
      log.info(<span style="color: #2aa198;">"Member is Up: {}"</span>, member.address)&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> UnreachableMember(member) =&gt;&#57344;&#57345;&#57345;
      log.info(<span style="color: #2aa198;">"Member detected as unreachable: {}"</span>, member)&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> MemberRemoved(member, previousStatus) =&gt;&#57344;&#57345;&#57345;
      log.info(<span style="color: #2aa198;">"Member is Removed: {} after {}"</span>,&#57344;&#57345;&#57345;
        member.address, previousStatus)&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> _: MemberEvent =&gt; <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">ignore</span>&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-1-3" class="outline-4">
<h4 id="sec-2-1-3"><span class="section-number-4">2.1.3</span> Running</h4>
<div class="outline-text-4" id="text-2-1-3">
<p>
Log when starting the second seed node:
[info] [INFO] [03/10/2015 23:57:27.799]
[ClusterSystem-akka.actor.default-dispatcher-14]
[Cluster(akka://ClusterSystem)] Cluster Node
[akka.tcp://ClusterSystem@127.0.0.1:2551] - Node
[akka.tcp://ClusterSystem@127.0.0.1:2552] is JOINING, roles []
</p>

<p>
This code defines a cluster (集群), each node runs as dependennt
processes (different JVMs) since they all run on my local
machine. A cluster is indentified by <code>akka://CllusterSystem</code>,
while each node is indentified by IP address and port number. The
IP address seems like to be defined by application.config.
</p>

<ul class="org-ul">
<li><b>seed nodes</b> are configured contact points for initial,
automatic, join of the cluster. Hence, the <code>seed-nodes</code> figure
out where to join the cluster to current node. The seed nodes can
also be configured by command line options when starting the JVM
using the following syntax:
<div class="org-src-container">

<pre class="src src-bash">-Dakka.cluster.seed-nodes.0=akka.tcp://ClusterSystem@host1:2552
-Dakka.cluster.seed-nodes.1=akka.tcp://ClusterSystem@host1:2552
</pre>
</div>
<p>
Starting seed notes can be async and not all the seed nodes are
necessary to run. But the first node must be started when
starting a cluster.
</p>

<p>
It is also possible to join the cluster manually via <a href="http://doc.akka.io/docs/akka/2.3.9/scala/cluster-usage.html#cluster-jmx-scala"><i>JMX</i></a> or
<a href="http://doc.akka.io/docs/akka/2.3.9/scala/cluster-usage.html#cluster-command-line-scala"><i>Command Line Management</i></a> or via programatic method with
<code>Cluster.get(system).join(address)</code> or
<code>Cluster(system).joinSeedNodes</code>.
</p>
</li>
<li><code>hostname</code> in <code>remote</code> in configuration specify the IP of
current node. <b>Question:</b> /what if I specify the IP to another
machine? The application should be deploy to another machine
before running? What protocole does it uses?/
</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Dial-in example</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Frontend-backend pattern (not those in Group router):
</p>
<ol class="org-ol">
<li>Backed subscribes to the cluster service to register new
frontend
</li>
<li>Frontend watch the backend and define the <code>receive</code> method for
the case of <code>Terminated(a)</code>.
</li>
<li>Frontend redirect received jobs to backend.
</li>
<li>Roles of node is defined in the configuration property named
<code>akka.cluster.roles</code> or in start script as a system property
or environment variable.
</li>
</ol>

<p>
Number of members restriction:
<code>akka.cluster.min-nr-of-members = 3</code>, the leader will not
change the status of nodes to &#8216;Up&#8217; until this number of
members reached. Finer configuration:
</p>
<p>
#+beign_src yaml
akka.cluster.role {
  frontend.min-nr-of-members = 1
  backend.min-nr-of-members = 2
}
</p>
<p>
#+end_src
Define callback to be invoked when the current member status is
changed to &#8216;Up&#8217;
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">Cluster</span>(<span style="color: #268bd2;">system</span>) registerOnMemberUp {&#57344;&#57345;&#57345;
  system.actorOf(Props(classOf[FactorialFrontend], upToN, <span style="color: #268bd2;">true</span>),&#57344;&#57345;&#57345;
    name = <span style="color: #2aa198;">"factorialFrontend"</span>)&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Cluster Aware Routers</h3>
<div class="outline-text-3" id="text-2-3">
<p>
Router is one that receive and send tasks to actors, while the
ref to actors are called routees.
</p>
</div>

<div id="outline-container-sec-2-3-1" class="outline-4">
<h4 id="sec-2-3-1"><span class="section-number-4">2.3.1</span> <b>Group router</b></h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
在示例代码中,每一个node上面都有一个StatsService,和一个
StatsWorker. StatsService里面包含了指向StatsWorker的router并且负
责接受和转发任务. 每次Client将一个任务传给Cluster时,Cluster中某
个一node上的StatsService会接收并分发任务,因为分发任务是依靠
router来实现的,所以任务会被分发到不同node上的StatsWorker上去.这
个例子中,每个node上的Service和Worker都是显式创建的.
</p>

<p>
<b>Group example: Server side</b>
</p>
<div class="org-src-container">

<pre class="src src-yaml">akka.actor.deployment {&#57344;&#57345;&#57345;
  /statsService/workerRouter {&#57344;&#57345;&#57345;
      router = consistent-hashing-group&#57344;&#57345;&#57345;
      // specify the router, you have also other options like round-robin-pool&#57344;&#57345;
      nr-of-instances = 100&#57344;&#57345;&#57345;
      routees.paths = [<span style="color: #2aa198;">"/user/statsWorker"</span>]&#57344;&#57345;&#57345;
      cluster {&#57344;&#57345;&#57345;
        enabled = on&#57344;&#57345;&#57345;
        allow-local-routees = on&#57344;&#57345;&#57345;
        use-role = compute&#57344;&#57345;&#57345;
      }&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
With this configuration, relative actor paths defined in
<code>routees.paths</code> are used for selecting actors to send the message
by the router.
在创建System的时候将这个配置文件包含到配置中去, 然后在这个system
下面任意地方用 <code>actorOf(FromConfig.props(Props[YourClass]))</code> 来
得到router actor. 发送任务时将任务发给router actor,它会自动转发
给cluster中的注册在 &#8220;user&#8221; 下面的注册名为 &#8220;statsWorker&#8221; 的actor
(不一定是StatsWorker,你可以随意将不同类型的Actor注册在这个名字下
面). 更多的配置,查看<a href="http://doc.akka.io/docs/akka/snapshot/scala/routing.html">routing</a>.
</p>

<p>
下面的代码是用编程的方式实现配置文件里的配置.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">workerRouter</span> = context.actorOf(&#57344;&#57345;&#57345;
    ClusterRouterGroup(ConsistentHashingGroup(Nil), ClusterRouterGroupSettings(&#57344;&#57345;
      totalInstances = 100, routeesPaths = List(<span style="color: #2aa198;">"/user/statsWorker"</span>),&#57344;&#57345;&#57345;
      allowLocalRoutees = <span style="color: #268bd2;">true</span>, useRole = Some(<span style="color: #2aa198;">"compute"</span>))).props(),&#57344;&#57345;&#57345;
    name = <span style="color: #2aa198;">"workerRouter2"</span>)&#57344;&#57345;&#57345;
</pre>
</div>

<p>
<b>Group example: Client side</b>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">object</span> <span style="color: #6c71c4;">StatsSampleClient</span> {&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">def</span> <span style="color: #6c71c4;">main</span>(args: Array[String]): Unit = {&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">note that client is not a compute node, role not defined</span>&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">system</span> = ActorSystem(<span style="color: #2aa198;">"ClusterSystem"</span>)&#57344;&#57345;&#57345;
    system.actorOf(Props(classOf[StatsSampleClient], <span style="color: #2aa198;">"/user/statsService"</span>), <span style="color: #2aa198;">"client"</span>)&#57344;&#57345;
  }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #859900;">class</span> <span style="color: #268bd2;">StatsSampleClient</span>(servicePath: String) <span style="color: #859900;">extends</span> <span style="color: #268bd2;">Actor</span> {&#57344;&#57345;&#57345;
  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">servicePath is "/user/statsService", which is the second argument of the Props.</span>&#57344;&#57345;
  <span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">cluster</span> = Cluster(context.system)&#57344;&#57345;&#57345;
  val servicePathElements = servicePath match {&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> RelativeActorPath(elements) =&gt; {&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">//      </span><span style="color: #93a1a1; font-style: italic;">println("servicePath is: "+servicePath) ;</span>&#57344;&#57345;&#57345;
      elements}&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> _ =&gt; <span style="color: #859900;">throw</span> <span style="color: #859900;">new</span> <span style="color: #268bd2;">IllegalArgumentException</span>(&#57344;&#57345;&#57345;
      <span style="color: #2aa198;">"servicePath [%s] is not a valid relative actor path"</span> format servicePath)&#57344;&#57345;
  }&#57344;&#57345;&#57345;
  <span style="color: #859900;">import</span> context.<span style="color: #268bd2;">dispatcher</span>&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">tickTask</span> = context.system.scheduler.schedule(2.seconds, 10.seconds, self, <span style="color: #2aa198;">"tick"</span>)&#57344;&#57345;
&#57344;&#57345;&#57345;
  var nodes = Set.empty[Address]&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  override def preStart(): Unit = {&#57344;&#57345;&#57345;
    cluster.subscribe(self, classOf[MemberEvent], classOf[ReachabilityEvent])&#57344;&#57345;
  }&#57344;&#57345;&#57345;
  override <span style="color: #268bd2;">def</span> <span style="color: #b58900;">postStop</span>(): Unit = {&#57344;&#57345;&#57345;
    cluster.unsubscribe(self)&#57344;&#57345;&#57345;
    tickTask.cancel()&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">def</span> <span style="color: #6c71c4;">receive</span> = {&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> <span style="color: #2aa198;">"tick"</span> <span style="color: #859900;">if</span> nodes.nonEmpty =&gt;&#57344;&#57345;&#57345;
      <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">just pick any one</span>&#57344;&#57345;&#57345;
      val address = nodes.toIndexedSeq(ThreadLocalRandom.current.nextInt(nodes.size))&#57344;&#57345;
      val service = context.actorSelection(<span style="color: #268bd2;">RootActorPath</span>(<span style="color: #268bd2;">address</span>) / servicePathElements)&#57344;&#57345;
      service <span style="color: #268bd2;">!</span> StatsJob(<span style="color: #2aa198;">"this is the text that will be analyzed"</span>)&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> result: StatsResult =&gt;&#57344;&#57345;&#57345;
      println(result)&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> failed: JobFailed =&gt;&#57344;&#57345;&#57345;
      println(failed)&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> state: CurrentClusterState =&gt;&#57344;&#57345;&#57345;
      nodes = state.members.collect {&#57344;&#57345;&#57345;
        <span style="color: #859900;">case</span> m <span style="color: #859900;">if</span> m.hasRole(<span style="color: #2aa198;">"compute"</span>) &amp;&amp; m.status == <span style="color: #268bd2;">MemberStatus</span>.Up =&gt; m.address&#57344;&#57345;
      }&#57344;&#57345;&#57345;
    <span style="color: #859900;">case</span> MemberUp(m) <span style="color: #859900;">if</span> m.hasRole(<span style="color: #2aa198;">"compute"</span>)        =&gt; nodes += m.address&#57344;&#57345;
    <span style="color: #859900;">case</span> other: MemberEvent                         =&gt; nodes -= other.member.address&#57344;&#57345;
    <span style="color: #859900;">case</span> UnreachableMember(m)                       =&gt; nodes -= m.address&#57344;&#57345;
    <span style="color: #859900;">case</span> ReachableMember(m) <span style="color: #859900;">if</span> m.hasRole(<span style="color: #2aa198;">"compute"</span>) =&gt; nodes += m.address&#57344;&#57345;
  }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
而在客户端代码中,首先向cluster订阅成员事件来获取所有的成员. 然后
根据成员的role来筛选出相应的node. 真正开始发送任务的时候,随机排
列这些node,然后使用
<code>context.actorSelection(RootActorPath(address) /
      servicePathElements)</code> 这句话返回一个 <code>ActorSelection</code> 的对象,对它
发送信息能自动地发送到某个注册在cluster上的某个node上的某个actor
上面去.准确地说,后半段确定Actor的URN,前半段应该是URL.
</p>
</div>
</div>

<div id="outline-container-sec-2-3-2" class="outline-4">
<h4 id="sec-2-3-2"><span class="section-number-4">2.3.2</span> <b>Pool router</b></h4>
<div class="outline-text-4" id="text-2-3-2">
<p>
利用ClusterSingletonManager作为StatsService的外包,虽然每个node上
都运行了创建代码,但实际上只有一个StatsService被创建,从而实现单例.
在node被创建之后,node沟通其它node并加入cluster,随后连接上singleton
下的statsService,如果是第一个node则会创建router,然后创建3个
worker. 之后的node直接在连上statsService之后创建3个worker. worer是
由workerRouter创建的,3个worker的设定在配置文件里
<code>max-nr-of-instances-per-node = 3</code>. 这个设定只对pool有效,group里
面就算设定了也不会创建worker.
</p>

<p>
<i>singlton意味着Actor在整个集群上只有一个,目前看来是先创建的node
上面载有这个单例,如果这个node挂了怎么办?</i>
</p>

<p>
singletonManager 被映射到 /user/singleton 上作为 StatsService 的
容器, StatsService 自然就映射到其下
<code>/user/singleton/statsService</code>.
</p>
</div>
</div>
</div>


<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> Adaptive Load Balancing</h3>
<div class="outline-text-3" id="text-2-4">
<p>
AdaptiveLoadBalanceing <b>Pool</b> 和 AdaptiveLoadBalancing <b>Group</b> 两种
实现方式.中心是cluster metrics和配置adaptive的router.
</p>
<ol class="org-ol">
<li>注意,不要在 <code>preStart</code> 里面发送信息,这个时候路由还没有设置好,发
送的message全部/部分都会变成 <i>dead letter</i>.
</li>
<li>另外一个坑是:router会按照算法把负载分布到cluster的每个node上去.在
例子中,用role来区分前后端的node,所以router只会向后端node发送信
息.但是后端node不代表有后端actor,这一点router是无法探知的.所以
如果你把只运行有前端actor的node也标记为后端,router仍然会向其发
送信息,最后会导致信息送丢了. <b>node的身份取只决于system config里
面的role,不取决于里面到底运行了什么actor.</b>
</li>
<li>追加一个坑:不要在callback里面调用任何状态相关的函数,除非你确定
你需要这个副作用.在callback里面调用 <code>sender()</code> 经常会返回
<code>deadLetter</code>, 因为 <code>sender()</code> 真正被调用的时候不是接收到信息的
时候.
</li>
</ol>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Tutorial]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-03-04-spring-tutorial.html"/>
    <updated>2015-03-04T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/spring-tutorial</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Project file structure</a></li>
<li><a href="#sec-2">2. Management with Maven</a></li>
<li><a href="#sec-3">3. Application Configuration</a>
<ul>
<li><a href="#sec-3-1">3.1. Inject configurations</a></li>
<li><a href="#sec-3-2">3.2. Load configuration files.</a></li>
<li><a href="#sec-3-3">3.3. Define configuration source class</a></li>
<li><a href="#sec-3-4">3.4. Automatically assign properties.</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Authentication &amp; Securing</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-03-04-spring-tutorial.html"><span class="section-number-2">1</span> Project file structure</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Generally, we use maven to manage the directory layout. Hence, you
will get a <b>standard directory</b> layout like below:
</p>
<div class="org-src-container">

<pre class="src src-bash">project
    src
        main
            java
            [scala]
            resources
                environment.properties
                environment.test.properties
                environment.prod.properties
                config
                    application.yml
                    application-dev.yml
                    application-[profile].yml
                [other]
        test
            java
            [scala]
    target
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Management with Maven</h2>
<div class="outline-text-2" id="text-2">
<p>
The files <code>environment.[profile].properties</code> are used to provide
different profiles to <b><a href="http://maven.apache.org/guides/mini/guide-building-for-different-environments.html">maven</a></b>.
</p>

<p>
Since maven is used to manage the package dependencies, different
maven profiles enables you to use different dependencies for
development and production, e.g. run different tasks. I am not
farmiliar with maven, and cannot tell how and when it can be used.
</p>

<p>
You have to add <code>spring-boot-maven-plugin</code> as one of the plugins
under <code>build</code> node in pom.xml.
</p>
<ul class="org-ul">
<li>Development
<ul class="org-ul">
<li>Compile the project by <code>maven clean insatll</code>
</li>
<li>More than Build

<p>
Maven can help running test, web application and produceing
reports by plugins. TODO
</p>
</li>
<li><b>Compile and run</b>: <code>mvn spring-boot:run</code> to run the
application with default profile; <code>mvn -Pprod spring-boot:run</code>
to run the application with <i>prod</i> profile.
</li>
</ul>
</li>
<li>Production
<ul class="org-ul">
<li>Package the files

<ul class="org-ul">
<li><b>Jar file</b>. Run <code>mvn clean package</code> to build the jar file
and run it through command line.
</li>

<li><b>War file</b>. Add <code>&lt;packaging&gt;war&lt;/packaging&gt;</code> in pom.xml
file, under the root node. Then run <code>mvn package</code> as
building the jar file.
</li>
</ul>
</li>

<li>Deploy
</li>
</ul>
</li>
</ul>

<p>
From command line, you can run the jar file with specification of
profile.
</p>
<div class="org-src-container">

<pre class="src src-bash">java -jar -Dspring.profiles.active=production YOUR_JAR.jar
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Application Configuration</h2>
<div class="outline-text-2" id="text-3">
<p>
The files <code>application-[profile].yml</code> are used to provide different
configurations for <b><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html">spring</a></b>.
</p>

<p>
Spring configuration files let you to inject different
configurations for development and production. For example, you can
use different database for development and production (different
host, port, username and password, etc.).
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Inject configurations</h3>
<div class="outline-text-3" id="text-3-1">
<p>
You can get access to these configurations through many ways
</p>
<ul class="org-ul">
<li>Inject the value of configuration to attribute of this class by
<code>@Value("${NAME:DEFAULT_VALUE}")</code>.
</li>
<li>You can also inject <code>Environment</code> object.
<div class="org-src-container">

<pre class="src src-java"><span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">This line is not about get the property, but about define</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">property and let it accessible by somewhere else.</span>&#57344;&#57345;&#57345;
<span style="color: #268bd2;">@Configuration</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">AppConfig</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span> <span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">env</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Bean</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">MyBean</span> <span style="color: #b58900;">myBean</span>() {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">MyBean</span> <span style="color: #6c71c4;">myBean</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">MyBean</span>();&#57344;&#57345;&#57345;
        myBean.setName(env.getProperty(<span style="color: #2aa198;">"bean.name"</span>));&#57344;&#57345;&#57345;
        <span style="color: #859900;">return</span> myBean;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>You can also implement the <code>EnvironmentAware</code> interface to get
an environment object to get the property.
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">MailConfiguration</span> <span style="color: #859900;">implements</span> <span style="color: #268bd2;">EnvironmentAware</span> {&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">setEnvironment</span>(<span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">environment</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">this</span>.propertyResolver = <span style="color: #859900;">new</span> <span style="color: #268bd2;">RelaxedPropertyResolver</span>(environment, ENV_SPRING_MAIL);&#57344;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
</ul>

<p>
One difference between <code>Environment</code> and <code>@Value</code> is that we can
access the information related to profiles. The environment can
determine which profiles are currently active, and which profile
should be active by default.
</p>
<div class="org-src-container">

<pre class="src src-java">env.acceptsProfiles(<span style="color: #268bd2;">String</span>... <span style="color: #6c71c4;">profiles</span>)&#57344;&#57345;&#57345;
env.getActiveProfiles() <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">return an array of strings</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>Environment</code> interface extends <code>PropertyResolver</code>, which is used
to acess the properties. You can get property directly from the
environment object. The example above provide a way that get
properties by key name following a relaxed rule.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Load configuration files.</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Different property sources are loaded in predefined order. You
can set the default additional property file by
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">SimpleCommandLinePropertySource</span> <span style="color: #6c71c4;">source</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">SimpleCommandLinePropertySource</span>(args);&#57344;&#57345;
<span style="color: #859900;">if</span> (<span style="color: #268bd2;">!</span>source.containsProperty(<span style="color: #2aa198;">"spring.profiles.active"</span>)){&#57344;&#57345;&#57345;
    app.setAdditionalProfiles([profile_name])&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Define configuration source class</h3>
<div class="outline-text-3" id="text-3-3">
<p>
 A class is recognized as a source of configuration if it has the
<code>@Configuration</code> class. <code>@Bean</code> defined in this class can be
accessed from <code>AnnotationConfigApplicationContext</code>. It is a
replacement of XML configuration files that defines beans.
Get the configuration from configuration class in some where
else.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">ConfigurationTest</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Test</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">testHelloworld</span> () {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">AnnotationConfigApplicationContext</span> <span style="color: #6c71c4;">ctx</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">AnnotationConfigApplicationContext</span>(AppConfig.<span style="color: #859900;">class</span>);&#57344;&#57345;
        Assert.assertEquals(<span style="color: #2aa198;">"hello"</span>, ctx.getBean(<span style="color: #2aa198;">"message"</span>)); <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">message is the name of the Bean method in configuration class</span>&#57344;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it can also be used to get any kind of object</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>AppConfig</code> is the class that used as configuration source.
</p>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Automatically assign properties.</h3>
<div class="outline-text-3" id="text-3-4">
<p>
In configuration source, add
<code>@EnableConfigurationProperties(A.class)</code>. In target class <code>A</code>,
add <code>@ConfigurationProperties(prefix = "PREFIX")</code>. Then the
properties under <code>PREFIX</code> will be automatically assigned to the
attributes of class <code>A</code>. <b>DETAILS OF THE CONFIGURATION SOURCE</b>???
</p>

<p>
<code>@EnableAutoConfiguration</code> auto configure the application. I
don&#8217;t know the details of this annotation, but it auto wires the
configurations into the embedded tomcat. Besides, it also
configures the database (host and port) automatically when
database template is injected in the project.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Authentication &amp; Securing</h2>
<div class="outline-text-2" id="text-4">
<p>
It is mainly implemented by <code>HttpSecurity</code>, which can be injected
and configured in method of class that extends
<code>WebSecurityConfigurerAdapter</code>.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">SecurityConfig</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">WebSecurityConfigurerAdapter</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">UserDetailsService</span> <span style="color: #6c71c4;">userDetailsService</span>;&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">class access to the user database</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Value</span>(<span style="color: #2aa198;">"${drill.security.rememberme.key}"</span>)&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">remerberMeKey</span>;&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">key for cookies</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configureGlobal</span>(<span style="color: #268bd2;">AuthenticationManagerBuilder</span> <span style="color: #6c71c4;">auth</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;
        auth&#57344;&#57345;&#57345;
            .userDetailsService(userDetailsService) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">the point that connect the authentication module and user database</span>&#57344;&#57345;
            .passwordEncoder(passwordEncoder());&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">WebSecurity</span> <span style="color: #6c71c4;">web</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Spring security ignore following URL</span>&#57344;&#57345;&#57345;
        web.ignoring()&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/bower_components/**"</span>)&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/fonts/**"</span>)&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/images/**"</span>)&#57344;&#57345;&#57345;
            ...;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">protected</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">HttpSecurity</span> <span style="color: #6c71c4;">http</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        http.authorizeRequests()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/**"</span>).authenticated()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/rest/register"</span>).permitAll()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/rest/logs/**"</span>).hasAuthority(<span style="color: #268bd2;">Authority</span>.ADMIN)&#57344;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">set authorities</span>&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .formLogin()&#57344;&#57345;&#57345;
                .usernameParameter(<span style="color: #2aa198;">"username"</span>)&#57344;&#57345;&#57345;
                .passwordParameter(<span style="color: #2aa198;">"password"</span>)&#57344;&#57345;&#57345;
                .loginProcessingUrl(<span style="color: #2aa198;">"/app/authentication"</span>)&#57344;&#57345;&#57345;
                .successHandler(ajaxAuthenticationSuccessHandler)&#57344;&#57345;&#57345;
                .failureHandler(ajaxAuthenticationFailureHandler)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">set login service url</span>&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .logout()&#57344;&#57345;&#57345;
                .logoutUrl(<span style="color: #2aa198;">"/app/logout"</span>)&#57344;&#57345;&#57345;
                .logoutSuccessHandler(ajaxLogoutSuccessHandler)&#57344;&#57345;&#57345;
                .deleteCookies(<span style="color: #2aa198;">"JSESSIONID"</span>)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .exceptionHandling()&#57344;&#57345;&#57345;
                .authenticationEntryPoint(authenticationEntryPoint)&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .rememberMe()&#57344;&#57345;&#57345;
                .rememberMeServices(rememberMeServices)&#57344;&#57345;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it is not persistent token</span>&#57344;&#57345;&#57345;
                .key(remerberMeKey)&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .csrf().disable()  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">not clear</span>&#57344;&#57345;&#57345;
                .headers().cacheControl(); <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">not clear</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>

<p>
The foundation of user securing is about session and cookies. Once
the user logged in, the server will set the cookies in
browser. Then browser will send the cookies via HTTP protocol
everytime it send new request to the server. On the server side,
<i>session</i> is also kept with a unique random id to identify the
client. Look another blog <i>Init the project</i> to see how to replace
the in memory user store by a repository that connects to
database. On the server side, programmer can get the user
information by:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">static</span> <span style="color: #268bd2;">String</span> <span style="color: #b58900;">getCurrentLogin</span>() {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">SecurityContext</span> <span style="color: #6c71c4;">securityContext</span> = SecurityContextHolder.getContext();&#57344;&#57345;
    <span style="color: #268bd2;">Authentication</span> <span style="color: #6c71c4;">authentication</span> = securityContext.getAuthentication();&#57344;&#57345;
    <span style="color: #268bd2;">UserDetails</span> <span style="color: #6c71c4;">springSecurityUser</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">userName</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">if</span>(authentication != <span style="color: #268bd2;">null</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> UserDetails) {&#57344;&#57345;&#57345;
            springSecurityUser = (<span style="color: #268bd2;">UserDetails</span>) authentication.getPrincipal();&#57344;&#57345;
            userName = springSecurityUser.getUsername();&#57344;&#57345;&#57345;
        } <span style="color: #859900;">else</span> <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> String) {&#57344;&#57345;&#57345;
            userName = (<span style="color: #268bd2;">String</span>) authentication.getPrincipal();&#57344;&#57345;&#57345;
        }&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> userName;&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Guide Examples]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-03-04-spring-guide-examples.html"/>
    <updated>2015-03-04T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/spring-guide-examples</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Start RESTFul Server</a></li>
<li><a href="#sec-2">2. Securing Web</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-03-04-spring-guide-examples.html"><span class="section-number-2">1</span> Start RESTFul Server</a></h2>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Securing Web</h2>
<div class="outline-text-2" id="text-2">
<p>
This example uses WebMvc framework, which uses
<code>WebMvcConfigurerAdapter</code> and <code>ViewControllerRegistry</code> to connect
the urls and html templates.
</p>

<p>
Add <code>spring-boot-starter-security</code> into dependency, make
<code>WebSecurityConfig.java</code>.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">@Configuration</span>&#57344;&#57345;&#57345;
<span style="color: #268bd2;">@EnableWebMvcSecurity</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">WebSecurityConfig</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">WebSecurityConfigurerAdapter</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">protected</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">HttpSecurity</span> <span style="color: #6c71c4;">http</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        http&#57344;&#57345;&#57345;
            .authorizeRequests()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/"</span>, <span style="color: #2aa198;">"/home"</span>).permitAll()&#57344;&#57345;&#57345;
                .anyRequest().authenticated()&#57344;&#57345;&#57345;
                .and()&#57344;&#57345;&#57345;
            .formLogin()&#57344;&#57345;&#57345;
                .loginPage(<span style="color: #2aa198;">"/login"</span>)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
                .and()&#57344;&#57345;&#57345;
            .logout()&#57344;&#57345;&#57345;
                .permitAll();&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Autowired</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configureGlobal</span>(<span style="color: #268bd2;">AuthenticationManagerBuilder</span> <span style="color: #6c71c4;">auth</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;
        auth&#57344;&#57345;&#57345;
            .inMemoryAuthentication()&#57344;&#57345;&#57345;
                .withUser(<span style="color: #2aa198;">"user"</span>).password(<span style="color: #2aa198;">"password"</span>).roles(<span style="color: #2aa198;">"USER"</span>);&#57344;&#57345;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">user repository in memory with username = "user" and password = "password"</span>&#57344;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it is just for demon</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Maven Example]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-02-28-start-maven-example.html"/>
    <updated>2015-02-28T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/start-maven-example</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Simple POM</a></li>
<li><a href="#sec-2">2. Basic command</a></li>
<li><a href="#sec-3">3. Directory layout</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-02-28-start-maven-example.html"><span class="section-number-2">1</span> Simple POM</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Maven projects are defined with an XML file named <i>pom.xml</i>. This
file gives the project&#8217;s name, version, and dependencies that it
has on external libraries. Here is an <a href="http://spring.io/guides/gs/maven/#initial">example</a>.
</p>
<div class="org-src-container">

<pre class="src src-xml">&lt;?<span style="color: #859900;">xml</span> <span style="color: #6c71c4;">version</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">1.0</span><span style="color: #2aa198;">"</span> <span style="color: #6c71c4;">encoding</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">UTF-8</span><span style="color: #2aa198;">"</span>?&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">project</span> <span style="color: #6c71c4;">xmlns</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">http://maven.apache.org/POM/4.0.0</span><span style="color: #2aa198;">"</span> <span style="color: #6c71c4;">xmlns</span>:<span style="color: #6c71c4;">xsi</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">http://www.w3.org/2001/XMLSchema-instance</span><span style="color: #2aa198;">"</span>&#57344;&#57345;
    <span style="color: #6c71c4;">xsi</span>:<span style="color: #6c71c4;">schemaLocation</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd</span><span style="color: #2aa198;">"</span>&gt;&#57344;&#57345;
    &lt;<span style="color: #b58900;">modelVersion</span>&gt;4.0.0&lt;/<span style="color: #b58900;">modelVersion</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">groupId</span>&gt;org.springframework&lt;/<span style="color: #b58900;">groupId</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">artifactId</span>&gt;gs-maven&lt;/<span style="color: #b58900;">artifactId</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">packaging</span>&gt;jar&lt;/<span style="color: #b58900;">packaging</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">version</span>&gt;0.1.0&lt;/<span style="color: #b58900;">version</span>&gt;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">build</span>&gt;&#57344;&#57345;&#57345;
        &lt;<span style="color: #b58900;">plugins</span>&gt;&#57344;&#57345;&#57345;
            &lt;<span style="color: #b58900;">plugin</span>&gt;&#57344;&#57345;&#57345;
                &lt;<span style="color: #b58900;">groupId</span>&gt;org.apache.maven.plugins&lt;/<span style="color: #b58900;">groupId</span>&gt;&#57344;&#57345;&#57345;
                &lt;<span style="color: #b58900;">artifactId</span>&gt;maven-shade-plugin&lt;/<span style="color: #b58900;">artifactId</span>&gt;&#57344;&#57345;&#57345;
                &lt;<span style="color: #b58900;">version</span>&gt;2.1&lt;/<span style="color: #b58900;">version</span>&gt;&#57344;&#57345;&#57345;
                &lt;<span style="color: #b58900;">executions</span>&gt;&#57344;&#57345;&#57345;
                    &lt;<span style="color: #b58900;">execution</span>&gt;&#57344;&#57345;&#57345;
                        &lt;<span style="color: #b58900;">phase</span>&gt;package&lt;/<span style="color: #b58900;">phase</span>&gt;&#57344;&#57345;&#57345;
                        &lt;<span style="color: #b58900;">goals</span>&gt;&#57344;&#57345;&#57345;
                            &lt;<span style="color: #b58900;">goal</span>&gt;shade&lt;/<span style="color: #b58900;">goal</span>&gt;&#57344;&#57345;&#57345;
                        &lt;/<span style="color: #b58900;">goals</span>&gt;&#57344;&#57345;&#57345;
                        &lt;<span style="color: #b58900;">configuration</span>&gt;&#57344;&#57345;&#57345;
                            &lt;<span style="color: #b58900;">transformers</span>&gt;&#57344;&#57345;&#57345;
                                &lt;<span style="color: #b58900;">transformer</span>&#57344;&#57345;&#57345;
                                    <span style="color: #6c71c4;">implementation</span>=<span style="color: #2aa198;">"</span><span style="color: #2aa198;">org.apache.maven.plugins.shade.resource.ManifestResourceTransformer</span><span style="color: #2aa198;">"</span>&gt;&#57344;&#57345;
                                    &lt;<span style="color: #b58900;">mainClass</span>&gt;hello.HelloWorld&lt;/<span style="color: #b58900;">mainClass</span>&gt;&#57344;&#57345;
                                &lt;/<span style="color: #b58900;">transformer</span>&gt;&#57344;&#57345;&#57345;
                            &lt;/<span style="color: #b58900;">transformers</span>&gt;&#57344;&#57345;&#57345;
                        &lt;/<span style="color: #b58900;">configuration</span>&gt;&#57344;&#57345;&#57345;
                    &lt;/<span style="color: #b58900;">execution</span>&gt;&#57344;&#57345;&#57345;
                &lt;/<span style="color: #b58900;">executions</span>&gt;&#57344;&#57345;&#57345;
            &lt;/<span style="color: #b58900;">plugin</span>&gt;&#57344;&#57345;&#57345;
        &lt;/<span style="color: #b58900;">plugins</span>&gt;&#57344;&#57345;&#57345;
    &lt;/<span style="color: #b58900;">build</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">project</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<ul class="org-ul">
<li><code>&lt;modelVerion&gt;</code> POM model version
</li>
<li><code>&lt;groupId&gt;</code> Domain name of the group or organization.
</li>
<li><code>&lt;artifactId&gt;</code> Name to the project&#8217;s library artifact (name of
JAR file)
</li>
<li><code>&lt;version&gt;</code> Version of the project
</li>
<li><code>&lt;packaging&gt;</code> How it should be packaged (in JAR or WAR file)
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Basic command</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-bash">mvn compile
mvn package
mvn install
</pre>
</div>
<p>
The first command compiles the project, and the <i>.classfiles</i> shold be
in the <i>target/classes</i> directory.
The second command compile the code, run tests and finish by
packaging the code up in a JAR file in the <i>target</i> directory.
Tht third command does the same thing as the second command, then
copy the JAR file into the local <span class="underline">dependency repository</span>, under the
directories with name of groupId, artifactId and version. So on my
machine, its location is
<code>~/.m2/repository/org/springframework/gs-maven/0.1.0/gs-maven-0.1.0.jar</code>.
</p>

<p>
Add dependencies of project into the <i>pom.xml</i> file, in the
<code>&lt;project&gt;</code> element.
</p>
<div class="org-src-container">

<pre class="src src-xml">&lt;<span style="color: #b58900;">dependencies</span>&gt;&#57344;&#57345;&#57345;
     &lt;<span style="color: #b58900;">dependency</span>&gt;&#57344;&#57345;&#57345;
         &lt;<span style="color: #b58900;">groupId</span>&gt;joda-time&lt;/<span style="color: #b58900;">groupId</span>&gt;&#57344;&#57345;&#57345;
         &lt;<span style="color: #b58900;">artifactId</span>&gt;joda-time&lt;/<span style="color: #b58900;">artifactId</span>&gt;&#57344;&#57345;&#57345;
         &lt;<span style="color: #b58900;">version</span>&gt;2.2&lt;/<span style="color: #b58900;">version</span>&gt;&#57344;&#57345;&#57345;
     &lt;/<span style="color: #b58900;">dependency</span>&gt;&#57344;&#57345;&#57345;
 &lt;/<span style="color: #b58900;">dependencies</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
This description will tell the maven to get the <i>joda-time</i> package
as external library. You can specify a <code>&lt;scope&gt;</code> element to specify
if the dependencies are required for compiling the code but will be
provided during runtime by <code>provided</code>; or decalre the dependencies
are only necessary for compiling and running tests.
</p>

<p>
When I compile the command, <i>maven</i> downloads the <i>joda-time</i>
pakcage from <a href="https://repo.maven.apache.org/maven2/joda-time/">https://repo.maven.apache.org/maven2/joda-time/</a>. Does
the maven use its domain when the group id does not contain the
domain by default?
</p>

<p>
<b>You can also create a project from scratch</b>
</p>
<div class="org-src-container">

<pre class="src src-bash">mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</pre>
</div>

<p>
<code>mvn scala:console</code> can launch the scala console with the pom
configurations (you have to specify maven-scala-plugin).
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Directory layout</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-bash">project
    src
        main
            java
            [scala]
            resources
                environment.properties
                environment.test.properties
                environment.prod.properties
                config
                    application.yml
                    application-dev.yml
                    application-[profile].yml
                [other]
        test
            java
            [scala]
    target
        classes
            the classes with the same structure as src/main
            the directories in src/main/resources
        test-classes
            the classes with the same structure as src/mainproject
        xxx.jar
    target
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of Reactive Programming on Coursera]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-02-28-principles-of-reactive-programming-on-coursera.html"/>
    <updated>2015-02-28T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/principles-of-reactive-programming-on-coursera</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Monad</a></li>
<li><a href="#sec-2">2. ScalaCheck &amp; ScalaTest &amp; JUnit</a>
<ul>
<li><a href="#sec-2-1">2.1. Tutorial of ScalaCheck</a></li>
<li><a href="#sec-2-2">2.2. ScalaTest</a>
<ul>
<li><a href="#sec-2-2-1">2.2.1. With JUnit</a></li>
<li><a href="#sec-2-2-2">2.2.2. With ScalaCheck</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-3">3. Async</a>
<ul>
<li><a href="#sec-3-1">3.1. Exception =&gt; Future</a></li>
<li><a href="#sec-3-2">3.2. Iterable =&gt; Observable</a>
<ul>
<li><a href="#sec-3-2-1">3.2.1. Subject</a></li>
<li><a href="#sec-3-2-2">3.2.2. Notification</a></li>
<li><a href="#sec-3-2-3">3.2.3. Subscription</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-02-28-principles-of-reactive-programming-on-coursera.html"><span class="section-number-2">1</span> Monad</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Honestly, I don&#8217;t understand it. But I collect my thoughts about it
here. First, the monda is used to chain operations and if the first
(preceding) operation fails, the whole chain stops. An example that
I understand is the usage of for-expression with pattern match. If
the pattern matches, go next operation, else skip this element.
</p>

<p>
Another point of view is about the unit operation. A monad flatMap
with its unit operation will return the monad itself.
</p>

<p>
<b>My conclusion</b>:
</p>

<p>
A monad is a container that supports operation chain and follows
the monad laws. The basic operations of this container are
<code>flatMap</code> and <code>unit</code>, where <code>flatMap</code> actually accepts a function
that maps each element to a container, then binds these containers
together; <code>unit</code> returns a container given an element. Monad laws
guarantee the reliability of operation chain on these contains.
</p>

<p>
Monad seems like a design pattern that enables the operation chain
along with pattern match in functional programming. Because
<code>flatMap</code> chain with different functions is equivalent to nested
<code>flatMap</code>, the for-expression is a syntax sugar based on <code>flatMap</code>
chain. The advantage of this design pattern is avoding side effect.
</p>

<p>
Generator is created by <code>yield</code> as well as
<b>for-expression</b>. Pay attention, there is no generator
class/type/trait. The genrator created through for-expression has
the same type of the sequence/iterator/stream used in
for-expression. That proves the for-expression is a syntax sugar of
monad types. So, guess what will happen when we create a
for-expression using both <b>list</b> and <b>stream</b>?
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">fibo</span>:Stream[Int] = 1 #:: 1 #:: fibo.zip(fibo.tail).map(x=&gt;x._1+x._2)&#57344;&#57345;
val l = List(1,2,3,4,5)&#57344;&#57345;&#57345;
val lsg = <span style="color: #859900;">for</span>{x &lt;- l; fib &lt;- fibo} yield (x,fib)<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">infinite loop, crash the software/your machine</span>&#57344;&#57345;
val slg = <span style="color: #859900;">for</span>{fib &lt;- fibo; x &lt;- l} yield (x,fib)<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">return a stream</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Following the definition of Monad, the first mixture <code>lsg</code> actually
makes <code>l flatMap (x =&gt; fibo)</code>, which returns a List that tries to
expand infinite stream <code>fibo</code>, hence block your machine. The second
mixture <code>slg</code> returns a Stream that expand the list <code>l</code>, hence,
works well. Besides, I have to clarify one thing: different monads
demonstrated above all accept <code>GenTraversableOnce</code> as parameter and
return monad of their own type. That is why they can be mixed
together and the first expression decides the type of the final
output of for-expression.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> ScalaCheck &amp; ScalaTest &amp; JUnit</h2>
<div class="outline-text-2" id="text-2">
<p>
In the example provided by the oneline course, they used <b>JUnit</b>,
<b>ScalaTest</b> and <b>ScalaCheck</b> together. In their example, the class
of <code>Properties</code> is in <code>src/main/scala</code> and is called by another
class defined under <code>src/test/scala</code>. In the class under test
folder, many instances of the <code>Properties</code> class are created to
check different children classes of the target class.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">abstract</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">QuickCheckHeap</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">Properties</span>(<span style="color: #2aa198;">"Heap"</span>) with IntHeap {&#57344;&#57345;
&#57344;&#57345;&#57345;
  property(<span style="color: #2aa198;">"min1"</span>) = forAll { <span style="color: #268bd2;">a</span>: Int =&gt;&#57344;&#57345;&#57345;
    val h = insert(a, empty)&#57344;&#57345;&#57345;
    findMin(h) == a&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  lazy <span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">genHeap</span>: Gen[H] = <span style="color: #859900;">for</span> {&#57344;&#57345;&#57345;
    a &lt;- arbitrary[Int]&#57344;&#57345;&#57345;
    h &lt;- oneOf(value(empty), genHeap)&#57344;&#57345;&#57345;
  } <span style="color: #268bd2;">yield</span> <span style="color: #b58900;">insert</span>(<span style="color: #268bd2;">a</span>, <span style="color: #268bd2;">h</span>)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  implicit lazy val arbHeap: Arbitrary[H] = Arbitrary(genHeap)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">@RunWith</span>(<span style="color: #268bd2;">classOf</span>[JUnitRunner])&#57344;&#57345;&#57345;
<span style="color: #859900;">class</span> <span style="color: #268bd2;">QuickCheckSuite</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">FunSuite</span> with Checkers {&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">def</span> <span style="color: #b58900;">checkBogus</span>(p: Prop) {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">var</span> <span style="color: #6c71c4;">ok</span> = <span style="color: #268bd2;">false</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">try</span> {&#57344;&#57345;&#57345;
      check(p)&#57344;&#57345;&#57345;
    } <span style="color: #859900;">catch</span> {&#57344;&#57345;&#57345;
      <span style="color: #859900;">case</span> e: TestFailedException =&gt;&#57344;&#57345;&#57345;
        ok = <span style="color: #268bd2;">true</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
    assert(ok, <span style="color: #2aa198;">"A bogus heap should NOT satisfy all properties. Try to find the bug!"</span>)&#57344;&#57345;
  }&#57344;&#57345;&#57345;
  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Binomial heap satisfies properties."</span>) {&#57344;&#57345;&#57345;
    check(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with BinomialHeap)&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (1) binomial heap does not satisfy properties."</span>) {&#57344;&#57345;&#57345;
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus1BinomialHeap)&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (2) binomial heap does not satisfy properties."</span>) {&#57344;&#57345;&#57345;
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus2BinomialHeap)&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (3) binomial heap does not satisfy properties."</span>) {&#57344;&#57345;&#57345;
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus3BinomialHeap)&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (4) binomial heap does not satisfy properties."</span>) {&#57344;&#57345;&#57345;
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus4BinomialHeap)&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
  <span style="color: #b58900;">test</span>(<span style="color: #2aa198;">"Bogus (5) binomial heap does not satisfy properties."</span>) {&#57344;&#57345;&#57345;
    checkBogus(<span style="color: #859900;">new</span> <span style="color: #268bd2;">QuickCheckHeap</span> with Bogus5BinomialHeap)&#57344;&#57345;&#57345;
  }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Tutorial of ScalaCheck</h3>
<div class="outline-text-3" id="text-2-1">
<p>
It is a tool for <b>property-based</b> testing for scala. It has <b>NO</b>
external dependencies and integrated in the test frameworks
<b>ScalaTest</b>. It can also be used standalone, with its built-in test
runner.
First, create a class that extends class
<code>org.scalacheck.Properties</code> with the name of data object that you
want to test. It is used for the library to generate test data to
test your algorithm.
</p>

<p>
Second, create test case by
</p>
<div class="org-src-container">

<pre class="src src-java">property(<span style="color: #2aa198;">"NAME_OF_FUNCTION"</span>) = forAll{&#57344;&#57345;&#57345;
    CONTAINER_OF_DATA =&gt; TEST_CASE_WITH_TARGET_FUNCTION&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>forAll</code> is the function <code>org.scalacheck.Prop.forAll</code>.
</p>

<p>
Third, to run the tests, you can put the properties in
<code>src/test/scala</code> then use test task to check them.
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> ScalaTest</h3>
<div class="outline-text-3" id="text-2-2">
<p>
This is a test framework that integrates all together. ScalaTest
provides many test styles: <code>FunSuit</code>, <code>FlatSpec</code>, <code>FuncSpec</code>,
<code>WordSpec</code>, <code>FreeSpec</code>, <code>Spec</code>, <code>PropSpec</code>, <code>FeatureSpec</code>. They
are mainly different on syntax styles. It is recommanded that the
user creates a base class that extends all the required features
(as a subset of all the provided features) and extends this base
class through everywhere of the project to make the style
consistent.
</p>
</div>

<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> With JUnit</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
This class uses the junit framework for unittest. JUnit will
invoke the class with <code>@RunWith</code> annotation (extend by type
hierarchies) to run the tests. The annotation parameter in the
example is a class of the type <code>JUnitRunner</code>. In fact, any class
extends <code>Runner</code> is acceptabel. Notice that function <code>classOf</code>
acts the same as <code>obj.getClass()</code>.
</p>

<p>
<b>Maven</b> Running tests with command <code>mvn test</code>. In fact, you
<b>cannot</b> run the tests with the example above. <b>Solution</b> is to
change the name <code>QuickCheckSuite</code> to <code>QuickCheckSuiteTest</code> or
<code>TestQuickCheckSuite</code> or <code>QuickCheckSuiteTestCase</code> to run the
tests. Even I did not explicitly specify plugin <code>surefire</code>, maven
uses this plugin to run test with my configuration. By default,
maven following name convertions when looking for tests to
run. So I have to change the name or modify the <code>surefire</code>
configuration to apply new name convertion rules.
</p>

<p>
The annotation uses class of <code>JUnitRunner</code> as parameter. This
class is provided by scala-test framework that connect
scala-test and junit.
</p>
<ul class="org-ul">
<li>As mentioned on <a href="http://www.scalatest.org/user_guide/using_the_scalatest_maven_plugin">ScalaTest Maven Plugin</a>, you can run tests
without this annotation by using this plugin. <b>TODO</b>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> With ScalaCheck</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
To work with ScalaCheck, you have to mix the trait
<code>org.scalatest.prop.Checkers</code> to your test class. <code>Checkers</code>
class contains <code>check</code> method to perform ScalaCheck property
checks, which are provided in the class <code>QuickCheckHeap</code> in the
example above. In fact, you can also use the <code>check</code> method in
JUnit directly. This method will generate a large number of
possible inputs to look for an input that the property does not
hold.
</p>
</div>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Async</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Exception =&gt; Future</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Exception is handled by <b>Try[T]</b>, which is used as return type like
Option. But Try[T] maches Success with result or Failure with
throwable. As Try[T] is also a monad, operations of element T are
usually propagated to monad methods of Try[T] to get a new Try[U],
<b>map Try[T] by f should return a new Try[f(T)]</b>.
</p>

<p>
<b>Future[T]</b> is a container of Try[T]. User provide
operations/callbacks that deal with Try[T] and future will call
them at certain time. <b>Future</b> and <b>Try</b> form a nested monad,
monad operations are propagated and you cannot see direct
operation on T in the source code of scala library. But take it
easy, usually, you won&#8217;t have to do it yourself.
</p>

<p>
To <b>get/compose</b> a future (that can be our job), therer are four
methods:
</p>
<ol class="org-ol">
<li>Use the member function of a <code>Future</code> such as <code>flatMap</code>
<ol class="org-ol">
<li><code>flatMap</code>, binary bind operation of futures. Register promise
to <i>this</i> when failed of exception of call funtion; register
promise to <i>that</i> when successed.
</li>
<li><code>onComplete</code>, parameter is a function <code>Try[T] =&gt; U</code>. This is
a funtamental funciton of <code>map</code>, <code>foreach</code>, <code>failed</code>, etc. It
propagate the Try mechanism.
</li>
<li><code>collect</code>
</li>
<li><code>recover</code>
</li>
<li><code>fallbackTo</code>
</li>
<li><code>zip</code>
</li>
<li><code>andThen</code>
</li>
</ol>
</li>
<li>Create a promise and register the complete method to current
futures, then return a new Future of this promise.

<p>
<code>Promise</code> acts like a mailbox, to compose a new future, the old
future has to put the result, which is a Try[T], into the
promise by <code>complete</code> method. Then the new future will call its
callback when the <code>complete</code> of promise is called.
</p>

<p>
In my opinion, promise can be merged with feature as one
unit. Because it is more straight to think in the way that:
<i>feature calls the callbacks when it is completed</i>. In fact,
the <code>DefaultPromise</code> is actually extends the <code>Future</code> trait. Of
course, the designers of scala have their proper reason.
</p>

<p>
Currently, I think promise is used in race (concurrent
processing of futures results) or to provide a new future for
initailization of fold operations.
</p>
</li>
<li>Use <code>for-expression</code>, which is a syntax sugar of <code>flatMap</code>
</li>
<li>Use <code>async...await</code> grammar.
<ol class="org-ol">
<li><b>The scala implementation of await
is translated to onComplete by the macro</b>.
</li>
<li><b>await method throw
directly the excepetion when future failed</b>.
</li>
</ol>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Iterable =&gt; Observable</h3>
<div class="outline-text-3" id="text-3-2">
<p>
<code>Try</code> and <code>Future</code> are dual, so as <code>Iterable</code> and
<code>Observable</code>. For iterable, you can get an iterator and using
<code>hasNext</code> and <code>next</code> to get elements. For <code>Obserable</code>, you use
<code>Subscribe</code> and <code>onNext</code>, <code>onComplete</code> to get elements.
</p>

<p>
<code>flatten</code> after <code>map</code> returns an observable that merges several
streams randomly. <code>concat</code> after <code>map</code> returns an observable, in
which, elements of each stream are grouped together sequentially
as well as the order of the streams.
</p>

<p>
<b>Don&#8217;t understand well the way of creating observable with a
function from Observer to Subscription -_-!</b>
</p>
</div>

<div id="outline-container-sec-3-2-1" class="outline-4">
<h4 id="sec-3-2-1"><span class="section-number-4">3.2.1</span> Subject</h4>
<div class="outline-text-4" id="text-3-2-1">
<p>
It works like promise, which is used as bridge or chain between
Obsever and Observable. Four types of subjects are provided:
</p>
<ol class="org-ol">
<li>PublishSubject: send current value.
</li>
<li>BehaviorSubject: cache the latest output.
</li>
<li>AsyncSubject: cache the final output. You only get the final
output.
</li>
<li>ReplaySubject: cache the whole history.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3-2-2" class="outline-4">
<h4 id="sec-3-2-2"><span class="section-number-4">3.2.2</span> Notification</h4>
<div class="outline-text-4" id="text-3-2-2">
<p>
Like Try
</p>
</div>
</div>

<div id="outline-container-sec-3-2-3" class="outline-4">
<h4 id="sec-3-2-3"><span class="section-number-4">3.2.3</span> Subscription</h4>
<div class="outline-text-4" id="text-3-2-3">
<p>
a handle that enables process to stop receiving messages from
Observable.
</p>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POM Configuration]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-02-28-pom-configuration.html"/>
    <updated>2015-02-28T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/pom-configuration</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Identify our project</a></li>
<li><a href="#sec-2">2. Inheritance</a></li>
<li><a href="#sec-3">3. Tasks</a></li>
</ul>
</div>
</div>

<p>
See example  <a href="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html">POM Configuration</a>.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-02-28-pom-configuration.html"><span class="section-number-2">1</span> Identify our project</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Fully qualified name of project is
&#8220;&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;&#8221;. If <i>groupId</i> is a domain, it
will be transformed into directory path while downloading. Download
something with <i>groupId=org.X.A</i> from <i>url.com</i> will download
things from <i>url.com/org/X/A</i> in the end.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Inheritance</h2>
<div class="outline-text-2" id="text-2">
<p>
When we have two projects, A and B, A is supposed to be parent
project of B. You have to specify the <i>pom.xml</i> of project B to
indicate that the <i>parent</i> of B is A with the <i>groupId</i>,
<i>artifactId</i> and <i>version</i> of A. You can remove the <i>groupId</i> and
<i>version of B to make A and B have the same /groupId</i> and
<i>version</i>. One can also indicate the <code>&lt;relativePath&gt;</code> for parent
project to put the A and B in the same directory level.
</p>

<p>
B inherite the dependencies from A.所以parent用来继承POM,dependency
用来解决代码依赖. <b>parent的项目在代码上没有关系.</b>
</p>

<p>
The packages downloaded by <i>maven</i> are put under
<i>HOME</i>.m2/repository/.
</p>

<p>
所有 <i>POM.xml</i> 里面的元素都可以用 <code>${project.A.B.C}</code> 的方式进行引用.比
方说如果在 <i>XML</i> 根路径下有这样的结构
<code>&lt;A&gt;&lt;B&gt;lalala&lt;C&gt;blabla&lt;C/&gt;&lt;/B&gt;&lt;/A&gt;</code>, <code>${project.A.B.C}</code> 就等于
<code>blabla</code>.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Tasks</h2>
<div class="outline-text-2" id="text-3">
<p>
首先,maven可以使用一系列的plugin来支持各种功能,包括发布,运行测试等
等.在使用 <code>spring-boot-maven-plugin</code> 的时候,可以用 <code>mvn
   spring-boot:run</code> 来运行程序. <code>spring-boot</code> 应该是plugin的名字, <code>run</code>
则是定义好的task. 在使用 <code>maven-scala-plugin</code> 的时候,如果加入以下设
置
</p>
<div class="org-src-container">

<pre class="src src-xml">&lt;<span style="color: #b58900;">executions</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">execution</span>&gt;&#57344;&#57345;&#57345;
        &lt;<span style="color: #b58900;">goals</span>&gt;&#57344;&#57345;&#57345;
            &lt;<span style="color: #b58900;">goal</span>&gt;compile&lt;/<span style="color: #b58900;">goal</span>&gt;&#57344;&#57345;&#57345;
            &lt;<span style="color: #b58900;">goal</span>&gt;testCompile&lt;/<span style="color: #b58900;">goal</span>&gt;&#57344;&#57345;&#57345;
        &lt;/<span style="color: #b58900;">goals</span>&gt;&#57344;&#57345;&#57345;
    &lt;/<span style="color: #b58900;">execution</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">executions</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
运行 <code>mvn scala:testCompile</code> 则只会编译test部分的代码.
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming on Coursera]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-02-28-functional-programming-on-coursera.html"/>
    <updated>2015-02-28T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/functional-programming-on-coursera</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Lambda function</a></li>
<li><a href="#sec-2">2. Type hierachy</a></li>
<li><a href="#sec-3">3. Pattern match</a></li>
<li><a href="#sec-4">4. Collections</a></li>
<li><a href="#sec-5">5. Stream, Iterator, Generator and <code>lazy</code></a>
<ul>
<li><a href="#sec-5-1">5.1. Stream</a></li>
<li><a href="#sec-5-2">5.2. Iterator</a></li>
<li><a href="#sec-5-3">5.3. <code>lazy val</code></a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-02-28-functional-programming-on-coursera.html"><span class="section-number-2">1</span> Lambda function</a></h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>function is value,
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">f</span> = (x:Int) =&gt; x*x&#57344;&#57345;&#57345;
</pre>
</div>
<p>
One difference between <code>def f = ...</code> and <code>val f = ...</code> is: <code>def</code>
is evaluated on call and returns a new function instance every
time.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">val</span> <span style="color: #b58900;">test</span>: () =&gt; Int = {&#57344;&#57345;&#57345;
    println(<span style="color: #2aa198;">"val"</span>)&#57344;&#57345;&#57345;
    val r = <span style="color: #268bd2;">util</span>.Random.nextInt&#57344;&#57345;&#57345;
    () =&gt; r&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">returns the same result every time you call test(),</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">"val" will be printed after definition</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #268bd2;">def</span> <span style="color: #b58900;">test</span>: () =&gt; Int = {&#57344;&#57345;&#57345;
    println(<span style="color: #2aa198;">"def"</span>)&#57344;&#57345;&#57345;
    val r = <span style="color: #268bd2;">util</span>.Random.nextInt&#57344;&#57345;&#57345;
    () =&gt; r&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">returns the difference results every time you call test(),</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">"def" will be printed every time you call it.</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">tt</span> = test&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">acts like the first example</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
val test = () =&gt; <span style="color: #268bd2;">util</span>.Random.nextInt&#57344;&#57345;&#57345;
def test = () =&gt; <span style="color: #268bd2;">util</span>.Random.nextInt&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">they are the same from behavior, you have to call the function by test()</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">the def declaration actually defined a function that returns a function.</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">if you type test without parenthesis, you will receive a function value.</span>&#57344;&#57345;
&#57344;&#57345;&#57345;
def test = <span style="color: #268bd2;">util</span>.Random.nextInt&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">this line directly assign the test function to the nextInt function,</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">you can call the function directly by name without the parenthesis</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
method/expression starts by <code>def</code> will be evaluated when you call
<code>obj.f</code> while those starts by <code>val</code> will be evaluated
once. In addition, if you declare a <code>val</code> that assigns to <code>def</code>,
the <code>def</code> will be evaluated immediately, and the new <code>val</code> acts
like the first case in the examples above.
</p>
</li>
<li>Abbreviation:
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">l</span> = List(1,2,3)&#57344;&#57345;&#57345;
l.map((x) =&gt; x*x)&#57344;&#57345;&#57345;
l.map( x =&gt; x*x) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">ignore the parenthese</span>&#57344;&#57345;&#57345;
l.map( _ % 2 == 0) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">ignore the parameter, using the placeholder for expression</span>&#57344;&#57345;
l.map(f(_)) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">using the placeholder for function</span>&#57344;&#57345;&#57345;
l.map(f) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">ignore the placeholder for function</span>&#57344;&#57345;&#57345;
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Type hierachy</h2>
<div class="outline-text-2" id="text-2">
<p>
abstract class is like Java, trait is like interface in
Java. However, trait can have parameters and defined methods. In
addition, trait is not abstract class since it cannot has
constructors.
</p>
<ul class="org-ul">
<li>Logical problem: is List&lt;Parent&gt; the parent of List&lt;Childe&gt;?

<p>
It is not true for mutable collection.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">var</span> <span style="color: #6c71c4;">s</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">Array</span>[Man](<span style="color: #859900;">new</span> <span style="color: #268bd2;">Man</span>())&#57344;&#57345;&#57345;
var t:Array[Human] = s&#57344;&#57345;&#57345;
t[0] = <span style="color: #859900;">new</span> <span style="color: #268bd2;">Woman</span>()&#57344;&#57345;&#57345;
var m:Man = s[0]<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">what is it? man or woman?</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
But we can use imutable collection.
</p>
</li>

<li>Covariant, Contvariant, Invariant
<ul class="org-ul">
<li>Covariant: defined by Class&lt;+T&gt;, Class&lt;Parent&gt; is the parent of
Class&lt;Child&gt;
</li>

<li>Contvariant: defined by Class&lt;-T&gt;, Function&lt;Parent&gt; is the
child of Function&lt;Child&gt;
</li>
</ul>
<p>
The principle is: child type can do anything that can be done by
parent type.
</p>
</li>

<li>Check Rules and Boundary

<p>
To avoid conflict, the compile force the +T can only be used for
returned type, the -T can only be used for argument type. A
method to by pass this problem is using boundary.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">class</span> <span style="color: #268bd2;">List</span>&lt;+T&gt;{&#57344;&#57345;&#57345;
     <span style="color: #268bd2;">def</span> <span style="color: #6c71c4;">prepend</span>[U &gt;: T](<span style="color: #268bd2;">U</span> <span style="color: #6c71c4;">elem</span>)&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Notice that in generic type definition, one can use <code>A&gt;:B</code> and
<code>A&lt;:B</code> to add constraint to the meta type.
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Pattern match</h2>
<div class="outline-text-2" id="text-3">
<p>
Case class enables you to make classes with different parameters
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">abstract</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">CodeTree</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">case</span> <span style="color: #859900;">class</span> Fork(left: CodeTree, right: CodeTree, chars: List[Char], weight: Int) <span style="color: #859900;">extends</span> <span style="color: #268bd2;">CodeTree</span>&#57344;&#57345;
<span style="color: #859900;">case</span> <span style="color: #859900;">class</span> Leaf(<span style="color: #268bd2;">char</span>: Char, weight: Int) <span style="color: #859900;">extends</span> <span style="color: #268bd2;">CodeTree</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
For the classes listed above, you cannot directly access to any
paramter (field) of <code>Fork</code> or <code>Leaf</code>. You have to use <code>case
   Fork(a,b,_,_)</code> to access to the paramters.
</p>

<p>
<code>case</code> match can also be used in lambda function as a short
version.
</p>
<div class="org-src-container">

<pre class="src src-java">List.map(p =&gt; p._1 * p._2)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
List.map({<span style="color: #859900;">case</span> (x,y) =&gt; x * y})&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">//</span><span style="color: #93a1a1; font-style: italic;">List.map{case (x,y) =&gt; x * y} also works</span>&#57344;&#57345;&#57345;
</pre>
</div>

<p>
Option calsss used for the condition that the returned type can be
empty/null, etc.
</p>

<p>
If you want to match a variable in context, you have to weither use
a capitalized variable name <code>Variable</code> or wrap it by backticks
<code>`variable`</code>.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Collections</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>List is a chain while Vector is a tree that each node is an array
that contains 32 elements. Vector groups in depth slowly
<code>log_{32}(N)</code>. Important functions: <code>map</code>, <code>filter</code>,
<code>reduceRight</code>, <code>reduceLeft</code>, <code>foldRight</code>, <code>foldLeft</code>, <code>flatten</code>,
<code>flatMap</code>, <code>take</code>, <code>drop</code>, <code>takeWhile, =dropWhile</code>, <code>span</code>,
<code>group</code>, <code>groupBy</code>.

<p>
Sequence as parameter list is represented by <code>this(par: T*)</code>.
</p>
</li>
<li>Map.
<ul class="org-ul">
<li>The <code>+</code> and <code>++</code> operations overwrite the existing key.
</li>
<li>Initialized by <code>Map(k1-&gt;v1, k2-&gt;v2, k3-&gt;v3)</code>
</li>

<li>Set default value by <code>withDefaultValue</code>, this function returns
a new map (everything in this course are immutable).
</li>
</ul>
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Stream, Iterator, Generator and <code>lazy</code></h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Stream</h3>
<div class="outline-text-3" id="text-5-1">
<p>
Stream, acts like sequence, but it does not evaluate until be
called. It can be used to ignore unecessary computation and coding
infinite concepts.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">val</span> <span style="color: #6c71c4;">fibo</span>:Stream[Int] = 1 #:: 1 #:: fibo.zip(fibo.tail).map(x=&gt;x._1+x._2)&#57344;&#57345;
println(fibo.take(10).toList)&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
def from(n: Int): Stream[Int] = n #:: from(n+1) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">infinite integer stream starts from n</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">recursive stream</span>&#57344;&#57345;&#57345;
def sieve(s: Stream[Int]): Stream[Int] =&#57344;&#57345;&#57345;
   s.head #:: sieve(s.<span style="color: #268bd2;">tail</span> <span style="color: #6c71c4;">filter</span> (_ % s.head !=0)) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">stream of primes &#36136;&#25968;</span>&#57344;&#57345;
&#57344;&#57345;&#57345;
val primes = sieve(from(2))&#57344;&#57345;&#57345;
primes.take(10).toList <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">the first 10 primes starts from 2.</span>&#57344;&#57345;&#57345;
</pre>
</div>

<p>
Three ways of using stream
</p>
<ul class="org-ul">
<li>Transform from other collections, then you use functions like
map, etc. to generate new stream.
</li>
<li><code>elem #:: Stream</code>
</li>
<li>Transform from iterator, use for loop to create an iterator with
what you want and then convert it into a stream.
</li>
</ul>

<p>
Because Stream has consistent API as List/Seq/Vector, you can use
it as if you have a collection that contains everything.
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> Iterator</h3>
<div class="outline-text-3" id="text-5-2">
<p>
The difference between stream and iterator is stream memories the
values while iterator doesn&#8217;t.
</p>

<p>
Iterator can be used in for-expression. For-expression can
also use <b>pattern match</b>.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">for</span>{ pattern(x) &lt;- seq; pattern2(y) = x(k); ...} yield ...&#57344;&#57345;&#57345;
</pre>
</div>
<p>
As show in the example above, you can apply pattern to loop on the
elements of sequence, you can even add some simple statements in
the for-expression. It is equivalent to:
</p>
<div class="org-src-container">

<pre class="src src-java">seq.withFilter({<span style="color: #859900;">case</span> pattern(x) =&gt; <span style="color: #268bd2;">true</span>; <span style="color: #859900;">case</span> _ =&gt; <span style="color: #268bd2;">false</span>})&#57344;&#57345;&#57345;
   .map({<span style="color: #859900;">case</span> pattern(x) =&gt; x(k)})&#57344;&#57345;&#57345;
   .withFilter({<span style="color: #859900;">case</span> pattern2(y) =&gt; <span style="color: #268bd2;">true</span>; <span style="color: #859900;">case</span> _ =&gt; <span style="color: #268bd2;">false</span>})&#57344;&#57345;&#57345;
   .map({<span style="color: #859900;">case</span> pattern2(y) =&gt; y})&#57344;&#57345;&#57345;
   ...&#57344;&#57345;&#57345;
</pre>
</div>
<p>
The function <code>withFilter</code> returns a <code>FilterMonadic</code>, which
provides four functions <code>flatMap</code>, <code>map</code>, <code>foreach</code>,
<code>withFilter</code>. It works like list of call backs in programming
point of view.
From wikipedia:
/In functional programming, a monad is a structure that represents computations defined as sequences of steps: a type with a monad structure defines what it means to chain operations, or nest functions of that type together.
</p>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> <code>lazy val</code></h3>
<div class="outline-text-3" id="text-5-3">
<p>
<code>lazy val</code> is only evaluated once when called. You can also define
a lazy parameter by <code>def myFUnc[T](param: =&gt; T)</code>, then the
parameter will be evaluated when it is called in <code>myFunc</code> if the
param is returned by an expression/function.
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongodb Strategy]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-02-17-mongodb-strategy.html"/>
    <updated>2015-02-17T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/mongodb-strategy</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Two-phase commits</a></li>
<li><a href="#sec-2">2. Concurrency control</a></li>
<li><a href="#sec-3">3. Model</a>
<ul>
<li><a href="#sec-3-1">3.1. Relationships between documents</a>
<ul>
<li><a href="#sec-3-1-1">3.1.1. One-to-One Embeded</a></li>
<li><a href="#sec-3-1-2">3.1.2. One-to-Many Embeded/References</a></li>
</ul>
</li>
<li><a href="#sec-3-2">3.2. Tree Structures</a>
<ul>
<li><a href="#sec-3-2-1">3.2.1. References</a></li>
<li><a href="#sec-3-2-2">3.2.2. Nested Sets</a></li>
</ul>
</li>
<li><a href="#sec-3-3">3.3. Index</a></li>
<li><a href="#sec-3-4">3.4. Others</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-02-17-mongodb-strategy.html"><span class="section-number-2">1</span> Two-phase commits</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Two-phase commits is used to update multiple documents as a fake
atomic operation. The principle of two-phase commits is creating
temporary, inter-media records to support rollback operations
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Concurrency control</h2>
<div class="outline-text-2" id="text-2">
<p>
The first method is adding a label to indicate the current accessing
application.
</p>

<p>
The second method is using the old value of files to update as a part
of query to ensure that the target fields of current document is
not updated.
</p>
<div class="org-src-container">

<pre class="src src-javascript"><span style="color: #859900;">var</span> <span style="color: #6c71c4;">myDoc</span> = db.COLLECTION.findOne<span style="color: #657b83;">(</span>condition<span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #859900;">if</span><span style="color: #657b83;">(</span>myDoc<span style="color: #657b83;">){</span>&#57344;&#57345;&#57345;
   <span style="color: #859900;">var</span> <span style="color: #6c71c4;">oldValue</span> = myDoc.value;&#57344;&#57345;&#57345;
   <span style="color: #859900;">var</span> <span style="color: #6c71c4;">results</span> = db.COLLECTION.update<span style="color: #2aa198;">(</span>&#57344;&#57345;&#57345;
       <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
           _id: myDoc._id,&#57344;&#57345;&#57345;
           value: oldValue&#57344;&#57345;&#57345;
       <span style="color: #b58900;">}</span>,&#57344;&#57345;&#57345;
       <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
           $inc:<span style="color: #859900;">{</span>value: -fee<span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
       <span style="color: #b58900;">}</span>&#57344;&#57345;&#57345;
       <span style="color: #2aa198;">)</span>&#57344;&#57345;&#57345;
<span style="color: #657b83;">}</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Another possible option is: if you want to deduct an amount of
money from an account and the rest money should not be negative,
you can use following commands:
</p>
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.update<span style="color: #657b83;">(</span><span style="color: #2aa198;">{</span>_id: id, value: <span style="color: #b58900;">{</span>$gte: fee<span style="color: #b58900;">}</span><span style="color: #2aa198;">}</span>, <span style="color: #2aa198;">{</span>$inc:<span style="color: #b58900;">{</span>value: -fee<span style="color: #b58900;">}</span><span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;
</pre>
</div>
<p>
It means the account will be updated only if the value is enough.
</p>

<p>
The third method is add an unique field (<i>version</i>) to the
document.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Model</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Relationships between documents</h3>
<div class="outline-text-3" id="text-3-1">
</div><div id="outline-container-sec-3-1-1" class="outline-4">
<h4 id="sec-3-1-1"><span class="section-number-4">3.1.1</span> One-to-One Embeded</h4>
<div class="outline-text-4" id="text-3-1-1">
<p>
Example: <i>patron</i> and <i>address</i>. User informations should be put
together, such as the account info (password, email) and
application relative info (balance in account).
</p>
</div>
</div>

<div id="outline-container-sec-3-1-2" class="outline-4">
<h4 id="sec-3-1-2"><span class="section-number-4">3.1.2</span> One-to-Many Embeded/References</h4>
<div class="outline-text-4" id="text-3-1-2">
<p>
It is used for <i>one-to-few</i> such as the authors of a book. One
can use array in a document to model such relations. However, if
the values of embedded elements are few, it is better to save them
in another documents using references. For example, the
publishers of books. Another principle is DO NOT create large
arrays in document. Large arrays in document is inefficient for
three reasons:
</p>
<ul class="org-ul">
<li>When document size is increased, the MongoDB will move the
document, which lead to rewriting the entire document.
</li>
<li>Indexing the elements in array is inefficient.
</li>
<li>Query a large document for a small part of array is
inconvenient.
</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Tree Structures</h3>
<div class="outline-text-3" id="text-3-2">
</div><div id="outline-container-sec-3-2-1" class="outline-4">
<h4 id="sec-3-2-1"><span class="section-number-4">3.2.1</span> References</h4>
<div class="outline-text-4" id="text-3-2-1">
<ul class="org-ul">
<li>Parent Refs.

<p>
Save each node as a document that contains the reference to the
parent
</p>
</li>

<li>Child Refs

<p>
Save each node as document that contains an array of references
to children nodes.
</p>
</li>

<li>Extension

<p>
It is also useful to add additional relations such as ancestors
of nodes into the document.
</p>

<p>
Another way to accelerate the searching of a tree is
<i>materialize paths</i>. This method add a <code>path</code> attribute that
describe the path using a string. Searching such string requires
using of regular expression, but is faster than the previous
solution.
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-2-2" class="outline-4">
<h4 id="sec-3-2-2"><span class="section-number-4">3.2.2</span> Nested Sets</h4>
<div class="outline-text-4" id="text-3-2-2">
<p>
This method is tricky. It likes a binary tree that use values to
indicate the relative nodes.
</p>
<div class="org-src-container">

<pre class="src src-javascript"> db.categories.insert<span style="color: #657b83;">(</span> <span style="color: #2aa198;">{</span> _id: <span style="color: #2aa198;">"Books"</span>, parent: 0, left: 1, right: 12 <span style="color: #2aa198;">}</span> <span style="color: #657b83;">)</span>&#57344;&#57345;
 db.categories.insert<span style="color: #657b83;">(</span> <span style="color: #2aa198;">{</span> _id: <span style="color: #2aa198;">"Programming"</span>, parent: <span style="color: #2aa198;">"Books"</span>, left: 2, right: 11 <span style="color: #2aa198;">}</span> <span style="color: #657b83;">)</span>&#57344;&#57345;
 db.categories.insert<span style="color: #657b83;">(</span> <span style="color: #2aa198;">{</span> _id: <span style="color: #2aa198;">"Languages"</span>, parent: <span style="color: #2aa198;">"Programming"</span>, left: 3, right: 4 <span style="color: #2aa198;">}</span> <span style="color: #657b83;">)</span>&#57344;&#57345;
 db.categories.insert<span style="color: #657b83;">(</span> <span style="color: #2aa198;">{</span> _id: <span style="color: #2aa198;">"Databases"</span>, parent: <span style="color: #2aa198;">"Programming"</span>, left: 5, right: 10 <span style="color: #2aa198;">}</span> <span style="color: #657b83;">)</span>&#57344;&#57345;
&#65532;db.categories.insert<span style="color: #657b83;">(</span> <span style="color: #2aa198;">{</span> _id: <span style="color: #2aa198;">"MongoDB"</span>, parent: <span style="color: #2aa198;">"Databases"</span>, left: 6, right: 7 <span style="color: #2aa198;">}</span> <span style="color: #657b83;">)</span>&#57344;&#57345;
 db.categories.insert<span style="color: #657b83;">(</span> <span style="color: #2aa198;">{</span> _id: <span style="color: #2aa198;">"dbm"</span>, parent: <span style="color: #2aa198;">"Databases"</span>, left: 8, right: 9<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;
&#57344;&#57345;&#57345;
 <span style="color: #859900;">var</span> <span style="color: #6c71c4;">databaseCategory</span> = db.categories.findOne<span style="color: #657b83;">(</span> <span style="color: #2aa198;">{</span> _id: <span style="color: #2aa198;">"Databases"</span> <span style="color: #2aa198;">}</span> <span style="color: #657b83;">)</span>;&#57345;
 db.categories.find<span style="color: #657b83;">(</span> <span style="color: #2aa198;">{</span> left: <span style="color: #b58900;">{</span> $gt: databaseCategory.left <span style="color: #b58900;">}</span>, right: <span style="color: #b58900;">{</span> $lt: databaseCategory.right <span style="color: #b58900;">}</span> <span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;
</pre>
</div>
<p>
One can retrieve the children nodes by using the left and right
indicators.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Index</h3>
<div class="outline-text-3" id="text-3-3">
<p>
One of the main benefit of indexing is sorting, the application
can quickly find the matched document by traveling through the
ordered indices very quickly
</p>
<ul class="org-ul">
<li>Single field index
</li>
<li>Compound key index<br  />
      Note that if one set compound index by
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.ensureIndex<span style="color: #657b83;">(</span><span style="color: #2aa198;">{</span>key1: 1, key2: -1<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
It can help the <code>sort</code> funciton using <code>{key1: 1, key2: -1}</code>,
<code>{key1: -1, key2: 1}</code>, but cannot help sorting with the key
<code>{key1: 1, key2: 1}</code>.
</p>
</li>
<li>Multi-key index<br  />
      It refers to using array as index. You cannot using compound key
for two arrays.
</li>
<li>Hased index<br  />
      It is not compatible with multi-key index.
</li>
<li>Geospatial index<br  />
      This index is used to index the geometric data, such as lines,
points, shapes.
</li>
<li>Text index<br  />
      Support text search with language stop words, will use very
large space.
</li>
<li>Hashed index<br  />
      Compute the hash for entire document while <b>??collapse??</b> the
sub-document.
</li>
</ul>

<p>
Index also support properties like:
</p>
<ul class="org-ul">
<li><i>TTL</i> index is used to remove outdated index
</li>
<li><i>Uniqu</i> index, which reject duplicate value of indexed filed for all the document. ??Can we use it to ensure that
elements in array has unique value in document (can be repeat in
different document)??
</li>
<li><i>Sparse</i> index, documents without the field are not indexed. By
default, these documents will be indexed to null.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Others</h3>
<div class="outline-text-3" id="text-3-4">
<ul class="org-ul">
<li>Atomic operation
<code>update</code>, <code>findAddUpdate</code>, <code>remove</code> are atomic. Put fields in one
document can ensure the write operations are atomic.
</li>

<li>Support keyword search
Putting strings in an array, then create a multi-key index
enables keyword search.

<p>
Keyword search cannot provide NLP/IE functions, such as
stemming, synonyms, ranking, which are usually required by
search engine.
</p>
</li>

<li>Document limit

<ul class="org-ul">
<li>Field names cannot start with <code>$</code>, cannot contain <code>.</code>, cannot
contain <code>null</code>.
</li>

<li>Field value has a maximum index key length limit to be used as
index.
</li>

<li>Maximum document size is 16M. GridFS supports large file,
which is represented by a group of files that contain
different pieces of contents.
</li>

<li><code>_id</code> field may be any BSON data type except the array. It is
<code>ObjectId</code> by default.
</li>
</ul>
</li>

<li>DBRef

<p>
DBRefs are used to representing a document rather a specific
reference type. It contains the name of collection (optional:
database name).
</p>
</li>
</ul>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Mongodb Instructions]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-02-14-basic-mongodb-instructions.html"/>
    <updated>2015-02-14T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/basic-mongodb-instructions</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Insert</a></li>
<li><a href="#sec-2">2. Find</a></li>
<li><a href="#sec-3">3. Select</a></li>
<li><a href="#sec-4">4. Update</a></li>
<li><a href="#sec-5">5. Remove</a></li>
<li><a href="#sec-6">6. Commands</a></li>
<li><a href="#sec-7">7. Query Cursor Methods</a></li>
<li><a href="#sec-8">8. MapReduce</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-02-14-basic-mongodb-instructions.html"><span class="section-number-2">1</span> Insert</a></h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.insert<span style="color: #657b83;">(</span>doc/docs<span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
You can insert one document or a list of documents.  When you
insert a list of documents, the operation is not atomic.  The
returned result shows the statistics of the write operations
including the write errors and the number of successfully inserted
documents.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Find</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.find<span style="color: #657b83;">(</span><span style="color: #2aa198;">{</span>name: value, <span style="color: #2aa198;">'name1.name2.name3'</span>:value/condition<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57345;
</pre>
</div>
<p>
Check all the elements in array when &#8216;name#&#8217; corresponds to
array. Special conditions
</p>
<ul class="org-ul">
<li><code>$in, $ne, $nin, $lt, $gt, $lte, $gte</code>
</li>
<li><code>$and, $or, $not, $nor</code>
</li>
<li><code>$exists, $type</code>
</li>
<li><code>$regex, $text, $where, $mod</code>
</li>
<li><code>$all, $elemMatch, $size</code>
</li>
<li><code>$, $slice</code>
</li>
</ul>

<p>
Difference between with/without <code>$elemMatch</code> is that: <code>$elemMatch</code>
restrict that one element in array should match all the conditions,
while without <code>$elemMatch</code>, different elements in the array can
match different part of the conditions.
</p>

<p>
Match <b>element</b> / <b>array</b> can be done by query <code>{name: value}</code> when value
is a single <b>variable/object</b> or an <b>array</b>.
</p>

<p>
Elements in array can be retrieved by index
<code>db.COLLECTION.find({'name.0': value})</code>.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Select</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>get attribute
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.find<span style="color: #657b83;">(</span>***, <span style="color: #2aa198;">{</span>name:1<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>get elements in array
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.find<span style="color: #657b83;">(</span>***, <span style="color: #2aa198;">{</span><span style="color: #2aa198;">'name1.name2'</span>:1<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
This projection will returns all the elments with the path
&#8216;name1.name2&#8217; when any one in the path represents an array.
</p>

<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.find<span style="color: #657b83;">(</span>***, <span style="color: #2aa198;">{</span>name1: <span style="color: #b58900;">{</span>$elemMatch: <span style="color: #859900;">{</span>name2:value<span style="color: #859900;">}</span><span style="color: #b58900;">}</span><span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>$elemMatch</code> can be used in the second argument to limit the
returned elements in array. However, it <b>CANNOT</b> be used in nested
array and only returns the <b>FIRST</b> element.
</p>
</li>
<li>get elements in nested array.

<p>
<b>Aggregation framework/unwind.</b>
Aggregations are operations that process data records and return
computed results.
<b>Pipeline</b>
</p>

<p>
You can expand the nested arrays by several <code>$unwind</code>
operations to get a large number of documents that each one
contains a single combination of elements in different levels
of nested arrays. Then match the elements you need and maybe
regroup them together. However, if you want to aggregate the
matched elements in nested arrays into array after <code>$unwind</code>
operation, it is very complex.
</p>

<p>
However, you can just return the tasks by <code>$group</code> operation
that matches, for example, the nested element attributes.
</p>
</li>
</ul>
</div>
</div>



<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Update</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>update attribute:
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.update<span style="color: #657b83;">(</span>find condition, <span style="color: #2aa198;">{</span>$set: <span style="color: #b58900;">{</span>name: value<span style="color: #b58900;">}</span><span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>$inc</code> increase number, etc. <code>upsert</code> will insert element when it
does not exist in collection.
</p>
</li>
<li>update array:
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.update<span style="color: #657b83;">(</span>find condition, <span style="color: #2aa198;">{</span>$push/$pull: value<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>

<div class="org-src-container">

<pre class="src src-javascript">db.students.update<span style="color: #657b83;">(</span>&#57344;&#57345;&#57345;
  <span style="color: #2aa198;">{</span> _id: 1 <span style="color: #2aa198;">}</span>,&#57344;&#57345;&#57345;
  <span style="color: #2aa198;">{</span>&#57344;&#57345;&#57345;
  $push: <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
          scores: <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
             $each: <span style="color: #268bd2;">[</span> <span style="color: #657b83;">{</span> attempt: 3, score: 7 <span style="color: #657b83;">}</span>, <span style="color: #657b83;">{</span> attempt: 4, score: 4 <span style="color: #657b83;">}</span> <span style="color: #268bd2;">]</span>,&#57344;&#57345;
             $sort: <span style="color: #268bd2;">{</span> score: 1 <span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
             $slice: -3&#57344;&#57345;&#57345;
          <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
The command above append 2 elements, then sort them by ascending
<i>score</i>, then keep the last 3 elements of the ordered array.
</p>
</li>
<li>update element in array:
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.update<span style="color: #657b83;">(</span><span style="color: #2aa198;">{</span><span style="color: #2aa198;">"name1.name2"</span>:value<span style="color: #2aa198;">}</span>, <span style="color: #2aa198;">{</span>$set:<span style="color: #b58900;">{</span><span style="color: #2aa198;">'name1.$.name2:value}})</span>&#57344;&#57345;
</pre>
</div>
<p>
It only works for one match.
</p>

<p>
If you want to update multiple elments, use forEach function.
</p>
<div class="org-src-container">

<pre class="src src-javascript">db.Projects.find<span style="color: #657b83;">()</span>.forEach<span style="color: #657b83;">(</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">function</span><span style="color: #2aa198;">(</span><span style="color: #6c71c4;">pj</span><span style="color: #2aa198;">){</span>&#57344;&#57345;&#57345;
        pj.groups.forEach<span style="color: #b58900;">(</span>&#57344;&#57345;&#57345;
            <span style="color: #859900;">function</span><span style="color: #859900;">(</span><span style="color: #6c71c4;">gp</span><span style="color: #859900;">){</span>&#57344;&#57345;&#57345;
                gp.tasks.forEach<span style="color: #268bd2;">(</span>&#57344;&#57345;&#57345;
                    <span style="color: #859900;">function</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">task</span><span style="color: #657b83;">){</span>&#57344;&#57345;&#57345;
                        <span style="color: #859900;">if</span> <span style="color: #2aa198;">(</span>task.name.match<span style="color: #b58900;">(</span><span style="color: #2aa198;">/update/</span><span style="color: #b58900;">)</span><span style="color: #2aa198;">){</span>&#57344;&#57345;&#57345;
                            task.weight=5;&#57344;&#57345;&#57345;
                        <span style="color: #2aa198;">}</span>&#57344;&#57345;&#57345;
                    <span style="color: #657b83;">}</span><span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
            <span style="color: #859900;">}</span><span style="color: #b58900;">)</span>;&#57344;&#57345;&#57345;
        db.Projects.save<span style="color: #b58900;">(</span>pj<span style="color: #b58900;">)</span>;&#57344;&#57345;&#57345;
    <span style="color: #2aa198;">}</span>&#57344;&#57345;&#57345;
<span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>update element in nested array.

<p>
<b>Impossible</b> for only one query. The issue is reported on 2010, but
is still there on 2015&#x2026;
</p>
</li>
</ul>

<p>
Functional key words:
</p>
<ul class="org-ul">
<li><code>$currentDate, $inc, $max, $min, $mul, $rename, $setOnInsert, $set, $unset</code>
</li>
<li><code>$, $addToSet, $pop, $pullAll, $pull, $pushAll, $push</code>
</li>
<li><code>$each, $position, $slice, $sort</code>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Remove</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>remove document
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.remove<span style="color: #657b83;">(</span>condition<span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
remove all documents when condition is not provided.
</p>
</li>
<li>remove colleciton
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.drop<span style="color: #657b83;">()</span>&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>remove database
<div class="org-src-container">

<pre class="src src-javascript">use DATABASE&#57344;&#57345;&#57345;
db.dropDatabase<span style="color: #657b83;">()</span>&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>remove attribute
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.update<span style="color: #657b83;">(</span>find, <span style="color: #2aa198;">{</span>$unset: <span style="color: #b58900;">{</span>name: value<span style="color: #b58900;">}</span><span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
value can be 1, &#8220;&#8221;, true/false.
</p>
</li>
<li>remove element in array
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.update<span style="color: #657b83;">(</span><span style="color: #2aa198;">{</span><span style="color: #2aa198;">"name1.name2"</span>:value<span style="color: #2aa198;">}</span>, <span style="color: #2aa198;">{</span>$unset:<span style="color: #b58900;">{</span><span style="color: #2aa198;">'name1.$.name2'</span>:1<span style="color: #b58900;">}</span><span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;
</pre>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Commands</h2>
<div class="outline-text-2" id="text-6">
<p>
<code>show dbs</code>
<code>use DB</code>
<code>show collection</code>
<code>help</code>
<code>db.help()</code>
<code>db.COLLECTION.help()</code>
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Query Cursor Methods</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li><code>count()</code> // count of documents returned in a curcor
</li>
<li><code>explain()</code> // report
</li>
<li><code>hint()</code> // Forces MongoDB to use a specific index for a query
</li>
<li><code>limit()</code> // constraints size of returned results
</li>
<li><code>skip()</code> // skip the first number of documents
</li>
<li><code>sort()</code>
</li>
<li><code>toArray()</code>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> MapReduce</h2>
<div class="outline-text-2" id="text-8">
<div class="org-src-container">

<pre class="src src-javascript">db.COLLECTION.mapReduce<span style="color: #657b83;">(</span>mapFunction,&#57344;&#57345;&#57345;
                        reduceFunction,&#57344;&#57345;&#57345;
                        <span style="color: #2aa198;">{</span>&#57344;&#57345;&#57345;
                            query: <span style="color: #2aa198;">"query performed at the beginning"</span>,&#57345;
                            out: <span style="color: #2aa198;">"out collection name"</span>,&#57344;&#57345;&#57345;
                            finalize: finalizeFunction&#57344;&#57345;&#57345;
                        <span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Query -&gt; map -&gt; reduce -&gt; finalize -&gt; out.
</p>
<ul class="org-ul">
<li>The <i>reduce</i> function muse return object with the same type of the output
of the <i>map</i> function.
</li>
<li>The order of emited elements should not affect the output of
reduce function.
</li>
<li>The reduce function must be <i>Idempotent</i>, which means
<i>f(f(x))=f(x)</i>.
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Overview]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-01-30-javascript-overview.html"/>
    <updated>2015-01-30T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/javascript-overview</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 后端</a></li>
<li><a href="#sec-2">2. 前端</a></li>
</ul>
</div>
</div>
<p>
在工具描述中,主要介绍经常用到的库,框架,前后端开发用到的平台.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2015-01-30-javascript-overview.html"><span class="section-number-2">1</span> 后端</a></h2>
<div class="outline-text-2" id="text-1">
<p>
<b>Node.js</b> 是一个JavaScript的平台,它提供了一个脱离浏览器的JavaScript运
行环境,同时也提供了一系列运行库和各种包. npm(nodejs package
manager)则是这各平台的包管理系统.它通过读取package.json文件来安装项
目所需的依赖(就跟maven的pom.xml一样).
</p>

<p>
<b>bower</b> ,是nodejs之中的一个组件,本身用来专门管理前端开发所需要的包
(JavaScript,CSS).它与npm的区别在于管理对象的不同以及bower使用的是扁
平化的依赖关系而npm使用树形依赖.bower读取bower.json来安装依赖.
</p>

<p>
<b>yoeman</b> , 安装时叫做 <b>yo</b>,是一个用来创建项目骨架的工具.它根据
yeoman-generator,也就是模板来创建文件架结构.模板需要用npm来安装,比
方说
</p>
<div class="org-src-container">

<pre class="src src-bash">npm install -g generator-gulp-angular
</pre>
</div>
<p>
模板名字以 <code>generator</code> 开头.
使用时运行
</p>
<div class="org-src-container">

<pre class="src src-bash">mkdir [app-name] &amp;&amp; cd $_
yo gulp-angular [app-name]
</pre>
</div>
<p>
来生成一个以generator-gulp-angular为模板的项目骨架,项目名字为
<code>[app-name]</code>. 就刚刚使用的这个模板为例,它在创建的时候会询问你需要什
么样的angular版本,哪一种CSS样式库(bootstrap, material),哪种angular
的实现方式(angular-strap),等等.
</p>

<p>
<b>grunt</b> / <b>gulp</b> 用来运行打包,压缩,发布等任务.在刚刚的例子中,我们使
用的是基于gulp的模板,所以要用gulp来运行以上任务.生成模板的事后,已经
在项目目录下建立了一个名为gulp的目录以及一个叫做gulpfile.js的文
件.gulp目录下面包含一系列js文件. gulpfile.js里面引入gulp库,定义一些
目录(src)的路径,并引入gulp目录,从而使得gulp目录下的js文件被gulp用来
进行相应的操作.这个模板的<a href="https://github.com/Swiip/generator-gulp-angular">github</a>说明上还指出一系列可选的特性,但是目
前看不出来在哪里定义的.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 前端</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Javascript
<ul class="org-ul">
<li><b>AngularJS</b>
</li>
<li><b>UI-Route</b>
</li>
</ul>
</li>

<li>UI Framework
<ul class="org-ul">
<li><b>Bootstrap</b>
</li>
<li><b>Angular Material</b>
</li>
</ul>
</li>

<li>CSS Preprocessor
<ul class="org-ul">
<li>Sass(Node.js)
</li>
<li>Less
</li>
</ul>
</li>

<li>JS Preprocessor
<ul class="org-ul">
<li>ES6
</li>
<li>TypeScript
</li>
<li>CoffeeScript
</li>
<li>AtScript
</li>
</ul>
</li>

<li>HTML template
<ul class="org-ul">
<li><code>.jade</code>
</li>
<li><code>.haml</code>
</li>
</ul>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Developer Guide 开发指南学习笔记]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-12-25-angularjs-developer-guide-.html"/>
    <updated>2014-12-25T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/angularjs-developer-guide-</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Introduction &amp; Conceptual Overview</a></li>
<li><a href="#sec-2">2. DI</a></li>
<li><a href="#sec-3">3. Data Binding &amp; Scopes &amp; Template</a></li>
<li><a href="#sec-4">4. Module &amp; Provider</a>
<ul>
<li><a href="#sec-4-1">4.1. Service</a></li>
<li><a href="#sec-4-2">4.2. Controller</a></li>
</ul>
</li>
<li><a href="#sec-5">5. Directive</a>
<ul>
<li><a href="#sec-5-1">5.1. 注册Directive</a></li>
<li><a href="#sec-5-2">5.2. restrict option</a></li>
<li><a href="#sec-5-3">5.3. link option</a></li>
<li><a href="#sec-5-4">5.4. isolate scope</a></li>
<li><a href="#sec-5-5">5.5. <i>transclude</i></a></li>
<li><a href="#sec-5-6">5.6. scope</a></li>
<li><a href="#sec-5-7">5.7. controller in directive.</a></li>
</ul>
</li>
<li><a href="#sec-6">6. Filters</a></li>
<li><a href="#sec-7">7. Forms</a></li>
<li><a href="#sec-8">8. Expressions</a></li>
<li><a href="#sec-9">9. HTML Compiler</a></li>
<li><a href="#sec-10">10. Security</a></li>
<li><a href="#sec-11">11. i18n and l10n</a></li>
<li><a href="#sec-12">12. Accessibility</a></li>
<li><a href="#sec-13">13. Bootstrap</a></li>
<li><a href="#sec-14">14. Running in Production</a></li>
<li><a href="#sec-15">15. Animations</a></li>
</ul>
</div>
</div>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-12-25-angularjs-developer-guide-.html"><span class="section-number-2">1</span> Introduction &amp; Conceptual Overview</a></h2>
<div class="outline-text-2" id="text-1">
<p>
HTML本身是静态的,对于现在的动态网页无能为力.为了弥合静态和动态之间
的鸿沟,有两种静态方式:库(<code>jQuery</code>),框架(<code>durandal</code>,
<code>ember</code>). <code>AngularJS</code> 则提供了第三种方式,通过数据绑定等方式让浏览
器学会新的语法. <code>AngularJS</code> 是完全基于前端的,适用于CRUD应用.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> DI</h2>
<div class="outline-text-2" id="text-2">
<p>
AngularJS中的模组类似于名字空间,在几乎所有东西都在名字空间下注册.这
些注册的东西是通过名字推断来进行绑定(引用)的.AngularJS自带的那功能,都
是可以直接引用的.自己定义的东西,也可以直接靠名字推定,但是要给模组
加上依赖关系.
</p>

<p>
<b>service</b>, <b>directive</b>, <b>filter</b> 都是通过 <code>factory/directive/filter</code> 方
法注册在模组中的,这些方法统称工厂(factory)方法.
</p>

<p>
我们可以通过 <code>config/run</code> 方法注册在模组配置和运行的时候需要运行的
函数,这些函数也同样的可以被以类似上面的方式来调用.这些方法被归类为
模组(module)方法.
</p>

<p>
控制器(<b>controller</b>),被解释为classes或者constructor function,同样需
要注册到模组中,通过名字来引用.
</p>

<p>
这些东西在引用的时候,可以直接当函数参数名,可以用 <i>$inject</i> 来显示
说明,也可以用数组.后两种基本上是在第一种的基础上多写些代码来说明.直
接用函数参数名是最简单的,但是不被官方所推荐.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Data Binding &amp; Scopes &amp; Template</h2>
<div class="outline-text-2" id="text-3">
<p>
传统模板是通过模板Tempalte和模型Model来建立视图View. AngularJS是通过模
板建立起View和Model的对应,让View跟Model直接互动.
AngularJS中,template是包含AngularJS元素和属性的HTML.template中可用
的AngularJS元素和属性为 <i>Directive</i>, <i>Markup</i> (<code></code>), <i>Filter</i>,
<i>Form controls</i>.通过这些template,JS(model)和(view)被连接了起来(数
据绑定).
</p>

<p>
上下文(Scope)提供表达式的运行环境,它被组织成一个类似DOM的层级结构.上
下文监视表达式并传递事件.API($watch)监视模型的变更,($apply)将任意
由Angular之外的事件对模型的改变传递到View.这里所谓的Angular之外的
事件,指的是controllers,services,event handlers.
</p>

<p>
上下文之间可以嵌套,嵌套的上下文有两种 <i>child scope</i> 和 <i>isolate
scope</i>, <i>child scope</i> 继承上层上下文的内容, <i>isolate scope</i> 不继承.
如果上下文中没有对应的属性,表达式是没有任何作用的.
</p>

<p>
上下文可以看做将应用控制器controller和视图view联系起来的胶水.
<span class="underline">在template连接的时候,directive会设置上下文中的$watch,$watch会通知
directive任何属性的变更,从而使directive能根据更新的数据来渲染DOM</span>
控制器controller和directive都能直接访问scope,但是不能直接访问对方.这
种设计孤立controller和directive. <code>$rootScope</code> 提供对root上下文的访
问,一般指向ng-app所在的范围.
</p>

<p>
如果用chrome的inspect element功能查看页面元素,会发现
<code>class="ng-scope ng-binding"</code>之类的属
性.Anuglar会自动将 <i>ng-scope</i> 加入制定了上下文的元素, <i>ng-binding</i>
则说明这里面的内容是用绑定实现的.
</p>

<p>
在不同层级使用同一个controller,
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">div</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"EventController"</span>&gt;&#57344;&#57345;&#57345;
  Root scope &lt;<span style="color: #b58900;">tt</span>&gt;<span style="color: #657b83; background-color: #fdf6e3;">MyEvent</span>&lt;/<span style="color: #b58900;">tt</span>&gt; count: &#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">li</span> <span style="color: #6c71c4;">ng-repeat</span>=<span style="color: #2aa198;">"i in [1]"</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"EventController"</span>&gt;&#57344;&#57345;&#57345;
      &lt;<span style="color: #b58900;">button</span> <span style="color: #6c71c4;">ng-click</span>=<span style="color: #2aa198;">"$emit('MyEvent')"</span>&gt;$emit('MyEvent')&lt;/<span style="color: #b58900;">button</span>&gt;&#57344;&#57345;&#57345;
      &lt;<span style="color: #b58900;">button</span> <span style="color: #6c71c4;">ng-click</span>=<span style="color: #2aa198;">"$broadcast('MyEvent')"</span>&gt;$broadcast('MyEvent')&lt;/<span style="color: #b58900;">button</span>&gt;&#57344;&#57345;
      &lt;<span style="color: #b58900;">br</span>&gt;&#57344;&#57345;&#57345;
      Middle scope &lt;<span style="color: #b58900;">tt</span>&gt;<span style="color: #657b83; background-color: #fdf6e3;">MyEvent</span>&lt;/<span style="color: #b58900;">tt</span>&gt; count: &#57344;&#57345;&#57345;
      &lt;<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
        &lt;<span style="color: #b58900;">li</span> <span style="color: #6c71c4;">ng-repeat</span>=<span style="color: #2aa198;">"item in [1, 2]"</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"EventController"</span>&gt;&#57344;&#57345;
          Leaf scope &lt;<span style="color: #b58900;">tt</span>&gt;<span style="color: #657b83; background-color: #fdf6e3;">MyEvent</span>&lt;/<span style="color: #b58900;">tt</span>&gt; count: &#57344;&#57345;&#57345;
        &lt;/<span style="color: #b58900;">li</span>&gt;&#57344;&#57345;&#57345;
      &lt;/<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
    &lt;/<span style="color: #b58900;">li</span>&gt;&#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">div</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>

<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'eventExample'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'EventController'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
  $scope.count = 0;&#57344;&#57345;&#57345;
  $scope.$on<span style="color: #859900;">(</span><span style="color: #2aa198;">'MyEvent'</span>, <span style="color: #859900;">function</span><span style="color: #268bd2;">()</span> <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
    $scope.count++;&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>

<p>
这个例子中,首先我们看JS的部分.这部分注册了一个EventController,这个
controller对于给定的上下文 <i>$scope</i> 设定属性 <i>count</i>,同时注册一个
名为 <i>MyEvent</i> 的事件,调用一个闭包函数对于当前上下文进行操作.
</p>

<p>
接下来看HTML,里面把同一个controller用了三次,也就意味着对于
eventExample,给予三个不同的 <i>$scope</i>.而这三个 <i>$scope</i> 各自拥有自
己的 <i>MyEvent</i> 函数副本.最后, <code>$emit('MyEvent')</code> 将调用这个函数的
动作传递给上层 <i>$scope</i>, <code>$broadcast('MyEvent')</code> 则传递给下层
<i>$scope</i>.
</p>

<p>
<i>$scope</i> 的生命周期中,模型的改变不会立即触发 <i>$watch</i>, 而是通过在
<i>$apply</i> 结束时的 <i>$digest</i> 来触发 <i>$watch</i>,这么做的好处在于将多个
改变合为一个 <i>$watch</i> 动作. 当子上下文不需要继续存在时,子上下文的
创建者负责调用 <i>scope.$destroy()</i> 负责停止事件传递,允许垃圾回收来
释放内存.
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Module &amp; Provider</h2>
<div class="outline-text-2" id="text-4">
<p>
angular.module会覆盖已存在的名字.模组提供 <i>provider</i>, <i>factory</i>,
<i>service</i>, <i>value</i>, <i>constant</i>, <i>animation</i>, <i>filter</i>,
<i>controller</i>, <i>directive</i>, <i>config</i>, <i>run</i> 这些方法.除了最后两个以
外,都是注册某一种功能.
<i>provider,factory,service,value,constant</i> 都是JS内部用的,
<i>directive,filter,animation,controller</i> 都是在html里面用
的(JS里面定义的).
</p>
<ul class="org-ul">
<li>JS
<ul class="org-ul">
<li>provider 提供一个在config阶段配置内容的机会,通过 <i>$get</i> 函数返
回绑定的对象.
</li>
<li>factory 注册一个名字空间,跟value类似,但是可以引用其它的服务
</li>
<li>service 注册一个类,用 <i>new</i> 来获得对象
</li>
<li>value 注册一个变量,也可以在变量下加入函数,但是不能引用其它的服务.
</li>
</ul>
</li>
<li>html
<ul class="org-ul">
<li>directive, 定义一个html元素,属性,类名,对相应的元素加入定义好的模块
</li>
<li>controller, 注册一个可在html里面引用的属性值,对相应元素中的变
量进行绑定和操作.
</li>
<li>animation, 动作效果
</li>
</ul>
</li>
<li>html and JS
<ul class="org-ul">
<li>filter, 过滤器. 返回一个过滤函数并绑定在这个名字上. 过滤函数接
受整个数组为第一个参数,还可以自定附加参数.
</li>
</ul>
</li>
</ul>

<p>
Provider是AngularJS的基础,Value,Factory,Service,Constant都建立在Provider之上.下
面的 <code>myApp.XXX</code> 方法实际上都是调用 <code>$provider.XXX</code>.
</p>
<ul class="org-ul">
<li>Value recipe
<div class="org-src-container">

<pre class="src src-javascript"><span style="color: #859900;">var</span> <span style="color: #6c71c4;">myApp</span> = angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myApp'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
myApp.value<span style="color: #657b83;">(</span><span style="color: #2aa198;">'clientId'</span>, <span style="color: #2aa198;">'a12345654321x'</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
myApp.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'DemoController'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'clientId'</span>, <span style="color: #859900;">function</span> DemoController<span style="color: #b58900;">(</span><span style="color: #6c71c4;">clientId</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
  <span style="color: #268bd2;">this</span>.clientId = clientId;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">html</span> <span style="color: #6c71c4;">ng-app</span>=<span style="color: #2aa198;">"myApp"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">body</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"DemoController as demo"</span>&gt;&#57344;&#57345;&#57345;
    Client ID: &#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">body</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">html</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
其实就是定义一个模组下的变量/对象,可以是简单值,也可以在这个变量
下加入函数.
</p>
</li>
<li>Factory recipe
相对Value,可使用其他服务,初始化服务,惰性初始化. 使用 <code>myApp.factory</code>
方法.返回的是一系列变量,函数.
</li>
<li>Service recipe
使用 <code>myApp.service()</code> 方法,注册一个构造函数,得到一个类(class),
用 <i>new</i> 来得到新实例.返回的是构造函数.
</li>
<li>Provider Recipe
比Factory更高一层,能够让用户在使用服务之前进行定制化,用config函
数来实现.Provider里面有个 <code>$get</code> 方法,DI会把这个方法返回的东西绑
定到注册的Provider名字上.
<div class="org-src-container">

<pre class="src src-javascript">myApp.provider<span style="color: #657b83;">(</span><span style="color: #2aa198;">'AAA'</span>, <span style="color: #859900;">function</span> AAAProvider<span style="color: #2aa198;">(){</span>&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">this</span>.configFunc = <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">bla</span><span style="color: #b58900;">){</span>blabla<span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">this</span>.$get = <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">lab</span><span style="color: #b58900;">){</span> <span style="color: #859900;">return</span> BBB<span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
myApp.config<span style="color: #657b83;">(</span><span style="color: #859900;">function</span><span style="color: #2aa198;">(</span><span style="color: #6c71c4;">AAAProvider</span><span style="color: #2aa198;">){</span>&#57344;&#57345;&#57345;
    AAAProvider.configFunc<span style="color: #b58900;">(</span>...<span style="color: #b58900;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
myApp.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'CCC'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">(</span><span style="color: #6c71c4;">AAA</span><span style="color: #2aa198;">){</span> <span style="color: #93a1a1; font-style: italic;">/*</span><span style="color: #93a1a1; font-style: italic;">AAA is BBB*/</span><span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<i>provider</i> 只能在config里面,而在run里面,只能用非 <i>provider</i>.
</p>
</li>
<li>Constant Recipe
Constant在config和run的过程中都存在(在他们之前).用
<code>myApp.constant</code> 来注册.
</li>
<li>Special Purpose Objects
包括controller, directive, filter, animation.
</li>
</ul>
</div>
<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> Service</h3>
<div class="outline-text-3" id="text-4-1">
<p>
服务都是惰性加载和单例,通过 <i>factory</i> 注册.服务本身对于html是不可
见的.在JS里面引用其功能.
除了用工厂方法意外,还可以在模组的config方法中通过 <i>$provie.factory</i> 来
注册服务.这里的Service和前面Provider段落中的不是一个概念.
</p>
</div>
</div>
<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> Controller</h3>
<div class="outline-text-3" id="text-4-2">
<p>
控制器是用于连接上下文和服务的,通过 <i>controller</i> 注册,对于html可见,通
过 <i>ng-controller</i> 来进行绑定.本身也可以定义一些行为.不需要返回什
么东西.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Directive</h2>
<div class="outline-text-2" id="text-5">
<p>
Directive提供自己定义的HTML标记,基于AngularJS HTML compiler
(<code>$compile</code>). <i>ngApp</i>, <i>ngRepeat</i> 等等就是AngularJS自带的
directive,这些directive通过 <i>ng-app</i>, <i>ng-repeat</i> 标记在HTML文件中
改变元素的行为模式.当然,这里的compile并不是真正意义上的编
译,AngularJS只是将事件监听器绑定到HTML元素上,使得这些元素可以互动.
在 <code>$compile</code> 的API中可以找到directive的各种option的详细说明.
</p>

<p>
命名方面, <code>-,:,_</code> 都可以作为分隔符, <code>ng-model</code> 和 <code>ng:model</code> 是等
效的.同时还可以在前面加上 <code>x-</code> 或者 <code>data-</code> 前缀, <code>ng-model</code> 和
<code>data-ng:model</code> 是等效的.
</p>

<p>
使用directive可以将它作为tag name, attribute name, comment 或者
class name.
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">my-dir</span>&gt;&lt;/<span style="color: #b58900;">my-dir</span>&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">span</span> <span style="color: #6c71c4;">my-dir</span>=<span style="color: #2aa198;">"exp"</span>&gt;&lt;/<span style="color: #b58900;">span</span>&gt;&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">&lt;!-- </span><span style="color: #93a1a1; font-style: italic;">directive:my-dir exp</span><span style="color: #93a1a1; font-style: italic;">--&gt;</span>&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">span</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"my-dir: exp"</span>&gt;&lt;/<span style="color: #b58900;">span</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
以上三种标记方式是等效的.当然,推荐使用tag name和attribute name.
</p>

<p>
<i>ngAttr</i> 能够绕过浏览器限制使用AngularJS的表达式设定attribute.
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">circle</span> <span style="color: #6c71c4;">cx</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">circle</span>&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">circle</span> <span style="color: #6c71c4;">ng-attr-cx</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">circle</span>&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">svg</span> <span style="color: #6c71c4;">viewBox</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">svg</span>&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">svg</span> <span style="color: #6c71c4;">ng-attr-view-box</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">svg</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>

<p>
<b>Directive返回固定的option.如果说Service(Factory)是注册名字和对应的属性,函数;Directive则是将值和函数绑定到预先定义好的选项</b>
</p>
</div>
<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> 注册Directive</h3>
<div class="outline-text-3" id="text-5-1">
<p>
module.directive 函数注册directive,它接受一个名字和一个工厂方法.方
法返回template,用其填充directive元素的内容.
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> restrict option</h3>
<div class="outline-text-3" id="text-5-2">
<p>
值为 &#8216;A&#8217; (match attribute), &#8216;E&#8217; (match element),
&#8216;C&#8217; (match class).指定这个directive被用作元素的属性,元素名或类
</p>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> link option</h3>
<div class="outline-text-3" id="text-5-3">
<p>
操作DOM.这个option需要指定一个函数,函数的参数为
scope (上下文),element (当前元素),attrs (当前元素的属性), ctrl
(array of controllers required by the directive).
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'docsTimeDirective'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'Controller'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
  $scope.format = <span style="color: #2aa198;">'M/d/yy h:mm:ss a'</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.directive<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myCurrentTime'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$interval'</span>, <span style="color: #2aa198;">'dateFilter'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$interval</span>, <span style="color: #6c71c4;">dateFilter</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #859900;">function</span> <span style="color: #b58900;">link</span><span style="color: #859900;">(</span><span style="color: #6c71c4;">scope</span>, <span style="color: #6c71c4;">element</span>, <span style="color: #6c71c4;">attrs</span>, <span style="color: #6c71c4;">ctrl</span><span style="color: #859900;">)</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">var</span> <span style="color: #6c71c4;">format</span>,&#57344;&#57345;&#57345;
        timeoutId;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">function</span> <span style="color: #b58900;">updateTime</span><span style="color: #268bd2;">()</span> <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
      element.text<span style="color: #657b83;">(</span>dateFilter<span style="color: #2aa198;">(</span><span style="color: #859900;">new</span> <span style="color: #268bd2;">Date</span><span style="color: #b58900;">()</span>, format<span style="color: #2aa198;">)</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">}</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    scope.$watch<span style="color: #268bd2;">(</span>attrs.myCurrentTime, <span style="color: #859900;">function</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">value</span><span style="color: #657b83;">)</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
      format = value;&#57344;&#57345;&#57345;
      updateTime<span style="color: #2aa198;">()</span>;&#57344;&#57345;&#57345;
    <span style="color: #657b83;">}</span><span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    element.on<span style="color: #268bd2;">(</span><span style="color: #2aa198;">'$destroy'</span>, <span style="color: #859900;">function</span><span style="color: #657b83;">()</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
      $interval.cancel<span style="color: #2aa198;">(</span>timeoutId<span style="color: #2aa198;">)</span>;&#57344;&#57345;&#57345;
    <span style="color: #657b83;">}</span><span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">start the UI update process; save the timeoutId for canceling</span>&#57344;&#57345;&#57345;
    timeoutId = $interval<span style="color: #268bd2;">(</span><span style="color: #859900;">function</span><span style="color: #657b83;">()</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
      updateTime<span style="color: #2aa198;">()</span>; <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">update DOM</span>&#57344;&#57345;&#57345;
    <span style="color: #657b83;">}</span>, 1000<span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
  <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #859900;">return</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
    link: link&#57344;&#57345;&#57345;
  <span style="color: #859900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
设定函数 <i>updateTime</i> 直接操纵元素内容,通过 <i>$watch</i> 将元素中的属
性变动跟操作函数绑定在一起. 通过 <i>$interval</i> 来实现自动读秒更新时
间. 绑定 <i>$destroy</i> 来终止 <i>$interval</i> 读秒.
</p>
</div>
</div>

<div id="outline-container-sec-5-4" class="outline-3">
<h3 id="sec-5-4"><span class="section-number-3">5.4</span> isolate scope</h3>
<div class="outline-text-3" id="text-5-4">
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'docsIsolateScopeDirective'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'Controller'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
  $scope.naomi = <span style="color: #859900;">{</span> name: <span style="color: #2aa198;">'Naomi'</span>, address: <span style="color: #2aa198;">'1600 Amphitheatre'</span> <span style="color: #859900;">}</span>;&#57344;&#57345;&#57345;
  $scope.igor = <span style="color: #859900;">{</span> name: <span style="color: #2aa198;">'Igor'</span>, address: <span style="color: #2aa198;">'123 Somewhere'</span> <span style="color: #859900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.directive<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myCustomer'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">()</span> <span style="color: #2aa198;">{</span>&#57344;&#57345;&#57345;
  <span style="color: #859900;">return</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    restrict: <span style="color: #2aa198;">'E'</span>,&#57344;&#57345;&#57345;
    scope: <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      customerInfo: <span style="color: #2aa198;">'=info'</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>,&#57344;&#57345;&#57345;
    templateUrl: <span style="color: #2aa198;">'my-customer-iso.html'</span>&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">div</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"Controller"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">my-customer</span> <span style="color: #6c71c4;">info</span>=<span style="color: #2aa198;">"naomi"</span>&gt;&lt;/<span style="color: #b58900;">my-customer</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">hr</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">my-customer</span> <span style="color: #6c71c4;">info</span>=<span style="color: #2aa198;">"igor"</span>&gt;&lt;/<span style="color: #b58900;">my-customer</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">div</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
controller里面绑定了 <i>naomi</i> 和 <i>ingor</i> 的值,html里面将directive
元素中的 <i>info</i> 绑定为 <i>naomi</i> 或 <i>ingor</i>. directive里面定义独立
上下文,将 <i>customerInfo</i> 绑定到元素里的
<i>info</i>. my-customer-iso.html 里面引用 customerInfo 的内容. 如果要
引用 <code>&lt;div bind-to-this="thing"&gt;</code>,
在directive里面应该用
<code>=bindToThis</code>.如果isolate scope里的
属性名跟directive标签中的一样,则可以缩写为 <code>XXX:
'='</code>.
<b>注意:如同之前提到过的,isolate scope没有继承高级上下文的内容,在这
里面调用高级上下文中的变量,只能是空</b>
<b>template里面或者templateUrl引用的html里面的内容继承的是directive
的上下文</b>
</p>
</div>
</div>

<div id="outline-container-sec-5-5" class="outline-3">
<h3 id="sec-5-5"><span class="section-number-3">5.5</span> <i>transclude</i></h3>
<div class="outline-text-3" id="text-5-5">
<p>
给予外部上下文访问能力.同时也意味着之前isolate scope
被遮盖了,无法访问.
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'docsIsoFnBindExample'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'Controller'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #2aa198;">'$timeout'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span>, <span style="color: #6c71c4;">$timeout</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
  $scope.name = <span style="color: #2aa198;">'Tobias'</span>;&#57344;&#57345;&#57345;
  $scope.hideDialog = <span style="color: #859900;">function</span> <span style="color: #859900;">()</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
    $scope.dialogIsHidden = <span style="color: #268bd2;">true</span>;&#57344;&#57345;&#57345;
    $timeout<span style="color: #268bd2;">(</span><span style="color: #859900;">function</span> <span style="color: #657b83;">()</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
      $scope.dialogIsHidden = <span style="color: #268bd2;">false</span>;&#57344;&#57345;&#57345;
    <span style="color: #657b83;">}</span>, 2000<span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
  <span style="color: #859900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.directive<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myDialog'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">()</span> <span style="color: #2aa198;">{</span>&#57344;&#57345;&#57345;
  <span style="color: #859900;">return</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    restrict: <span style="color: #2aa198;">'E'</span>,&#57344;&#57345;&#57345;
    transclude: <span style="color: #268bd2;">true</span>,&#57344;&#57345;&#57345;
    scope: <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      <span style="color: #2aa198;">'close'</span>: <span style="color: #2aa198;">'&amp;onClose'</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>,&#57344;&#57345;&#57345;
    templateUrl: <span style="color: #2aa198;">'&lt;div class="alert"&gt;&lt;a href class="close" ng-click="close()"&gt;&amp;times;&lt;/a&gt;&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;'</span>&#57344;&#57345;
  <span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">div</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"Controller"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">my-dialog</span> <span style="color: #6c71c4;">ng-hide</span>=<span style="color: #2aa198;">"dialogIsHidden"</span> <span style="color: #6c71c4;">on-close</span>=<span style="color: #2aa198;">"hideDialog()"</span>&gt;&#57344;&#57345;&#57345;
    Check out the contents, !&#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">my-dialog</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">div</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
点击动作为<code>ng-click="close()"</code>,而
<code>close</code> 动作被绑定到 <code>&amp;onClose</code> 这个directive. <code>on-close</code> 又在
html里面绑定到 <code>hideDialog</code> 函数上. 这个示例中显示了如何将函数表
达式传递给directive,让directive在一定时候选择执行这个函数.scope中
读取值用&#8217;@XX&#8217;,读取表达式结果用&#8217;=XX&#8217;,读取表达式但不执行用&#8217;&amp;XX&#8217;.
</p>
</div>
</div>

<div id="outline-container-sec-5-6" class="outline-3">
<h3 id="sec-5-6"><span class="section-number-3">5.6</span> scope</h3>
<div class="outline-text-3" id="text-5-6">
<p>
不管是template还是templateUrl都是在directive的上下文下.当没有
isolate scope的时候,直接访问外部上下文.有isolate scope的时候,只能
访问isolate scope.这个时候html里面元素的内容,比如
<code>&lt;AA&gt;blabla&lt;/AA&gt;</code> 里面的 <i>blabla</i> 是被忽略/覆盖的.
当在template中加入一个含有transclude的元素的时候,html里面的
<i>blabla</i> 会被显示在这个元素之中,而这个含有transclude的元素的内容
却不会被显示,同时html里面的表达式无法访问isolate scope.
</p>
<div class="org-src-container">

<pre class="src src-javascript">...&#57344;&#57345;&#57345;
<span style="color: #859900;">return</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
    template: &lt;div&gt;CONTENT IN JAVASCRIPT <span style="color: #2aa198;">(</span>DIRECTIVE SCOPE <span style="color: #b58900;">(</span>OUTER/ISOLATE SCOPE<span style="color: #b58900;">)</span><span style="color: #2aa198;">)</span>&lt;/div&gt;&lt;div ng-transclude&gt;CONTENT FROM HTML <span style="color: #2aa198;">(</span>OUTER SCOPE<span style="color: #2aa198;">)</span>&lt;/div&gt;&#57344;&#57345;
<span style="color: #657b83;">}</span>&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5-7" class="outline-3">
<h3 id="sec-5-7"><span class="section-number-3">5.7</span> controller in directive.</h3>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Filters</h2>
<div class="outline-text-2" id="text-6">
<p>
在html里面用的时候 <code></code>
在JS里面使用一个叫做 filter 的过滤器
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'FilterInControllerModule'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>.&#57344;&#57345;&#57345;
controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'FilterController'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'filterFilter'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">filterFilter</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
  <span style="color: #268bd2;">this</span>.array = <span style="color: #859900;">[</span>&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Tobias'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Jeff'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Brian'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Igor'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'James'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Brad'</span><span style="color: #268bd2;">}</span>&#57344;&#57345;&#57345;
  <span style="color: #859900;">]</span>;&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">this</span>.filteredArray = filterFilter<span style="color: #859900;">(</span><span style="color: #268bd2;">this</span>.array, <span style="color: #2aa198;">'a'</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
创建过滤器
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myReverseFilterApp'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.filter<span style="color: #657b83;">(</span><span style="color: #2aa198;">'reverse'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">()</span> <span style="color: #2aa198;">{</span>&#57344;&#57345;&#57345;
  <span style="color: #859900;">return</span> <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">input</span>, <span style="color: #6c71c4;">uppercase</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    input = input || <span style="color: #2aa198;">''</span>;&#57344;&#57345;&#57345;
    <span style="color: #859900;">var</span> <span style="color: #6c71c4;">out</span> = <span style="color: #2aa198;">""</span>;&#57344;&#57345;&#57345;
    <span style="color: #859900;">for</span> <span style="color: #859900;">(</span><span style="color: #859900;">var</span> <span style="color: #6c71c4;">i</span> = 0; i &lt; input.length; i++<span style="color: #859900;">)</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      out = input.charAt<span style="color: #268bd2;">(</span>i<span style="color: #268bd2;">)</span> + out;&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">conditional based on optional argument</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">if</span> <span style="color: #859900;">(</span>uppercase<span style="color: #859900;">)</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      out = out.toUpperCase<span style="color: #268bd2;">()</span>;&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> out;&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>$filter</code> 服务通过名字调用相应的过滤器.
</p>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Forms</h2>
</div>
<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Expressions</h2>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> HTML Compiler</h2>
</div>
<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> Security</h2>
</div>
<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> i18n and l10n</h2>
</div>
<div id="outline-container-sec-12" class="outline-2">
<h2 id="sec-12"><span class="section-number-2">12</span> Accessibility</h2>
</div>
<div id="outline-container-sec-13" class="outline-2">
<h2 id="sec-13"><span class="section-number-2">13</span> Bootstrap</h2>
</div>
<div id="outline-container-sec-14" class="outline-2">
<h2 id="sec-14"><span class="section-number-2">14</span> Running in Production</h2>
</div>
<div id="outline-container-sec-15" class="outline-2">
<h2 id="sec-15"><span class="section-number-2">15</span> Animations</h2>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Tutorial 入门教程学习笔记]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-12-24-angularjs-tutorial-.html"/>
    <updated>2014-12-24T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/angularjs-tutorial-</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 01和02,静态模板和AngularJS模板</a></li>
<li><a href="#sec-2">2. 03 迭代器</a></li>
<li><a href="#sec-3">3. 04双向绑定</a></li>
<li><a href="#sec-4">4. 05XHR和依赖注入</a></li>
<li><a href="#sec-5">5. 06链接与图片模板</a></li>
<li><a href="#sec-6">6. 07路由与多视图 &amp; 08更多模板</a></li>
<li><a href="#sec-7">7. 09过滤器</a></li>
<li><a href="#sec-8">8. 10事件</a></li>
<li><a href="#sec-9">9. 11Rest和定制服务</a></li>
<li><a href="#sec-10">10. 12 Animations</a></li>
</ul>
</div>
</div>
<p>
学习<a href="http://angularjs.cn/T006">AngularJS入门教程</a>, <a href="https://docs.angularjs.org/tutorial">英文版</a>
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-12-24-angularjs-tutorial-.html"><span class="section-number-2">1</span> 01和02,静态模板和AngularJS模板</a></h2>
<div class="outline-text-2" id="text-1">
<p>
在HTML里面用np-app来定义Angular的上下文,可以用
<code>ng-app="AAA"</code> 来制定一个名字空间.JS中
通过这个名字来获取HTML里的上下文 <code>var AAA = angular.module('AAA',
   []);</code>.
</p>

<p>
在HTML中Angular的范围内,用
<code>ng-controller="BBB"</code>标记一个div,在里
面用一些Angular命令(ng-repeat)和表达式设定显示方式.在JS里面用
<code>AAA.controller('BBB',function ...)</code> 给Angular表达式中的域赋值.
</p>

<p>
<i>AAA</i> 中的 <code>$scope$</code> 是AAA的根作用域,控制器的作用域则在 <i>BBB</i> 之中.也
就是说,如果在AAA下面有多个 <i>controller</i>, <i>controller X</i> 的数据绑定
在 <i>controller Y</i> 下是无效的. <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope">AngularJS作用域文档</a>.
</p>

<p>
略:AngularJS的开发者倾向于使用 <i>Jasmine</i> 行为驱动开发(BBD)框架进行
测试.
</p>

<p>
<i><b>写在后面,对angular.module是所有JS中创建,注册和获取模组的地方.HTML里
面通过ng-app=&#8221;AA&#8221;来绑定模组AA的上下文</b></i>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 03 迭代器</h2>
<div class="outline-text-2" id="text-2">
<p>
建立输入表单 <code>&lt;input
ng-model="query"&gt;</code> ,修改 <code>ng-repeat</code> 为
<code>&lt;li ng-repeat="x in
list|filter:query"&gt;</code>.只要在输入框里输入文本,就会自动
地修改列表,只显示包含这个文本的项目.这代表两点:1. 数据绑定同名变量
query,值的同步是实时的; 2.filter过滤器,生成新数组,自动更新视图.
</p>

<p>
略:Angular端到端测试.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 04双向绑定</h2>
<div class="outline-text-2" id="text-3">
<p>
在HTML里面添加选择器
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">select</span> <span style="color: #6c71c4;">ng-model</span>=<span style="color: #2aa198;">"orderProp"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">option</span> <span style="color: #6c71c4;">value</span>=<span style="color: #2aa198;">"name"</span>&gt;Alphabetical&lt;/<span style="color: #b58900;">option</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">option</span> <span style="color: #6c71c4;">value</span>=<span style="color: #2aa198;">"age"</span>&gt;Newest&lt;/<span style="color: #b58900;">option</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">select</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
同时在迭代器中加入条件
<code>&lt;li ng-repeat="phone in phones | filter:query |
orderBy:orderProp"&gt;</code>
</p>

<p>
JS中给每个数据加上 <i>age</i> 这个属性,同时设定
<code>$scope.orderProp = 'age'</code>设定选择器
的默认值.
</p>

<p>
<code>select</code> 的元素和 <code>orderProp</code> 之间建立了双向绑定.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 05XHR和依赖注入</h2>
<div class="outline-text-2" id="text-4">
<p>
通过 <code>$http.get(AA/BB.json)</code> 来读取json文件. <i>$http</i> 是AngularJS提
供的内建服务,通过依赖注入DI子系统.
</p>
<div class="org-src-container">

<pre class="src src-javascript">phonecatApp.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'PhoneListCtrl'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #2aa198;">'$http'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span>, <span style="color: #6c71c4;">$http</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
    $http.get<span style="color: #859900;">(</span><span style="color: #2aa198;">'phones/phones.json'</span><span style="color: #859900;">)</span>.success<span style="color: #859900;">(</span><span style="color: #859900;">function</span><span style="color: #268bd2;">(</span><span style="color: #6c71c4;">data</span><span style="color: #268bd2;">)</span> <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
        $scope.phones = data;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 06链接与图片模板</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">ul</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"phones"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">li</span> <span style="color: #6c71c4;">ng-repeat</span>=<span style="color: #2aa198;">"phone in phones | filter:query | orderBy:orderProp"</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"thumbnail"</span>&gt;&#57344;&#57345;
    &lt;<span style="color: #b58900;">a</span> <span style="color: #6c71c4;">href</span>=<span style="color: #2aa198;">"#/phones/"</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"thumb"</span>&gt;&lt;<span style="color: #b58900;">img</span> <span style="color: #6c71c4;">ng-src</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">a</span>&gt;&#57344;&#57345;
    &lt;<span style="color: #b58900;">a</span> <span style="color: #6c71c4;">href</span>=<span style="color: #2aa198;">"#/phones/"</span>&gt;&lt;/<span style="color: #b58900;">a</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">p</span>&gt;&lt;/<span style="color: #b58900;">p</span>&gt;&#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">li</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 07路由与多视图 &amp; 08更多模板</h2>
<div class="outline-text-2" id="text-6">
<p>
用 <code>$routeProvider</code> 重定向url,把某个url路径定向到某个HTML模板上去,
并指定相对应的controller. <i>index.html</i> 中定义一个域,加载所有JS文件.加
载的 <i>app.js</i> 设定重定向规则.
</p>
<div class="org-src-container">

<pre class="src src-javascript">phonecatApp.config<span style="color: #657b83;">(</span><span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$routeProvider'</span>,&#57344;&#57345;&#57345;
  <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$routeProvider</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    $routeProvider.&#57344;&#57345;&#57345;
      when<span style="color: #859900;">(</span><span style="color: #2aa198;">'/phones'</span>, <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
        templateUrl: <span style="color: #2aa198;">'partials/phone-list.html'</span>,&#57344;&#57345;&#57345;
        controller: <span style="color: #2aa198;">'PhoneListCtrl'</span>&#57344;&#57345;&#57345;
      <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>.&#57344;&#57345;&#57345;
      when<span style="color: #859900;">(</span><span style="color: #2aa198;">'/phones/:phoneId'</span>, <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
        templateUrl: <span style="color: #2aa198;">'partials/phone-detail.html'</span>,&#57344;&#57345;&#57345;
        controller: <span style="color: #2aa198;">'PhoneDetailCtrl'</span>&#57344;&#57345;&#57345;
      <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>.&#57344;&#57345;&#57345;
      otherwise<span style="color: #859900;">(</span><span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
        redirectTo: <span style="color: #2aa198;">'/phones'</span>&#57344;&#57345;&#57345;
      <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>:phoneId</code> 是从将URL路径的对应部分作为变量.这个变量通过
<code>$routeParams</code> 来访问.
</p>

<p>
最后,在index.html里面加上 <code>&lt;div ng-view&gt;&lt;/div&gt;</code> 来为当前路由把对应
视图加上去.
</p>

<p>
<i>08更多模板</i> 之中用 <i>$http</i> 加载不同的json文件来根据phoneId生成每
部手机的细节说明网页.
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 09过滤器</h2>
<div class="outline-text-2" id="text-7">
<p>
建立自己的 <i>filter FF</i>,实现更复杂的规则,然后像之前使用 <code>| filter:query</code>
一样用类似pipe的语法把输出传给自己的filter <code>| FF</code>.filter并不限定在
<i>ng-repeat</i> 中使用.
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'phonecatFilters'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>.filter<span style="color: #657b83;">(</span><span style="color: #2aa198;">'checkmark'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">()</span> <span style="color: #2aa198;">{</span>&#57345;
  <span style="color: #859900;">return</span> <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">input</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> input ? <span style="color: #2aa198;">'</span><span style="color: #6c71c4;">\u</span><span style="color: #2aa198;">2713'</span> : <span style="color: #2aa198;">'</span><span style="color: #6c71c4;">\u</span><span style="color: #2aa198;">2718'</span>;&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>

<p>
<a href="http://code.angularjs.org/1.1.0/docs/api/ng.$filter">AngularJS内置过滤器</a> <i>uppercase</i>, <i>json</i>, <i>date</i>,
<i>date:&#8221;MM/dd/yyy@ h:mma&#8221;</i>.
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> 10事件</h2>
<div class="outline-text-2" id="text-8">
<p>
通过JS在上下文中定义函数,通过 <code>ng-click</code> 来设定点击事件,调用函数.
</p>
<div class="org-src-container">

<pre class="src src-javascript">phonecatControllers.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'PhoneDetailCtrl'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #2aa198;">'$routeParams'</span>, <span style="color: #2aa198;">'$http'</span>,&#57344;&#57345;
  <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span>, <span style="color: #6c71c4;">$routeParams</span>, <span style="color: #6c71c4;">$http</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    $http.get<span style="color: #859900;">(</span><span style="color: #2aa198;">'phones/'</span> + $routeParams.phoneId + <span style="color: #2aa198;">'.json'</span><span style="color: #859900;">)</span>.success<span style="color: #859900;">(</span><span style="color: #859900;">function</span><span style="color: #268bd2;">(</span><span style="color: #6c71c4;">data</span><span style="color: #268bd2;">)</span> <span style="color: #268bd2;">{</span>&#57344;&#57345;
      $scope.phone = data;&#57344;&#57345;&#57345;
      $scope.mainImageUrl = data.images<span style="color: #657b83;">[</span>0<span style="color: #657b83;">]</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    $scope.setImage = <span style="color: #859900;">function</span><span style="color: #859900;">(</span><span style="color: #6c71c4;">imageUrl</span><span style="color: #859900;">)</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      $scope.mainImageUrl = imageUrl;&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>$scope.setImage</code> 就是绑定的函数.
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">img</span> <span style="color: #6c71c4;">ng-src</span>=<span style="color: #2aa198;">""</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"phone"</span>&gt;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
...&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">ul</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"phone-thumbs"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">li</span> <span style="color: #6c71c4;">ng-repeat</span>=<span style="color: #2aa198;">"img in phone.images"</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">img</span> <span style="color: #6c71c4;">ng-src</span>=<span style="color: #2aa198;">""</span> <span style="color: #6c71c4;">ng-click</span>=<span style="color: #2aa198;">"setImage(img)"</span>&gt;&#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">li</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
点击图片的时候调用函数,把 <code>mainImageUrl</code> 的值设定为当前图片.
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> 11Rest和定制服务</h2>
<div class="outline-text-2" id="text-9">
<p>
依赖为 <i>angular-resource/angular-resource.js</i>.一般我们的JS相应功能
命名为 <i>XXXService</i>.首先注册 <i>Service</i> 模块.
</p>
<div class="org-src-container">

<pre class="src src-javascript"><span style="color: #859900;">var</span> <span style="color: #6c71c4;">phonecatServices</span> = angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'phonecatServices'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'ngResource'</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;
&#57344;&#57345;&#57345;
phonecatServices.factory<span style="color: #657b83;">(</span><span style="color: #2aa198;">'Phone'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$resource'</span>,&#57344;&#57345;&#57345;
  <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$resource</span><span style="color: #b58900;">){</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> $resource<span style="color: #859900;">(</span><span style="color: #2aa198;">'phones/:phoneId.json'</span>, <span style="color: #268bd2;">{}</span>, <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
      query: <span style="color: #657b83;">{</span>method:<span style="color: #2aa198;">'GET'</span>, params:<span style="color: #2aa198;">{</span>phoneId:<span style="color: #2aa198;">'phones'</span><span style="color: #2aa198;">}</span>, isArray:<span style="color: #268bd2;">true</span><span style="color: #657b83;">}</span>&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
建立一个 <i>Phone</i> 工厂,用 <i>$resource</i> 来取得数据.相应的controller改
为<code>$scope.phone =
Phone.get({phoneId:$routeParams.phoneId})</code>和
<code>$scope.phones = Phone.query()</code>.
</p>

<p>
<code>query</code> 方法是自己声明和定义的 <code>query: {method:'GET', params:{phoneId:'phones'}, isArray:true}</code>.
</p>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> 12 Animations</h2>
<div class="outline-text-2" id="text-10">
<p>
TODO
</p>

<p>
更多的教程 <a href="http://angularjs.cn/tag/AngularJS_%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97">开发指南</a> 和 <a href="http://docs.angularjs.org/cookbook/index">Cookbook</a>. 推荐使用<a href="https://github.com/angular/angular-seed">AngularJS种子项目</a>来引导开发新项目
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[背景知识]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-12-22-.html"/>
    <updated>2014-12-22T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. JSP</a>
<ul>
<li><a href="#sec-1-1">1.1. Servelet</a></li>
<li><a href="#sec-1-2">1.2. CGI 和 WSGI</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Tomcat + Apache</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-12-22-.html"><span class="section-number-2">1</span> JSP</a></h2>
<div class="outline-text-2" id="text-1">
<p>
JavaServer Page(JSP)是一种动态网页技术标准.在HTML中插入Java片段
(Scriptlet),以.jsp为文件后缀.在接到客户端请求的时候,服务器根据XXX.jsp文
件生成XXXServlet.java文件,然后编译运行,最后返回结果给客户端.
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Servelet</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Servelet是一种 <i>独立于平台和协议</i> 的 <i>服务器端</i> 的Java应用程序,生
成动态页面.为HTTP客户端跟HTTP服务器程序的中间层.好处是快(比CGI快),
每个用户请求被激活成程序中的一个线程.Servlet是纯粹的Java,jsp介于
html和java质检,有助于美工人员来设计界面.
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> CGI 和 WSGI</h3>
<div class="outline-text-3" id="text-1-2">
<p>
既然上一节提到了CGI,这里稍微展开一下.Common Gateway Interface
(CGI)是一种利用程序的标准输入,输出流来完成HTTP通信的方式.HTTP本身
是文本协议,请求是由服务器(Apache)处理,而应用程序可能由各种语言来实
现.CGI则将这个文本协议以标准输入流的方式传递给服务器端的CGI程序.
与之类似的还有WSGI,原理类似,但是是Python专用的协议.对于实现了
<i><span class="underline"><span class="underline">call</span></span></i> 的对象,将 <i>request</i> 经过包装作为参数传入,同时也返回进过
包装的 <i>response</i>.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Tomcat + Apache</h2>
<div class="outline-text-2" id="text-2">
<p>
Apache和Tomcat都是提供服务器功能的软件.Apache可以使用
PHP,CGI,Perl,Tomcat在Apache后端提供对Java的支持.Apache+Tomcat处理
JSP的时候,Apache只是转发.Apache是Web服务器,Tomcat是应用服务器,是
Servlet容器,可以单独运行.
</p>

<p>
Tomcat是Servlet的容器,可以独立运行,也可以作为现有服务器的附加(支持
Apache,IIS,Netscape).配置Tomcat的时候选择运行模式.
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drill的Java后端]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-12-18-drilljava.html"/>
    <updated>2014-12-18T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/drilljava</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 环境与配置加载</a>
<ul>
<li><a href="#sec-1-1">1.1. 配置文件</a></li>
<li><a href="#sec-1-2">1.2. 获取配置内容</a></li>
<li><a href="#sec-1-3">1.3. 根据配置进行渲染</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 持久化</a></li>
<li><a href="#sec-3">3. 业务层</a>
<ul>
<li><a href="#sec-3-1">3.1. Controller</a>
<ul>
<li><a href="#sec-3-1-1">3.1.1. <code>AccountResource</code></a></li>
<li><a href="#sec-3-1-2">3.1.2. <code>UserResource</code></a></li>
</ul>
</li>
<li><a href="#sec-3-2">3.2. Service</a></li>
<li><a href="#sec-3-3">3.3. DTO</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Security</a>
<ul>
<li><a href="#sec-4-1">4.1. <code>SecurityContextHolder</code></a></li>
<li><a href="#sec-4-2">4.2. <code>UserDetails</code></a></li>
<li><a href="#sec-4-3">4.3. <code>GrantedAuthority</code></a></li>
<li><a href="#sec-4-4">4.4. 其它</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
Java后端负责业务逻辑,数据持久化(数据库),安全等等.目前接触到的内容有
账号注册登录管理,本地化设置等等.将整个后端当做一个应用,那么在主目录
下有一个 <code>Application.java</code> 类作为整个应用的入口.这个类最基本的应用需要
<code>@ComponentScan</code> 和 <code>@EnableAutoConfiguration</code> 两个标签来声明自动配
置和扫描组件;同时在 <code>main</code> 函数里实例化一个 <code>SpringApplication</code> 对象
并调用对象函数 <code>run()</code> 就行了. 目前的程序里还用
<code>app.setAdditionalProfiles</code> 在没有命令行参数的时候默认加载dev配置.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-12-18-drilljava.html"><span class="section-number-2">1</span> 环境与配置加载</a></h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 配置文件</h3>
<div class="outline-text-3" id="text-1-1">
<p>
<code>SpringApplication</code> 会自动搜索以下路径来寻找
<code>application.properties</code> 作为配置文件.
</p>
<ol class="org-ol">
<li>当前路径下地 <code>/config</code> 子文件夹
</li>
<li>当前路径
</li>
<li><code>classpath:/config</code>
</li>
<li><code>classpath</code>
</li>
</ol>
<p>
同时,SpringApplication还支持 <font
    color='blue'>YAML</font> 文件,即 <i>applicaiton.yml</i>.
函数 <code>SpringApplication.setAdditionalProfiles("dev")</code> 则会额外加载
<i>application-dev.yml</i> (或者 <i>application-dev.properties</i>), 而不是
<i>dev.yml</i>.
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 获取配置内容</h3>
<div class="outline-text-3" id="text-1-2">
<p>
当我们有类继承了EnvironmentAware这个接口的时候,框架会自动调用这个类
的 <code>setEnvironment</code> 方法,将一个 <code>Environment</code> 对象交给这个类的对象
从而使这个类获得配置文件中提供的参数. <code>LocaleConfiguration</code> 和
<code>MailConfiguration</code> 两个类展示了相关的编程方法.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">MailConfiguration</span> <span style="color: #859900;">implements</span> <span style="color: #268bd2;">EnvironmentAware</span> {&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">setEnvironment</span>(<span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">environment</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">this</span>.propertyResolver = <span style="color: #859900;">new</span> <span style="color: #268bd2;">RelaxedPropertyResolver</span>(environment, ENV_SPRING_MAIL);&#57344;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>

<p>
另一种方法是直接 <code>@Inject</code> 一个 <code>Environment</code> 的对象.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">MailService</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">env</span>;&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<b><font color='red'>&lt;&#x2013;这种方法跟之前所介绍的有什么区别,暂时不知道.&#x2013;&gt;</font></b>
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 根据配置进行渲染</h3>
<div class="outline-text-3" id="text-1-3">
<p>
<code>LocalResolver</code> 和 <code>Interceptor</code>. 在接受请求的时候, <code>Interceptor</code>
拦截请求中特定的参数值,并且调用 <code>LocalResolver</code> 的函数来进行相关渲
染处理.在 <code>LocaleConfiguration</code> 中,龙伟权通过定义Bean来指定特定的
<code>LocalResolver</code>, 即 <code>AngularCookieLocaleResolver</code>.
</p>

<p>
问题:
</p>
<ol class="org-ol">
<li><code>LocaleConfiguration</code> 和 <code>ThymeleafConfiguration</code> 都有方法返回
<code>MessageSource</code>, <code>MailService</code> 里面貌似引用的是
<code>LocaleConfiguration</code> 返回的对象,为什么?
</li>
</ol>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 持久化</h2>
<div class="outline-text-2" id="text-2">
<p>
对象的关联问题.Mongodb本身作为NoSql的典范,内部以文件和类似json的数
据形式来储存数据.Mongodb中一个Document可以看做关系数据库中的一行数
据,一个Repository可以看做关系数据库中的一个表(table).目前我们有三个
标记为 <code>@Document</code> 的类 <code>PersistentToken,Task,User</code> 和对应的
<code>Repository</code> 类.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 业务层</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Controller</h3>
<div class="outline-text-3" id="text-3-1">
<p>
控制器类都在org.team.drill.web下面,统一以 <i>XXXResource</i> 命名.
</p>
</div>
<div id="outline-container-sec-3-1-1" class="outline-4">
<h4 id="sec-3-1-1"><span class="section-number-4">3.1.1</span> <code>AccountResource</code></h4>
<div class="outline-text-4" id="text-3-1-1">
<ul class="org-ul">
<li>registerAccount
注册账户,接受新账户信息,验证账户,创建账户,发送激活邮件.
</li>
<li>activateAccount
激活账户,通过激活key来确定当前User.
</li>
<li>isAuthenticate
这个什么时候会用到?
<ul class="org-ul">
<li>HttpServletRequest request.getRemoteUser()
</li>
</ul>
</li>
<li>getAccount
这个貌似是浏览账户信息的时候用, 返回 <i>UserDTO</i>
</li>
<li>saveAccount
这个是修改用户信息用, email 地址必须唯一
</li>
<li>changePassword (newPassword)
这个是修改用户密码用
</li>
<li>getCurrentSession
貌似是获得所有当前用户的登录记录(多地自动登录产生多个记录)
</li>
<li>invalideSession
取消某个登录记录(已登录)
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-1-2" class="outline-4">
<h4 id="sec-3-1-2"><span class="section-number-4">3.1.2</span> <code>UserResource</code></h4>
<div class="outline-text-4" id="text-3-1-2">
<ul class="org-ul">
<li>getUser
通过String login获取user, 直接返回 <i>User</i>
</li>
</ul>

<p>
登录功能是在 <i>SecurityConfig</i> 中间接实现的.
</p>
</div>
</div>
</div>


<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Service</h3>
<div class="outline-text-3" id="text-3-2">
<p>
<i>Service</i> 里面通过 <i>SecurityContextHolder</i> 来获取当前用户.
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> DTO</h3>
<div class="outline-text-3" id="text-3-3">
<p>
位于 <i>web.dto</i> 包下面的 <code>UserDTO</code> 类型,似乎是用来作为JS交互的数据
对象?但是内容上跟 <i>domain</i> 里的 <code>User</code> 差不多,用来保证安全.在更复
杂的应用环境中有用.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Security</h2>
<div class="outline-text-2" id="text-4">
<p>
不论是Service还是Resource,都是靠 <code>SecurityUtils.getCurrentLogin()</code>
来获取当前用户的.那么问题来了,SecurityUtils如何知道当前用户是谁?
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">final</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">SecurityUtils</span> {&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #b58900;">SecurityUtils</span>() {&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #d33682;">/**</span>&#57344;&#57345;&#57345;
<span style="color: #d33682;">     * Get the login of the current user.</span>&#57344;&#57345;&#57345;
<span style="color: #d33682;">     */</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #859900;">static</span> <span style="color: #268bd2;">String</span> <span style="color: #b58900;">getCurrentLogin</span>() {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">SecurityContext</span> <span style="color: #6c71c4;">securityContext</span> = SecurityContextHolder.getContext();&#57344;&#57345;
        <span style="color: #268bd2;">Authentication</span> <span style="color: #6c71c4;">authentication</span> = securityContext.getAuthentication();&#57344;&#57345;
        <span style="color: #268bd2;">UserDetails</span> <span style="color: #6c71c4;">springSecurityUser</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">userName</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
        <span style="color: #859900;">if</span>(authentication != <span style="color: #268bd2;">null</span>) {&#57344;&#57345;&#57345;
            <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> UserDetails) {&#57344;&#57345;
                springSecurityUser = (<span style="color: #268bd2;">UserDetails</span>) authentication.getPrincipal();&#57344;&#57345;
                userName = springSecurityUser.getUsername();&#57344;&#57345;&#57345;
            } <span style="color: #859900;">else</span> <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> String) {&#57344;&#57345;
                userName = (<span style="color: #268bd2;">String</span>) authentication.getPrincipal();&#57344;&#57345;&#57345;
            }&#57344;&#57345;&#57345;
        }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
        <span style="color: #859900;">return</span> userName;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> <code>SecurityContextHolder</code></h3>
<div class="outline-text-3" id="text-4-1">
<p>
包含安全上下文信息,并且默认为/ThreadLocal/,即对于一个线程采用一
个统一的安全上下文信息.同时,=SecurityContextHolder= 中还储存了当前
与App进行交互的主体(<i>principal</i>)的详情,用 <code>Authentication</code> 对象来表
示.上面的代码示例中体现的是获取当前用户信息的标准用法.
</p>

<p>
<b><font color='red'>&lt;&#x2013;spring应用内部线程到底是如何管理
的?&#x2013;&gt;</font></b>
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> <code>UserDetails</code></h3>
<div class="outline-text-3" id="text-4-2">
<p>
在以上代码片段中我们可以看到一个特殊的类 <code>UserDetails</code>,在获取当前主
体的时候,返回的可能是一个 <i>String</i> 或者一个 <i>UserDetails</i> 的对象.那
么这个/UserDetails/到底是什么东西,为什么它的方法 <code>getUsername()</code> 刚
好能包含我们的 <code>User</code> 类所需的 <i>login</i>?
</p>

<p>
<i>UserDetails</i> 是一个接口,包含了 <code>getPassword()</code>, <code>getUsername()</code> 等
一系列方法. 在 <i>UserDetails</i> 中加入我们定义的 <i>login</i>,这是靠实现
<code>UserDetailsService</code> 接口来做到的. 这个接口只包含一个方法,这个方法
接受一个 <i>String</i> 参数,并返回一个实现了 <code>UserDetails</code> 接口的对象.目
前在org.team.drill.security包中的 <code>UserDetailsService</code> 类里面,龙伟
权实现了这个方法,并且将 <code>org.team.drill.domain.User</code> 的 <i>login</i> 包
装到实现了 <i>UserDetails</i> 接口的
<code>org.springframework.security.core.userdetails.User</code> 类中.
</p>

<p>
到这里,我试着把 <i>SecurityContextHolder</i> 到 <i>UserDetails</i> 串起来. 个
人认为,在通过
<code>SecurityContextHolder.getContext().getAuthentication().getPrincipal()</code>
来获取 <i>UserDetails</i> 的时候,spring通过调用实现了
<code>org.springframework.security.core.userdetails.UserDetailsService</code>
接口的对象的方法来尝试获取 <i>UserDetails</i>, 这个方法本身接受一个
String参数. <font color='red'>又绕回来了,这个String参数是
从哪来的?依靠http协议?还是session?</font>
因为某种原因,
<i>getPrincipal</i> 方法返回的是一个 <i>Object</i>,那么实际上给出了一种可能性,就
是通过某个实现了 <i>UserDetails</i> 的类使用额外的业务逻辑.我们可以创建
一个实现了 <i>UserDetals</i> 的类 <b>A</b>,在 <i>UserDetailsService</i> 中返回 <b>A</b>
的对象,然后将 <i>getPrincipal()</i> 返回的对象强制转换为 <b>A</b> 并调用相关
方法.当然,强制转换类型总是有风险的.
</p>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> <code>GrantedAuthority</code></h3>
<div class="outline-text-3" id="text-4-3">
<p>
<code>Authentication</code> 提供两个重要的方法,第一个是上面说过的
<i>getPrincipal</i>,另一个则是 <i>getAuthorities</i> .它返回一个
<i>GrantedAuthoriy</i> 对象数组.顾名思义,这是用来管理用户权限的.在
<i>UserDetailsService</i> 里面进行加载.目前drill中加载的是
<code>SimpleGrantedAuthority</code> 数组,每个 <i>SimpleGrantedAuthority</i> 里面包
含一个字符串,代表某种权限(自定义于
<code>org.team.drill.security.Authority</code> 中).
</p>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> 其它</h3>
<div class="outline-text-3" id="text-4-4">
<p>
用 <code>random.nextBytes</code> 来产生 <i>PersistentToken</i> 的序列号,不怕重复?
虽然16位Byte确实已经很大(10亿的4次方).
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallelism]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-11-26-parallelism.html"/>
    <updated>2014-11-26T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/parallelism</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Installation</a>
<ul>
<li><a href="#sec-1-1">1.1. Local Machine</a></li>
<li><a href="#sec-1-2">1.2. Virtual Machine</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Ocatve</a>
<ul>
<li><a href="#sec-2-1">2.1. Run octave code with mpi.</a></li>
<li><a href="#sec-2-2">2.2. Programming</a></li>
<li><a href="#sec-2-3">2.3. Summary</a></li>
</ul>
</li>
<li><a href="#sec-3">3. C</a></li>
<li><a href="#sec-4">4. Performance Comparison</a></li>
</ul>
</div>
</div>
<p>
In this article, I will introduce the installation and basic use of MPI
framework through octave. Matlab is widely used in many scientific
domains as it enables the developers focus on the algorithms other
than programming skills. However, the support of parallelism computing
from Matlab is limited and expensive, especially for computing on
clusters. Currently, two parallelism frameworks are widely used: MPI
(Message Passage Interface) and MapReduce. Hadoop, which is an Java
implementation of MapReduce, does not currently support Matlab or
Octave. Therefore, I choose the MPI + Octave as a parallelism solution
for Matlab users.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-11-26-parallelism.html"><span class="section-number-2">1</span> Installation</a></h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Local Machine</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Install open-mpi.
<ul class="org-ul">
<li>On Mac OS X with homebrew, <code>brew install open-mpi</code>
</li>
<li>On Ubuntu, the direct way is install the packages via package
manager <code>sudo apt-get install openmpi-bin openmpi-common
        openmpi-checkpoint libopenmpi-dev libopenmpi-X.X</code>. However,
the OpenMPI installed through this method does not work with
the octave-mpi package due to a library linkage problem. A
fast cue is compiling and installing it manually with specific
configurations.
Download the openmpi package <a href="http://www.open-mpi.org/software/ompi/v1.8/">openmpi-1.8.3.tar.gz</a>.
<div class="org-src-container">

<pre class="src src-bash">tar xzvf openmpi-1.8.3.tar.gz
cd openmpi-1.8.3
./configure --dsiable-dlopen
make
sudo make install
</pre>
</div>
</li>
</ul>
</li>
<li>Install octave
<ul class="org-ul">
<li>On Mac OS X with homebrew
<ol class="org-ol">
<li>install XQuartz from image file downloaded from <a href="http://xquartz.macosforge.org/landing/">http://xquartz.macosforge.org/landing/</a>.
</li>
<li><code>brew tap homebrew/science</code>
</li>
<li>install gfortran <code>brew install gcc</code>
</li>
<li><code>brew install octave</code>
</li>
</ol>
</li>
<li>On Ubuntu
<code>sudo apt-get install octave</code>
</li>
</ul>
</li>
<li>Install octave mpi package
<ul class="org-ul">
<li>Inside octave
<div class="org-src-container">

<pre class="src src-octave">putenv (<span style="color: #2aa198;">"PATH"</span><span style="color: #6c71c4;">,</span> [<span style="color: #2aa198;">"path/to/mpic++/:"</span> getenv(<span style="color: #2aa198;">"PATH"</span>)]) <span style="color: #93a1a1; font-style: italic;">% optional</span>&#57344;&#57345;&#57345;
pkg install <span style="color: #6c71c4;">-</span>forge mpi      <span style="color: #93a1a1; font-style: italic;">% install mpi from internet or</span>&#57344;&#57345;&#57345;
pkg install PATH<span style="color: #6c71c4;">/</span>TO<span style="color: #6c71c4;">/</span>PACKAGE <span style="color: #93a1a1; font-style: italic;">% install mpi from downloaded package</span>&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>Through package manager in Ubuntu (deprecated), run <code>apt-get
        install octave-openmpi-ext</code>. As the pakcage manager could
automatically install the OpenMPI package, which does not work
with the octave-mpi actually, we suggest do NOT use this
method.
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Virtual Machine</h3>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Ocatve</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Run octave code with mpi.</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>First way is run code from shell/terminal/ssh.
<div class="org-src-container">

<pre class="src src-bash">mpirun [OPTIONS] octave -q --eval '[octave code, function or script name]'
</pre>
</div>
</li>
<li>Second way is call the system command inside octave.
<div class="org-src-container">

<pre class="src src-octave">system (<span style="color: #2aa198;">"mpirun octave -q --eval '[octave code, function or script name]"</span>)<span style="color: #6c71c4;">;</span>&#57344;&#57345;
</pre>
</div>
</li>
<li>Octave mpi package contains some simple examples to show you
how to write the octave code that enables the parallelism via
MPI. These codes are in two possible locations if you install
the octave mpi package globally:
<ul class="org-ul">
<li><code>/usr/share/doc/octave-mpi/examples/</code>
</li>
<li><code>/usr/share/octave/packages/mpi-1.2.0/</code>
</li>
</ul>
<p>
If you install the package under user&#8217;s home folder, you can
find exmaple codes under <code>$HOME/octave/packages/mpi-1.2.0/</code>. To
test the example inside octave, run command
<code>[info res] = system ("mpirun octave -q --eval 'pkg load mpi; helloworld
       ()'");</code>. <b>The displayed string of the funciton, e.g. <code>helloworld()</code>, will return by this invokation. Therefore your can embed it in another
serial computing octave script context (use str2num()).</b>
</p>
</li>
<li>Frequently used mpirun options: <code>--hostfile</code> indicate the file
that contains the hostnames of cluster; <code>-np</code> number of
processes to run.
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Programming</h3>
<div class="outline-text-3" id="text-2-2">
<p>
The interface provided by octave mpi package is a subset of all
MPI functions.
</p>

<p>
Example 1, basic example about initializing the environment, send
and receive messages/variables. Basically, these functions are
enough to create the parallelism program.
</p>
<div class="org-src-container">

<pre class="src src-octave">MPI_Init()<span style="color: #6c71c4;">;</span>&#57344;&#57345;&#57345;
communicator <span style="color: #6c71c4;">=</span> MPI_Comm_Load(<span style="color: #2aa198;">"a label string"</span>) <span style="color: #93a1a1; font-style: italic;">% one can use multiple communicators indicated by different label</span>&#57344;&#57345;
my_rank <span style="color: #6c71c4;">=</span> MPI_Comm_rank(communicator) <span style="color: #93a1a1; font-style: italic;">% rank is the indicator(id) of current process</span>&#57344;&#57345;
p <span style="color: #6c71c4;">=</span> MPI_Comm_size(CW) <span style="color: #93a1a1; font-style: italic;">% the size of a communicator is the number of processes handled by the communicator</span>&#57344;&#57345;
[info] <span style="color: #6c71c4;">=</span> MPI_Send(value<span style="color: #6c71c4;">,</span> ranks<span style="color: #6c71c4;">,</span> TAG<span style="color: #6c71c4;">,</span> communicator)<span style="color: #6c71c4;">;</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">value:  a octave variable</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">ranks:  a vector that contains the id of destination processes, can be an integer</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">TAG:    an integer to identify the message (when there are many messages sent in the same context)</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">info:   an integer that indicates the success of failure state of process</span>&#57344;&#57345;
[value<span style="color: #6c71c4;">,</span> info] <span style="color: #6c71c4;">=</span> MPI_Recv(source<span style="color: #6c71c4;">,</span> TAG<span style="color: #6c71c4;">,</span> communicator)&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">source: the id the process that send this message</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">%         </span><span style="color: #93a1a1; font-style: italic;">receive from any process if source is -1</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">%         </span><span style="color: #93a1a1; font-style: italic;">process starts from 0 and process 0 is usually used as master process</span>&#57344;&#57345;
<span style="color: #93a1a1; font-style: italic;">% </span><span style="color: #93a1a1; font-style: italic;">value:  received variable</span>&#57344;&#57345;&#57345;
MPI_Finalize()&#57344;&#57345;&#57345;
</pre>
</div>

<p>
Process sequence control functions:
</p>
<ul class="org-ul">
<li>Function <code>MPI_Barrier(communicator)</code> will block the process until
all the processes reached this location.
</li>

<li>Function <code>MPI_Probe(RANK, TAG, COMM)</code> test if process [RANK] send
a message with TAG from communicator COMM. Block the process if
no message arrive.
</li>

<li>Function <code>MPI_Iprobe(RANK, TAG, COMM)</code> test if process [RANK] send
a message with TAG from communicator COMM. NOT block the process
if no message arrive.
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Summary</h3>
<div class="outline-text-3" id="text-2-3">
<p>
If you run the octave with MPI, you will find multiple octave
processes in the process monitor. Once you run your MPI program,
multiple clones of your program are craeted. Each of them is a
full clone, <i>which means the content before <code>MPI_Init</code> or
<code>MPI_Finalize</code> will be run in each process</i>. You can test it by
putting some random function before <code>MPI_Init</code> and see the
result. So, if you have a complex application and only want to use
MPI to accelerate a specific function, you should call the MPI
program as a independent application and get the result in
indirect way. For example, you can write the result into a file
and read it in your main application. But that would require a
distributed file system, which is out of the range of this article.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> C</h2>
<div class="outline-text-2" id="text-3">
<p>
The MPI interface for C language is much more powerful than that
for octave. But basically, it follows the same procedure:
initializing MPI environment (world), communication with process id
and message tag. I recommend the tutorial from
[<a href="https://computing.llnl.gov/tutorials/mpi/">https://computing.llnl.gov/tutorials/mpi/</a>] as a learning
material. It provides many exercises for basic features of MPI in
C.
</p>

<p>
Compile C source file using the command below, for more options,
please check the document of the version you installed.
</p>
<div class="org-src-container">

<pre class="src src-bash">mpicc [YOUR_C_SOURCE_FILE]
</pre>
</div>

<ul class="org-ul">
<li>Point-to-point communication
<ul class="org-ul">
<li>blocked
<code>MPI_Send(buffer,count,type,dest,tag,comm)</code>
<code>MPI_Recv(buffer,count,type,source,tag,comm, status)</code>
<ul class="org-ul">
<li><b>buffer</b>
Buffer is the variable you want to send or you want to
receive the data. In C, you have to pass the buffer by
reference <code>&amp;var</code>.
</li>
<li><b>count</b>
Count is the number of data element to be sent since with the
address/reference you send, the reciever can read an array.
</li>
<li><b>type</b>
MPI defiend series of data types for each C type. These types
are used for transfering between processes (on network for
clusters).
</li>
<li><b>dest/source</b>
The id (rank) of process you want to send or you want to
receive from.
</li>
<li><b>tag</b>
Tag is used to identify the data you received. Since MPI is
an interface that can be used to transfer data through
network, it is possible that the data you send later arrives
earlier. If the processes of your MPI application have to
communicate multiple times, tag is necessary to receive the
data and execute on them in correct order.
</li>
<li><b>comm</b>
The communicator or called MPI_COMM_WORLD, which is the
MPI context created at the beginning of application.
</li>
<li><b>status</b>
         Em, it is status, but I have no idea what it exactly is&#x2026;
</li>
</ul>
</li>
<li>non-blocked
<code>MPI_ISend(buffer,count,type,dest,tag,comm,request)</code>
<code>MPI_IRecv(buffer,count,type,source,tag,comm,request)</code>
First, I have to clarify the blocking/non-blocking concept in this
context. It is different to the block/non-block in multiple
thread programming. Blocking means the application will not
continue until the data in the application buffer is completely
sent out (through internet protocol). Non-blocking means the
application continue without waiting. Pay attention, it wait
until the data is <b>sent out</b>, not <b>received</b> by other
processes. And I think that is why tag is necessary in both
cases, because if the application block until data received,
the tag is not necessary and the application becomes
sequential. Besides, you cannot put receive before send because
it is blocked.

<p>
What is the benefit of non-blocking? You don&#8217;t have to wait for
the receiving of data. In the example code below, we can see
that processes receive data before sending them.
</p>
<div class="org-src-container">

<pre class="src src-C"><span style="color: #d33682;">#include</span> <span style="color: #2aa198;">"mpi.h"</span>&#57344;&#57345;&#57345;
<span style="color: #d33682;">#include</span> <span style="color: #2aa198;">&lt;stdio.h&gt;</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #b58900;">main</span>(<span style="color: #268bd2;">int</span> <span style="color: #6c71c4;">argc</span>, <span style="color: #268bd2;">char</span> *<span style="color: #6c71c4;">argv</span>[])  {&#57344;&#57345;&#57345;
<span style="color: #268bd2;">int</span> <span style="color: #6c71c4;">numtasks</span>, <span style="color: #6c71c4;">rank</span>, <span style="color: #6c71c4;">next</span>, <span style="color: #6c71c4;">prev</span>, <span style="color: #6c71c4;">buf</span>[2], <span style="color: #6c71c4;">tag1</span>=1, <span style="color: #6c71c4;">tag2</span>=2;&#57344;&#57345;&#57345;
<span style="color: #268bd2;">MPI_Request</span> <span style="color: #6c71c4;">reqs</span>[4];&#57344;&#57345;&#57345;
<span style="color: #268bd2;">MPI_Status</span> <span style="color: #6c71c4;">stats</span>[4];&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
MPI_Init(&amp;argc,&amp;argv);&#57344;&#57345;&#57345;
MPI_Comm_size(MPI_COMM_WORLD, &amp;numtasks);&#57344;&#57345;&#57345;
MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
prev = rank-1;&#57344;&#57345;&#57345;
next = rank+1;&#57344;&#57345;&#57345;
<span style="color: #859900;">if</span> (rank == 0)  prev = numtasks - 1;&#57344;&#57345;&#57345;
<span style="color: #859900;">if</span> (rank == (numtasks - 1))  next = 0;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
MPI_Irecv(&amp;buf[0], 1, MPI_INT, prev, tag1, MPI_COMM_WORLD, &amp;reqs[0]);&#57344;&#57345;&#57345;
MPI_Irecv(&amp;buf[1], 1, MPI_INT, next, tag2, MPI_COMM_WORLD, &amp;reqs[1]);&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
MPI_Isend(&amp;rank, 1, MPI_INT, prev, tag2, MPI_COMM_WORLD, &amp;reqs[2]);&#57344;&#57345;&#57345;
MPI_Isend(&amp;rank, 1, MPI_INT, next, tag1, MPI_COMM_WORLD, &amp;reqs[3]);&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
      {  <span style="color: #859900;">do</span> some work  }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
MPI_Waitall(4, reqs, stats);&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
MPI_Finalize();&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
</ul>
</li>
<li>Collective communication
Basically, all the collective communications can be implemented
using the point-to-point communication methods.
<ul class="org-ul">
<li>MPI_Reduce
Split data to processes, gather the result as reducing
operation such as the sum of array.
</li>
<li>MPI_Scatter
       Split data from one processes to all the processes.
</li>
<li>MPI_Gather
       Gather data from all the processes to one process
</li>
<li>MPI_Barrier
       For synchronizing.
</li>
</ul>
</li>
<li>Derived data type
Though the MPI provides series of primitive types, it is also
useful to let useser to define their own data type. You can
define a variable of type and use it as the MPI type.
<ol class="org-ol">
<li>Contiguous
TODO
</li>
<li>Vector
TODO
</li>
<li>Indexed
TODO
</li>
<li>Struct
TODO
</li>
</ol>
</li>
<li>Group and communicator management
Group is an ordered set of processes, where the id(rank) of
process go from zero to N-1. Communicator encompoasses a group of
processes. Communicator that comprises all tasks is represented
by MPI_COMM_WORLD. They are the same thing for programmer.

<p>
Groups can be destroyed and created during execution. One process
can be in multiple groups.
</p>
</li>
<li>Virtual topology routine
Organize the processors in geometric way, like orginizing the
processors in a two-dimensional array.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Performance Comparison</h2>
<div class="outline-text-2" id="text-4">
<p>
<iframe
src="https://docs.google.com/spreadsheets/d/1kOLf_azmw872VHm6lmOxsPUvpD0hs-ZvbPUJDOjMBFM/pubhtml?gid=0&amp;single=true&amp;widget=true&amp;headers=false"
width="900" height="600"></iframe>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Blog Using Org-mode and Octopress]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-10-29-writing-blog-using-org-mode-and-octopress.html"/>
    <updated>2014-10-29T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/writing-blog-using-org-mode-and-octopress</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Octopress Installation</a>
<ul>
<li><a href="#sec-1-1">1.1. Installation of old version ruby with rbenv</a></li>
<li><a href="#sec-1-2">1.2. Setup the octopress</a>
<ul>
<li><a href="#sec-1-2-1">1.2.1. Copy octopress repository</a></li>
<li><a href="#sec-1-2-2">1.2.2. Install dependencies</a></li>
<li><a href="#sec-1-2-3">1.2.3. Install the default theme</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-2">2. Common usage</a></li>
<li><a href="#sec-3">3. Emacs Configurations</a>
<ul>
<li><a href="#sec-3-1">3.1. Lisp package org-jekyll</a></li>
<li><a href="#sec-3-2">3.2. Org-octopress package</a></li>
<li><a href="#sec-3-3">3.3. Conflict and Test</a></li>
<li><a href="#sec-3-4">3.4. <span class="todo TODO">TODO</span> <code>[1/4]</code></a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
After the installation  and the configuration of jekyll along with
the org-mode. I tried to find some configurations to facilitate the
creation of org files (create file with date in front of file name,
insert heads, etc.) I did not realize the existence of relative
emacs packages in elpa and asked google for solutions. My
inefficient search key-words let the google returns undesired
answer: the <b>octopress</b>. Octopress is based on the jekyll, but
provide richer blog settings. Finally, I migrated to octopress and
use it to manager my github pages.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-10-29-writing-blog-using-org-mode-and-octopress.html"><span class="section-number-2">1</span> Octopress Installation</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Installation of octopress is little complex since it requires low
version ruby.
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Installation of old version ruby with rbenv</h3>
<div class="outline-text-3" id="text-1-1">
<p>
You can following the instructions on the <a href="http://octopress.org/docs/setup/rbenv">official manual</a>.
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #6c71c4;">cd</span> <span style="color: #93a1a1; font-style: italic;"># </span><span style="color: #93a1a1; font-style: italic;">go to home</span>&#57344;&#57345;&#57345;
git clone git://github.com/sstephenson/rbenv.git .rbenv&#57344;&#57345;&#57345;
git clone git://github.com/sstephenson/ruby-build.git .rbenv/plugins/ruby-build&#57344;&#57345;
</pre>
</div>
<p>
Add two lines into the end of shell profile (.zshrc in my case).
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #6c71c4;">export</span> <span style="color: #6c71c4;">PATH</span>=$<span style="color: #6c71c4;">HOME</span>/.rbenv/bin:$<span style="color: #6c71c4;">PATH</span>&#57344;&#57345;&#57345;
<span style="color: #6c71c4;">eval</span> <span style="color: #2aa198;">"$(rbenv init -)"</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Then reload the profile by <code>source ~/.zshrc</code> or resume the
terminal.
The installation of rbenv and ruby-build can be replaced by
</p>
<div class="org-src-container">

<pre class="src src-sh">brew update&#57344;&#57345;&#57345;
brew install rbenv&#57344;&#57345;&#57345;
brew install ruby-build&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Attention: the shell profile must be modified with both
installation methods.
</p>

<p>
Then install ruby 1.9.3, which is required by octopress.
</p>
<div class="org-src-container">

<pre class="src src-sh">rbenv install 1.9.3-p0&#57344;&#57345;&#57345;
rbenv local 1.9.3-p0&#57344;&#57345;&#57345;
rbenv rehash&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Setup the octopress</h3>
<div class="outline-text-3" id="text-1-2">
<p>
My setup experience is basically the same with the <a href="http://octopress.org/docs/setup/">official
manual</a>. However, after the installation, I replaced the octopress
directory to <code>~/WorkSpace/xiaoliuai.github.io</code> because it actually
becomes the repository of my github pages (<b>magnificent!</b>). So I
suggest to clone the octopress git repository into the directory
with the same name of the repository of your github pages at the
beginning.
</p>
</div>

<div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> Copy octopress repository</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
(_I suggest to clone shallow copy with option_ <code>depth</code>)
</p>
<div class="org-src-container">

<pre class="src src-sh">git clone git://github.com/imathis/octopress.git octopress&#57344;&#57345;&#57345;
<span style="color: #6c71c4;">cd</span> octopress&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2"><span class="section-number-4">1.2.2</span> Install dependencies</h4>
<div class="outline-text-4" id="text-1-2-2">
<div class="org-src-container">

<pre class="src src-sh">gem install bundler&#57344;&#57345;&#57345;
rbenv rehash    <span style="color: #93a1a1; font-style: italic;"># </span><span style="color: #93a1a1; font-style: italic;">If you use rbenv, rehash to be able to run the bundle command</span>&#57344;&#57345;
bundle install&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2-3" class="outline-4">
<h4 id="sec-1-2-3"><span class="section-number-4">1.2.3</span> Install the default theme</h4>
<div class="outline-text-4" id="text-1-2-3">
<p>
(_I suggest to ignore this step and install the 3rd-party theme
       directly_)
</p>
<div class="org-src-container">

<pre class="src src-sh">rake install&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>
</div>
</div>



<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Common usage</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Local site

<p>
The octopress puts the generated web site, including the pages,
layouts, images, etc. into the <code>public</code> folder for <b>local</b> preview. The <code>source</code>
folder contains all the source files used to generate the site,
including the layout HTML files, Java-scripts, style-sheets,
etc. It can be seemed as a hyper <code>_posts</code> folder that contains
source files more than blog HTML files. The familiar <code>_posts</code>
folder used in jekyll is under this folder. Let&#8217;s <a href="http://octopress.org/docs/blogging/">start blogging</a>.
</p>

<p>
First, go into the octopress folder, type <code>rake
      new_post["title"]</code>, octopress will ask you to give a blog tile,
then creates a <code>markdown</code> file into the <code>_posts</code> folder with
jekyll format (concatenate date and the title as the file name).
</p>
<div class="org-src-container">

<pre class="src src-sh">rake new_post[<span style="color: #2aa198;">"My first blog"</span>]&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;"># </span><span style="color: #93a1a1; font-style: italic;">create source/_posts/2014-10-28-my-first-blog.markdown</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
This file should be edited respect to the jekyll protocol.
</p>

<p>
Second, ran <code>rake generate</code> to generate the site in <code>public</code>
and then ran <code>rake preview</code> to mount a web-server at
<a href="http://localhost:4000">http://localhost:4000</a>.
</p>
</li>

<li>Deploying to Github Pages

<p>
Octopress integrated commands to let you deploy the generated
site to the github.
</p>
<div class="org-src-container">

<pre class="src src-sh">rake setup_github_pages&#57344;&#57345;&#57345;
</pre>
</div>
<p>
This command will ask you for a URL of the Github repo, then it
will store your Github pages repository URL as the <i>origin</i>
remote and change the octopress remote to <i>octopress</i>. The
directory of octopress becomes the repository of the <b>source</b>
branch of the origin remote (your Github Pages repo). The
<code>_deploy</code> directory, becomes the <b>master</b> branch of the origin
remote.
Run command:
</p>
<div class="org-src-container">

<pre class="src src-sh">rake deploy&#57344;&#57345;&#57345;
</pre>
</div>
<p>
will update the files in <code>public</code> to <code>_deploy</code>, then push the
changes to the master branch of the origin remote. To keep your
settings and sources tracked, run
</p>
<div class="org-src-container">

<pre class="src src-sh">git add .&#57344;&#57345;&#57345;
git commit -m<span style="color: #2aa198;">'Your message'</span>&#57344;&#57345;&#57345;
git push origin source&#57344;&#57345;&#57345;
</pre>
</div>
<p>
to push the contents in octopress directory to the source branch
of the origin remote.
</p>

<p>
<span class="underline">One thing confusing is that one repository (master branch) is</span>
<span class="underline">under another repository. But the directory <code>_deploy</code> is in the</span>
<span class="underline"><code>gitignore</code> of source branch, hence solve the self-contain
problem.</span>
</p>
</li>
</ul>

<p>

</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Emacs Configurations</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Lisp package org-jekyll</h3>
<div class="outline-text-3" id="text-3-1">
<p>
There are lisp packages in melpa that provide smart org-jekyll edit
functions.The great advantage of this package is that it generates
blogs with respect to the entries with <code>blog</code> tag. In detail, it
generates HTML files with proper time stamp before the file
names. Therefore you don&#8217;t have to take care about the file names (you
have to manage the org file name if you use other tools). Note you
have to specify the time stamp in property of entry.
This package does only export the section names, modify the elisp
script following the <a href="https://github.com/juanre/org-jekyll/issues/11">issue</a> to export the contents. Use
<code>org-jekyll-export-blog</code> to export the blog HTML files.
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">change</span>&#57344;&#57345;&#57345;
<span style="color: #657b83;">(</span>org-map-entries <span style="color: #2aa198;">(</span><span style="color: #859900;">lambda</span> <span style="color: #b58900;">()</span> <span style="color: #b58900;">(</span>org-jekyll-export-entry project<span style="color: #b58900;">)</span>&#57344;&#57345;&#57345;
                               <span style="color: #2aa198;">"blog|BLOG"</span><span style="color: #2aa198;">)</span><span style="color: #657b83;">)</span><span style="color: #dc322f;">))</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">to</span>&#57344;&#57345;&#57345;
<span style="color: #657b83;">(</span>org-map-entries <span style="color: #2aa198;">(</span><span style="color: #859900;">lambda</span> <span style="color: #b58900;">()</span> <span style="color: #b58900;">(</span>org-show-subtree<span style="color: #b58900;">)</span> <span style="color: #b58900;">(</span>org-jekyll-export-entry project<span style="color: #b58900;">)</span><span style="color: #2aa198;">)</span>&#57344;&#57345;
                               <span style="color: #2aa198;">"blog|BLOG"</span><span style="color: #657b83;">)</span><span style="color: #dc322f;">)))</span>&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Org-octopress package</h3>
<div class="outline-text-3" id="text-3-2">
<p>
The package can be installed from elpa, but it does not support the
tags. Hence, I modified the ox-jekyll.el file, duplicated all the
variables and expressions contain <code>categories</code> and then replace
them by <code>tags</code>. After reopening emacs, it successfully exports the
tags into HTML files under _posts.
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Conflict and Test</h3>
<div class="outline-text-3" id="text-3-3">
<p>
  标准的org-mode模式在导出为jekyll的HTML片段的时候,有一些导出格式需要
  相应的css或者header支持.
不兼容列表
</p>
<ul class="org-ul">
<li>下划线
</li>
<li>表格竖边框
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> <span class="todo TODO">TODO</span> <code>[1/4]</code></h3>
<div class="outline-text-3" id="text-3-4">
<ul class="org-ul">
<li><code>[X]</code> tags
</li>
<li><code>[&#xa0;]</code> functions of contents in setupfile.org
</li>
<li><code>[&#xa0;]</code> org-octopress generate <code>publish</code> folder.
</li>
<li><code>[&#xa0;]</code> In <a href="http://orgmode.org/worg/org-tutorials/org-jekyll.html">org-jekyll</a>, YAML markup is mentioned many times. I have to
study into it when I have time.
</li>
</ul>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initialize the First Blog]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-10-29-initialize-the-first-blog.html"/>
    <updated>2014-10-29T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/initialize-the-first-blog</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Install necessary softwares <b>org-mode</b> in <b>emacs</b>, <b>jekyll</b>.</a></li>
<li><a href="#sec-2">2. Initialize the web folder by jekyll.</a></li>
<li><a href="#sec-3">3. From org-mode to jekyll</a>
<ul>
<li><a href="#sec-3-1">3.1. Configuration of emacs org setting</a></li>
<li><a href="#sec-3-2">3.2. The head inserted into the org file for blog.</a></li>
<li><a href="#sec-3-3">3.3. Comments</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Build the server.</a></li>
<li><a href="#sec-5">5. Configuration</a></li>
</ul>
</div>
</div>
<p>
This is my first blog that is generated using org-mode, jekyll and is
published on GitHub.
I made this page following the instructions on <a href="http://orgmode.org/worg/org-tutorials/org-jekyll.html">org-jekyll</a>.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/2014-10-29-initialize-the-first-blog.html"><span class="section-number-2">1</span> Install necessary softwares <b>org-mode</b> in <b>emacs</b>, <b>jekyll</b>.</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Note that the built-in org-mode in emacs might be outdated, the best
solution is to remove the built-in org-mode and reinstall it from
the package manager via <code>M-x list-packages</code>. Jekyll can be installed
through <b>RubyGem</b>. On my OSX, the ruby and gem are preinstalled, so
<code>gem install jekyll</code> works for me.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Initialize the web folder by jekyll.</h2>
<div class="outline-text-2" id="text-2">
<p>
As my final goal is posting the blog to GitHub, the working folder
of my blog is <code>xiaoliuai.github.io</code>.
</p>
<div class="org-src-container">

<pre class="src src-bash">jekyll new xiaoliuai.github.io
cd xiaoliuai.github.io
jekyll serve
</pre>
</div>
<p>
Then you can see the portal page by opening <code>localhost:4000</code> in
your web browser.
</p>

<p>
Now I would like to introudce the directory hierarchy of jekyll. Since
I will move to octopress, which is a wrapper of jekyll with different
directory setting, I just introduce the essential part to make the
things work.
</p>
<div class="org-src-container">

<pre class="src src-sh">xiaoliuai.github.io/&#57344;&#57345;&#57345;
-- _posts/&#57344;&#57345;&#57345;
-- _sites/&#57344;&#57345;&#57345;
...&#57344;&#57345;&#57345;
</pre>
</div>
<p>
Two main directories need special attention, that are,
<code>_posts</code> and <code>_sites</code>. The first folder contains the <i>source</i> files,
which are markdown file, html file, etc. as input for jekyll; the
second folder contains the generated static server pages. All the
project should be uploaded to github to be displayed where the
<code>index.html</code> file is the portal of web site. The GitHub Pages
understand this directory configuration and will automatically display
the contents in <code>_sites</code>.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> From org-mode to jekyll</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Configuration of emacs org setting</h3>
<div class="outline-text-3" id="text-3-1">
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #657b83;">(</span><span style="color: #2aa198;">"blog-org"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:base-directory</span> <span style="color: #2aa198;">"~/Emacs/org/blog"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:base-extension</span> <span style="color: #2aa198;">"org"</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:publishing-directory</span> <span style="color: #2aa198;">"~/WorkSpace/xiaoliuai.github.io/"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:recursive</span> t&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:publishing-function</span> org-html-publish-to-html&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:headline-levels</span> 4&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:html-extension</span> <span style="color: #2aa198;">"html"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:body-only</span> t <span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">Only export section between &lt;body&gt; &lt;/body&gt;</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:with-toc</span> nil <span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">don't export toc, it clobbers the YAML front matter</span>&#57344;&#57345;&#57345;
 <span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
<span style="color: #657b83;">(</span><span style="color: #2aa198;">"blog-static"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:base-directory</span> <span style="color: #2aa198;">"~/Emacs/org/blog"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:base-extension</span> <span style="color: #2aa198;">"css</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">js</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">png</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">jpg</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">gif</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">pdf</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">mp3</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">swf</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">gz</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">txt</span><span style="color: #6c71c4;">\\</span><span style="color: #d33682;">|</span><span style="color: #2aa198;">el"</span>&#57344;&#57345;
 <span style="color: #6c71c4;">:publishing-directory</span> <span style="color: #2aa198;">"~/WorkSpace/xiaoliuai.github.io/"</span>&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:recursive</span> t&#57344;&#57345;&#57345;
 <span style="color: #6c71c4;">:publishing-function</span> org-publish-attachment&#57344;&#57345;&#57345;
 <span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
<span style="color: #657b83;">(</span><span style="color: #2aa198;">"blog"</span><span style="color: #6c71c4;">:components</span> <span style="color: #2aa198;">(</span><span style="color: #2aa198;">"blog-org"</span> <span style="color: #2aa198;">"blog-static"</span><span style="color: #2aa198;">)</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
With this org-mode configuration, you have to create a folder <code>_posts</code>
under the <code>~/Emacs/org/blog</code>, then org-mode will export the folder and
html files into the right place.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> The head inserted into the org file for blog.</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-org"><span style="color: #93a1a1; font-style: italic;">#+STARTUP: showall indent</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">#+STARTUP: hidestars</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">#+BEGIN_HTML</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">---</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">layout: default</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">title: Xiao Liu's First Blog</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">excerpt: First blog with org-mode, jekyll.</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">categories:</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">    - org</span>&#57344;&#57345;&#57345;
<span style="color: #cb4b16;">---</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">#+END_HTML</span>&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Comments</h3>
<div class="outline-text-3" id="text-3-3">
<p>
The two lines with comments form the main differences to ordinary
html exportation. Jekyll will read the body of html files
generated by org-mode and add it&#8217;s own heads to specify the
styles. Org-mode will export the table of contents (TOC) at the
beginning of exported html file, hence mask the YAML Front
Matter. <a href="http://ccom.uprrp.edu/~humberto//blog/2013/11/03/org-jekyll-is-awesome/">Disable the TOC</a> can sovle this problem. However, there
might be other solutions to change the position of TOC.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Build the server.</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">

<pre class="src src-bash">cd xiaoliuai.github.io
jekyll build
jekyll serve
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Configuration</h2>
<div class="outline-text-2" id="text-5">
<p>
The simplest personalization of the blog site is editting
<code>_config.yml</code> under the project directory. Following the attribute
names in this file, you can easily understand how to specify the blog
name, description, email address, etc.
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
