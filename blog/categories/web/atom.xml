<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | 记往开来]]></title>
  <link href="http://xiaoliuai.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://xiaoliuai.github.io/"/>
  <updated>2015-12-10T22:17:02+01:00</updated>
  <id>http://xiaoliuai.github.io/</id>
  <author>
    <name><![CDATA[Xiao Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Tutorial]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-03-04-spring-tutorial.html"/>
    <updated>2015-03-04T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/spring-tutorial</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Project file structure</a></li>
<li><a href="#sec-2">2. Management with Maven</a></li>
<li><a href="#sec-3">3. Application Configuration</a>
<ul>
<li><a href="#sec-3-1">3.1. Inject configurations</a></li>
<li><a href="#sec-3-2">3.2. Load configuration files.</a></li>
<li><a href="#sec-3-3">3.3. Define configuration source class</a></li>
<li><a href="#sec-3-4">3.4. Automatically assign properties.</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Authentication &amp; Securing</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/categories/web/atom.xml"><span class="section-number-2">1</span> Project file structure</a></h2>
<div class="outline-text-2" id="text-1">
<p>
Generally, we use maven to manage the directory layout. Hence, you
will get a <b>standard directory</b> layout like below:
</p>
<div class="org-src-container">

<pre class="src src-bash">project
    src
        main
            java
            [scala]
            resources
                environment.properties
                environment.test.properties
                environment.prod.properties
                config
                    application.yml
                    application-dev.yml
                    application-[profile].yml
                [other]
        test
            java
            [scala]
    target
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Management with Maven</h2>
<div class="outline-text-2" id="text-2">
<p>
The files <code>environment.[profile].properties</code> are used to provide
different profiles to <b><a href="http://maven.apache.org/guides/mini/guide-building-for-different-environments.html">maven</a></b>.
</p>

<p>
Since maven is used to manage the package dependencies, different
maven profiles enables you to use different dependencies for
development and production, e.g. run different tasks. I am not
farmiliar with maven, and cannot tell how and when it can be used.
</p>

<p>
You have to add <code>spring-boot-maven-plugin</code> as one of the plugins
under <code>build</code> node in pom.xml.
</p>
<ul class="org-ul">
<li>Development
<ul class="org-ul">
<li>Compile the project by <code>maven clean insatll</code>
</li>
<li>More than Build

<p>
Maven can help running test, web application and produceing
reports by plugins. TODO
</p>
</li>
<li><b>Compile and run</b>: <code>mvn spring-boot:run</code> to run the
application with default profile; <code>mvn -Pprod spring-boot:run</code>
to run the application with <i>prod</i> profile.
</li>
</ul>
</li>
<li>Production
<ul class="org-ul">
<li>Package the files

<ul class="org-ul">
<li><b>Jar file</b>. Run <code>mvn clean package</code> to build the jar file
and run it through command line.
</li>

<li><b>War file</b>. Add <code>&lt;packaging&gt;war&lt;/packaging&gt;</code> in pom.xml
file, under the root node. Then run <code>mvn package</code> as
building the jar file.
</li>
</ul>
</li>

<li>Deploy
</li>
</ul>
</li>
</ul>

<p>
From command line, you can run the jar file with specification of
profile.
</p>
<div class="org-src-container">

<pre class="src src-bash">java -jar -Dspring.profiles.active=production YOUR_JAR.jar
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Application Configuration</h2>
<div class="outline-text-2" id="text-3">
<p>
The files <code>application-[profile].yml</code> are used to provide different
configurations for <b><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html">spring</a></b>.
</p>

<p>
Spring configuration files let you to inject different
configurations for development and production. For example, you can
use different database for development and production (different
host, port, username and password, etc.).
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Inject configurations</h3>
<div class="outline-text-3" id="text-3-1">
<p>
You can get access to these configurations through many ways
</p>
<ul class="org-ul">
<li>Inject the value of configuration to attribute of this class by
<code>@Value("${NAME:DEFAULT_VALUE}")</code>.
</li>
<li>You can also inject <code>Environment</code> object.
<div class="org-src-container">

<pre class="src src-java"><span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">This line is not about get the property, but about define</span>&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">property and let it accessible by somewhere else.</span>&#57344;&#57345;&#57345;
<span style="color: #268bd2;">@Configuration</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">AppConfig</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span> <span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">env</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Bean</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">MyBean</span> <span style="color: #b58900;">myBean</span>() {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">MyBean</span> <span style="color: #6c71c4;">myBean</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">MyBean</span>();&#57344;&#57345;&#57345;
        myBean.setName(env.getProperty(<span style="color: #2aa198;">"bean.name"</span>));&#57344;&#57345;&#57345;
        <span style="color: #859900;">return</span> myBean;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
<li>You can also implement the <code>EnvironmentAware</code> interface to get
an environment object to get the property.
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">MailConfiguration</span> <span style="color: #859900;">implements</span> <span style="color: #268bd2;">EnvironmentAware</span> {&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">setEnvironment</span>(<span style="color: #268bd2;">Environment</span> <span style="color: #6c71c4;">environment</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">this</span>.propertyResolver = <span style="color: #859900;">new</span> <span style="color: #268bd2;">RelaxedPropertyResolver</span>(environment, ENV_SPRING_MAIL);&#57344;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</li>
</ul>

<p>
One difference between <code>Environment</code> and <code>@Value</code> is that we can
access the information related to profiles. The environment can
determine which profiles are currently active, and which profile
should be active by default.
</p>
<div class="org-src-container">

<pre class="src src-java">env.acceptsProfiles(<span style="color: #268bd2;">String</span>... <span style="color: #6c71c4;">profiles</span>)&#57344;&#57345;&#57345;
env.getActiveProfiles() <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">return an array of strings</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>Environment</code> interface extends <code>PropertyResolver</code>, which is used
to acess the properties. You can get property directly from the
environment object. The example above provide a way that get
properties by key name following a relaxed rule.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Load configuration files.</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Different property sources are loaded in predefined order. You
can set the default additional property file by
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">SimpleCommandLinePropertySource</span> <span style="color: #6c71c4;">source</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">SimpleCommandLinePropertySource</span>(args);&#57344;&#57345;
<span style="color: #859900;">if</span> (<span style="color: #268bd2;">!</span>source.containsProperty(<span style="color: #2aa198;">"spring.profiles.active"</span>)){&#57344;&#57345;&#57345;
    app.setAdditionalProfiles([profile_name])&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Define configuration source class</h3>
<div class="outline-text-3" id="text-3-3">
<p>
 A class is recognized as a source of configuration if it has the
<code>@Configuration</code> class. <code>@Bean</code> defined in this class can be
accessed from <code>AnnotationConfigApplicationContext</code>. It is a
replacement of XML configuration files that defines beans.
Get the configuration from configuration class in some where
else.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">ConfigurationTest</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Test</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">testHelloworld</span> () {&#57344;&#57345;&#57345;
        <span style="color: #268bd2;">AnnotationConfigApplicationContext</span> <span style="color: #6c71c4;">ctx</span> = <span style="color: #859900;">new</span> <span style="color: #268bd2;">AnnotationConfigApplicationContext</span>(AppConfig.<span style="color: #859900;">class</span>);&#57344;&#57345;
        Assert.assertEquals(<span style="color: #2aa198;">"hello"</span>, ctx.getBean(<span style="color: #2aa198;">"message"</span>)); <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">message is the name of the Bean method in configuration class</span>&#57344;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it can also be used to get any kind of object</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>AppConfig</code> is the class that used as configuration source.
</p>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Automatically assign properties.</h3>
<div class="outline-text-3" id="text-3-4">
<p>
In configuration source, add
<code>@EnableConfigurationProperties(A.class)</code>. In target class <code>A</code>,
add <code>@ConfigurationProperties(prefix = "PREFIX")</code>. Then the
properties under <code>PREFIX</code> will be automatically assigned to the
attributes of class <code>A</code>. <b>DETAILS OF THE CONFIGURATION SOURCE</b>???
</p>

<p>
<code>@EnableAutoConfiguration</code> auto configure the application. I
don&#8217;t know the details of this annotation, but it auto wires the
configurations into the embedded tomcat. Besides, it also
configures the database (host and port) automatically when
database template is injected in the project.
</p>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Authentication &amp; Securing</h2>
<div class="outline-text-2" id="text-4">
<p>
It is mainly implemented by <code>HttpSecurity</code>, which can be injected
and configured in method of class that extends
<code>WebSecurityConfigurerAdapter</code>.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">SecurityConfig</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">WebSecurityConfigurerAdapter</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">UserDetailsService</span> <span style="color: #6c71c4;">userDetailsService</span>;&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">class access to the user database</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Value</span>(<span style="color: #2aa198;">"${drill.security.rememberme.key}"</span>)&#57344;&#57345;&#57345;
    <span style="color: #859900;">private</span> <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">remerberMeKey</span>;&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">key for cookies</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Inject</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configureGlobal</span>(<span style="color: #268bd2;">AuthenticationManagerBuilder</span> <span style="color: #6c71c4;">auth</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;
        auth&#57344;&#57345;&#57345;
            .userDetailsService(userDetailsService) <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">the point that connect the authentication module and user database</span>&#57344;&#57345;
            .passwordEncoder(passwordEncoder());&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">WebSecurity</span> <span style="color: #6c71c4;">web</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">Spring security ignore following URL</span>&#57344;&#57345;&#57345;
        web.ignoring()&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/bower_components/**"</span>)&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/fonts/**"</span>)&#57344;&#57345;&#57345;
            .antMatchers(<span style="color: #2aa198;">"/images/**"</span>)&#57344;&#57345;&#57345;
            ...;&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">protected</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">HttpSecurity</span> <span style="color: #6c71c4;">http</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        http.authorizeRequests()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/**"</span>).authenticated()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/rest/register"</span>).permitAll()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/app/rest/logs/**"</span>).hasAuthority(<span style="color: #268bd2;">Authority</span>.ADMIN)&#57344;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">set authorities</span>&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .formLogin()&#57344;&#57345;&#57345;
                .usernameParameter(<span style="color: #2aa198;">"username"</span>)&#57344;&#57345;&#57345;
                .passwordParameter(<span style="color: #2aa198;">"password"</span>)&#57344;&#57345;&#57345;
                .loginProcessingUrl(<span style="color: #2aa198;">"/app/authentication"</span>)&#57344;&#57345;&#57345;
                .successHandler(ajaxAuthenticationSuccessHandler)&#57344;&#57345;&#57345;
                .failureHandler(ajaxAuthenticationFailureHandler)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">set login service url</span>&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .logout()&#57344;&#57345;&#57345;
                .logoutUrl(<span style="color: #2aa198;">"/app/logout"</span>)&#57344;&#57345;&#57345;
                .logoutSuccessHandler(ajaxLogoutSuccessHandler)&#57344;&#57345;&#57345;
                .deleteCookies(<span style="color: #2aa198;">"JSESSIONID"</span>)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .exceptionHandling()&#57344;&#57345;&#57345;
                .authenticationEntryPoint(authenticationEntryPoint)&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .rememberMe()&#57344;&#57345;&#57345;
                .rememberMeServices(rememberMeServices)&#57344;&#57345;&#57345;
                <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it is not persistent token</span>&#57344;&#57345;&#57345;
                .key(remerberMeKey)&#57344;&#57345;&#57345;
            .and()&#57344;&#57345;&#57345;
                .csrf().disable()  <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">not clear</span>&#57344;&#57345;&#57345;
                .headers().cacheControl(); <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">not clear</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>

<p>
The foundation of user securing is about session and cookies. Once
the user logged in, the server will set the cookies in
browser. Then browser will send the cookies via HTTP protocol
everytime it send new request to the server. On the server side,
<i>session</i> is also kept with a unique random id to identify the
client. Look another blog <i>Init the project</i> to see how to replace
the in memory user store by a repository that connects to
database. On the server side, programmer can get the user
information by:
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #859900;">public</span> <span style="color: #859900;">static</span> <span style="color: #268bd2;">String</span> <span style="color: #b58900;">getCurrentLogin</span>() {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">SecurityContext</span> <span style="color: #6c71c4;">securityContext</span> = SecurityContextHolder.getContext();&#57344;&#57345;
    <span style="color: #268bd2;">Authentication</span> <span style="color: #6c71c4;">authentication</span> = securityContext.getAuthentication();&#57344;&#57345;
    <span style="color: #268bd2;">UserDetails</span> <span style="color: #6c71c4;">springSecurityUser</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">String</span> <span style="color: #6c71c4;">userName</span> = <span style="color: #268bd2;">null</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">if</span>(authentication != <span style="color: #268bd2;">null</span>) {&#57344;&#57345;&#57345;
        <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> UserDetails) {&#57344;&#57345;&#57345;
            springSecurityUser = (<span style="color: #268bd2;">UserDetails</span>) authentication.getPrincipal();&#57344;&#57345;
            userName = springSecurityUser.getUsername();&#57344;&#57345;&#57345;
        } <span style="color: #859900;">else</span> <span style="color: #859900;">if</span> (authentication.getPrincipal() <span style="color: #859900;">instanceof</span> String) {&#57344;&#57345;&#57345;
            userName = (<span style="color: #268bd2;">String</span>) authentication.getPrincipal();&#57344;&#57345;&#57345;
        }&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> userName;&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Guide Examples]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-03-04-spring-guide-examples.html"/>
    <updated>2015-03-04T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/spring-guide-examples</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Start RESTFul Server</a></li>
<li><a href="#sec-2">2. Securing Web</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/categories/web/atom.xml"><span class="section-number-2">1</span> Start RESTFul Server</a></h2>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Securing Web</h2>
<div class="outline-text-2" id="text-2">
<p>
This example uses WebMvc framework, which uses
<code>WebMvcConfigurerAdapter</code> and <code>ViewControllerRegistry</code> to connect
the urls and html templates.
</p>

<p>
Add <code>spring-boot-starter-security</code> into dependency, make
<code>WebSecurityConfig.java</code>.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #268bd2;">@Configuration</span>&#57344;&#57345;&#57345;
<span style="color: #268bd2;">@EnableWebMvcSecurity</span>&#57344;&#57345;&#57345;
<span style="color: #859900;">public</span> <span style="color: #859900;">class</span> <span style="color: #268bd2;">WebSecurityConfig</span> <span style="color: #859900;">extends</span> <span style="color: #268bd2;">WebSecurityConfigurerAdapter</span> {&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Override</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">protected</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configure</span>(<span style="color: #268bd2;">HttpSecurity</span> <span style="color: #6c71c4;">http</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;&#57345;
        http&#57344;&#57345;&#57345;
            .authorizeRequests()&#57344;&#57345;&#57345;
                .antMatchers(<span style="color: #2aa198;">"/"</span>, <span style="color: #2aa198;">"/home"</span>).permitAll()&#57344;&#57345;&#57345;
                .anyRequest().authenticated()&#57344;&#57345;&#57345;
                .and()&#57344;&#57345;&#57345;
            .formLogin()&#57344;&#57345;&#57345;
                .loginPage(<span style="color: #2aa198;">"/login"</span>)&#57344;&#57345;&#57345;
                .permitAll()&#57344;&#57345;&#57345;
                .and()&#57344;&#57345;&#57345;
            .logout()&#57344;&#57345;&#57345;
                .permitAll();&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">@Autowired</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">public</span> <span style="color: #268bd2;">void</span> <span style="color: #b58900;">configureGlobal</span>(<span style="color: #268bd2;">AuthenticationManagerBuilder</span> <span style="color: #6c71c4;">auth</span>) <span style="color: #859900;">throws</span> <span style="color: #268bd2;">Exception</span> {&#57344;&#57345;
        auth&#57344;&#57345;&#57345;
            .inMemoryAuthentication()&#57344;&#57345;&#57345;
                .withUser(<span style="color: #2aa198;">"user"</span>).password(<span style="color: #2aa198;">"password"</span>).roles(<span style="color: #2aa198;">"USER"</span>);&#57344;&#57345;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">user repository in memory with username = "user" and password = "password"</span>&#57344;&#57345;
        <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">it is just for demon</span>&#57344;&#57345;&#57345;
    }&#57344;&#57345;&#57345;
}&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Overview]]></title>
    <link href="http://xiaoliuai.github.io/blog/2015-01-30-javascript-overview.html"/>
    <updated>2015-01-30T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/javascript-overview</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 后端</a></li>
<li><a href="#sec-2">2. 前端</a></li>
</ul>
</div>
</div>


<p>
在工具描述中,主要介绍经常用到的库,框架,前后端开发用到的平台.
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/categories/web/atom.xml"><span class="section-number-2">1</span> 后端</a></h2>
<div class="outline-text-2" id="text-1">
<p>
<b>Node.js</b> 是一个JavaScript的平台,它提供了一个脱离浏览器的JavaScript运
行环境,同时也提供了一系列运行库和各种包. npm(nodejs package
manager)则是这各平台的包管理系统.它通过读取package.json文件来安装项
目所需的依赖(就跟maven的pom.xml一样).
</p>

<p>
<b>bower</b> ,是nodejs之中的一个组件,本身用来专门管理前端开发所需要的包
(JavaScript,CSS).它与npm的区别在于管理对象的不同以及bower使用的是扁
平化的依赖关系而npm使用树形依赖.bower读取bower.json来安装依赖.
</p>

<p>
<b>yoeman</b> , 安装时叫做 <b>yo</b>,是一个用来创建项目骨架的工具.它根据
yeoman-generator,也就是模板来创建文件架结构.模板需要用npm来安装,比
方说
</p>
<div class="org-src-container">

<pre class="src src-bash">npm install -g generator-gulp-angular
</pre>
</div>
<p>
模板名字以 <code>generator</code> 开头.
使用时运行
</p>
<div class="org-src-container">

<pre class="src src-bash">mkdir [app-name] &amp;&amp; cd $_
yo gulp-angular [app-name]
</pre>
</div>
<p>
来生成一个以generator-gulp-angular为模板的项目骨架,项目名字为
<code>[app-name]</code>. 就刚刚使用的这个模板为例,它在创建的时候会询问你需要什
么样的angular版本,哪一种CSS样式库(bootstrap, material),哪种angular
的实现方式(angular-strap),等等.
</p>

<p>
<b>grunt</b> / <b>gulp</b> 用来运行打包,压缩,发布等任务.在刚刚的例子中,我们使
用的是基于gulp的模板,所以要用gulp来运行以上任务.生成模板的事后,已经
在项目目录下建立了一个名为gulp的目录以及一个叫做gulpfile.js的文
件.gulp目录下面包含一系列js文件. gulpfile.js里面引入gulp库,定义一些
目录(src)的路径,并引入gulp目录,从而使得gulp目录下的js文件被gulp用来
进行相应的操作.这个模板的<a href="https://github.com/Swiip/generator-gulp-angular">github</a>说明上还指出一系列可选的特性,但是目
前看不出来在哪里定义的.
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 前端</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Javascript
<ul class="org-ul">
<li><b>AngularJS</b>
</li>
<li><b>UI-Route</b>
</li>
</ul>
</li>

<li>UI Framework
<ul class="org-ul">
<li><b>Bootstrap</b>
</li>
<li><b>Angular Material</b>
</li>
</ul>
</li>

<li>CSS Preprocessor
<ul class="org-ul">
<li>Sass(Node.js)
</li>
<li>Less
</li>
</ul>
</li>

<li>JS Preprocessor
<ul class="org-ul">
<li>ES6
</li>
<li>TypeScript
</li>
<li>CoffeeScript
</li>
<li>AtScript
</li>
</ul>
</li>

<li>HTML template
<ul class="org-ul">
<li><code>.jade</code>
</li>
<li><code>.haml</code>
</li>
</ul>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Developer Guide 开发指南学习笔记]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-12-25-angularjs-developer-guide-.html"/>
    <updated>2014-12-25T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/angularjs-developer-guide-</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Introduction &amp; Conceptual Overview</a></li>
<li><a href="#sec-2">2. DI</a></li>
<li><a href="#sec-3">3. Data Binding &amp; Scopes &amp; Template</a></li>
<li><a href="#sec-4">4. Module &amp; Provider</a>
<ul>
<li><a href="#sec-4-1">4.1. Service</a></li>
<li><a href="#sec-4-2">4.2. Controller</a></li>
</ul>
</li>
<li><a href="#sec-5">5. Directive</a>
<ul>
<li><a href="#sec-5-1">5.1. 注册Directive</a></li>
<li><a href="#sec-5-2">5.2. restrict option</a></li>
<li><a href="#sec-5-3">5.3. link option</a></li>
<li><a href="#sec-5-4">5.4. isolate scope</a></li>
<li><a href="#sec-5-5">5.5. <i>transclude</i></a></li>
<li><a href="#sec-5-6">5.6. scope</a></li>
<li><a href="#sec-5-7">5.7. controller in directive.</a></li>
</ul>
</li>
<li><a href="#sec-6">6. Filters</a></li>
<li><a href="#sec-7">7. Forms</a></li>
<li><a href="#sec-8">8. Expressions</a></li>
<li><a href="#sec-9">9. HTML Compiler</a></li>
<li><a href="#sec-10">10. Security</a></li>
<li><a href="#sec-11">11. i18n and l10n</a></li>
<li><a href="#sec-12">12. Accessibility</a></li>
<li><a href="#sec-13">13. Bootstrap</a></li>
<li><a href="#sec-14">14. Running in Production</a></li>
<li><a href="#sec-15">15. Animations</a></li>
</ul>
</div>
</div>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/categories/web/atom.xml"><span class="section-number-2">1</span> Introduction &amp; Conceptual Overview</a></h2>
<div class="outline-text-2" id="text-1">
<p>
HTML本身是静态的,对于现在的动态网页无能为力.为了弥合静态和动态之间
的鸿沟,有两种静态方式:库(<code>jQuery</code>),框架(<code>durandal</code>,
<code>ember</code>). <code>AngularJS</code> 则提供了第三种方式,通过数据绑定等方式让浏览
器学会新的语法. <code>AngularJS</code> 是完全基于前端的,适用于CRUD应用.
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> DI</h2>
<div class="outline-text-2" id="text-2">
<p>
AngularJS中的模组类似于名字空间,在几乎所有东西都在名字空间下注册.这
些注册的东西是通过名字推断来进行绑定(引用)的.AngularJS自带的那功能,都
是可以直接引用的.自己定义的东西,也可以直接靠名字推定,但是要给模组
加上依赖关系.
</p>

<p>
<b>service</b>, <b>directive</b>, <b>filter</b> 都是通过 <code>factory/directive/filter</code> 方
法注册在模组中的,这些方法统称工厂(factory)方法.
</p>

<p>
我们可以通过 <code>config/run</code> 方法注册在模组配置和运行的时候需要运行的
函数,这些函数也同样的可以被以类似上面的方式来调用.这些方法被归类为
模组(module)方法.
</p>

<p>
控制器(<b>controller</b>),被解释为classes或者constructor function,同样需
要注册到模组中,通过名字来引用.
</p>

<p>
这些东西在引用的时候,可以直接当函数参数名,可以用 <i>$inject</i> 来显示
说明,也可以用数组.后两种基本上是在第一种的基础上多写些代码来说明.直
接用函数参数名是最简单的,但是不被官方所推荐.
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Data Binding &amp; Scopes &amp; Template</h2>
<div class="outline-text-2" id="text-3">
<p>
传统模板是通过模板Tempalte和模型Model来建立视图View. AngularJS是通过模
板建立起View和Model的对应,让View跟Model直接互动.
AngularJS中,template是包含AngularJS元素和属性的HTML.template中可用
的AngularJS元素和属性为 <i>Directive</i>, <i>Markup</i> (<code></code>), <i>Filter</i>,
<i>Form controls</i>.通过这些template,JS(model)和(view)被连接了起来(数
据绑定).
</p>

<p>
上下文(Scope)提供表达式的运行环境,它被组织成一个类似DOM的层级结构.上
下文监视表达式并传递事件.API($watch)监视模型的变更,($apply)将任意
由Angular之外的事件对模型的改变传递到View.这里所谓的Angular之外的
事件,指的是controllers,services,event handlers.
</p>

<p>
上下文之间可以嵌套,嵌套的上下文有两种 <i>child scope</i> 和 <i>isolate
scope</i>, <i>child scope</i> 继承上层上下文的内容, <i>isolate scope</i> 不继承.
如果上下文中没有对应的属性,表达式是没有任何作用的.
</p>

<p>
上下文可以看做将应用控制器controller和视图view联系起来的胶水.
<span class="underline">在template连接的时候,directive会设置上下文中的$watch,$watch会通知
directive任何属性的变更,从而使directive能根据更新的数据来渲染DOM</span>
控制器controller和directive都能直接访问scope,但是不能直接访问对方.这
种设计孤立controller和directive. <code>$rootScope</code> 提供对root上下文的访
问,一般指向ng-app所在的范围.
</p>

<p>
如果用chrome的inspect element功能查看页面元素,会发现
<code>class="ng-scope ng-binding"</code>之类的属
性.Anuglar会自动将 <i>ng-scope</i> 加入制定了上下文的元素, <i>ng-binding</i>
则说明这里面的内容是用绑定实现的.
</p>

<p>
在不同层级使用同一个controller,
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">div</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"EventController"</span>&gt;&#57344;&#57345;&#57345;
  Root scope &lt;<span style="color: #b58900;">tt</span>&gt;<span style="color: #657b83; background-color: #fdf6e3;">MyEvent</span>&lt;/<span style="color: #b58900;">tt</span>&gt; count: &#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">li</span> <span style="color: #6c71c4;">ng-repeat</span>=<span style="color: #2aa198;">"i in [1]"</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"EventController"</span>&gt;&#57344;&#57345;&#57345;
      &lt;<span style="color: #b58900;">button</span> <span style="color: #6c71c4;">ng-click</span>=<span style="color: #2aa198;">"$emit('MyEvent')"</span>&gt;$emit('MyEvent')&lt;/<span style="color: #b58900;">button</span>&gt;&#57344;&#57345;&#57345;
      &lt;<span style="color: #b58900;">button</span> <span style="color: #6c71c4;">ng-click</span>=<span style="color: #2aa198;">"$broadcast('MyEvent')"</span>&gt;$broadcast('MyEvent')&lt;/<span style="color: #b58900;">button</span>&gt;&#57344;&#57345;
      &lt;<span style="color: #b58900;">br</span>&gt;&#57344;&#57345;&#57345;
      Middle scope &lt;<span style="color: #b58900;">tt</span>&gt;<span style="color: #657b83; background-color: #fdf6e3;">MyEvent</span>&lt;/<span style="color: #b58900;">tt</span>&gt; count: &#57344;&#57345;&#57345;
      &lt;<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
        &lt;<span style="color: #b58900;">li</span> <span style="color: #6c71c4;">ng-repeat</span>=<span style="color: #2aa198;">"item in [1, 2]"</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"EventController"</span>&gt;&#57344;&#57345;
          Leaf scope &lt;<span style="color: #b58900;">tt</span>&gt;<span style="color: #657b83; background-color: #fdf6e3;">MyEvent</span>&lt;/<span style="color: #b58900;">tt</span>&gt; count: &#57344;&#57345;&#57345;
        &lt;/<span style="color: #b58900;">li</span>&gt;&#57344;&#57345;&#57345;
      &lt;/<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
    &lt;/<span style="color: #b58900;">li</span>&gt;&#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">div</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>

<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'eventExample'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'EventController'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
  $scope.count = 0;&#57344;&#57345;&#57345;
  $scope.$on<span style="color: #859900;">(</span><span style="color: #2aa198;">'MyEvent'</span>, <span style="color: #859900;">function</span><span style="color: #268bd2;">()</span> <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
    $scope.count++;&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>

<p>
这个例子中,首先我们看JS的部分.这部分注册了一个EventController,这个
controller对于给定的上下文 <i>$scope</i> 设定属性 <i>count</i>,同时注册一个
名为 <i>MyEvent</i> 的事件,调用一个闭包函数对于当前上下文进行操作.
</p>

<p>
接下来看HTML,里面把同一个controller用了三次,也就意味着对于
eventExample,给予三个不同的 <i>$scope</i>.而这三个 <i>$scope</i> 各自拥有自
己的 <i>MyEvent</i> 函数副本.最后, <code>$emit('MyEvent')</code> 将调用这个函数的
动作传递给上层 <i>$scope</i>, <code>$broadcast('MyEvent')</code> 则传递给下层
<i>$scope</i>.
</p>

<p>
<i>$scope</i> 的生命周期中,模型的改变不会立即触发 <i>$watch</i>, 而是通过在
<i>$apply</i> 结束时的 <i>$digest</i> 来触发 <i>$watch</i>,这么做的好处在于将多个
改变合为一个 <i>$watch</i> 动作. 当子上下文不需要继续存在时,子上下文的
创建者负责调用 <i>scope.$destroy()</i> 负责停止事件传递,允许垃圾回收来
释放内存.
</p>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Module &amp; Provider</h2>
<div class="outline-text-2" id="text-4">
<p>
angular.module会覆盖已存在的名字.模组提供 <i>provider</i>, <i>factory</i>,
<i>service</i>, <i>value</i>, <i>constant</i>, <i>animation</i>, <i>filter</i>,
<i>controller</i>, <i>directive</i>, <i>config</i>, <i>run</i> 这些方法.除了最后两个以
外,都是注册某一种功能.
<i>provider,factory,service,value,constant</i> 都是JS内部用的,
<i>directive,filter,animation,controller</i> 都是在html里面用
的(JS里面定义的).
</p>
<ul class="org-ul">
<li>JS
<ul class="org-ul">
<li>provider 提供一个在config阶段配置内容的机会,通过 <i>$get</i> 函数返
回绑定的对象.
</li>
<li>factory 注册一个名字空间,跟value类似,但是可以引用其它的服务
</li>
<li>service 注册一个类,用 <i>new</i> 来获得对象
</li>
<li>value 注册一个变量,也可以在变量下加入函数,但是不能引用其它的服务.
</li>
</ul>
</li>
<li>html
<ul class="org-ul">
<li>directive, 定义一个html元素,属性,类名,对相应的元素加入定义好的模块
</li>
<li>controller, 注册一个可在html里面引用的属性值,对相应元素中的变
量进行绑定和操作.
</li>
<li>animation, 动作效果
</li>
</ul>
</li>
<li>html and JS
<ul class="org-ul">
<li>filter, 过滤器. 返回一个过滤函数并绑定在这个名字上. 过滤函数接
受整个数组为第一个参数,还可以自定附加参数.
</li>
</ul>
</li>
</ul>

<p>
Provider是AngularJS的基础,Value,Factory,Service,Constant都建立在Provider之上.下
面的 <code>myApp.XXX</code> 方法实际上都是调用 <code>$provider.XXX</code>.
</p>
<ul class="org-ul">
<li>Value recipe
<div class="org-src-container">

<pre class="src src-javascript"><span style="color: #859900;">var</span> <span style="color: #6c71c4;">myApp</span> = angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myApp'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
myApp.value<span style="color: #657b83;">(</span><span style="color: #2aa198;">'clientId'</span>, <span style="color: #2aa198;">'a12345654321x'</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
myApp.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'DemoController'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'clientId'</span>, <span style="color: #859900;">function</span> DemoController<span style="color: #b58900;">(</span><span style="color: #6c71c4;">clientId</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
  <span style="color: #268bd2;">this</span>.clientId = clientId;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">html</span> <span style="color: #6c71c4;">ng-app</span>=<span style="color: #2aa198;">"myApp"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">body</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"DemoController as demo"</span>&gt;&#57344;&#57345;&#57345;
    Client ID: &#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">body</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">html</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
其实就是定义一个模组下的变量/对象,可以是简单值,也可以在这个变量
下加入函数.
</p>
</li>
<li>Factory recipe
相对Value,可使用其他服务,初始化服务,惰性初始化. 使用 <code>myApp.factory</code>
方法.返回的是一系列变量,函数.
</li>
<li>Service recipe
使用 <code>myApp.service()</code> 方法,注册一个构造函数,得到一个类(class),
用 <i>new</i> 来得到新实例.返回的是构造函数.
</li>
<li>Provider Recipe
比Factory更高一层,能够让用户在使用服务之前进行定制化,用config函
数来实现.Provider里面有个 <code>$get</code> 方法,DI会把这个方法返回的东西绑
定到注册的Provider名字上.
<div class="org-src-container">

<pre class="src src-javascript">myApp.provider<span style="color: #657b83;">(</span><span style="color: #2aa198;">'AAA'</span>, <span style="color: #859900;">function</span> AAAProvider<span style="color: #2aa198;">(){</span>&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">this</span>.configFunc = <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">bla</span><span style="color: #b58900;">){</span>blabla<span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">this</span>.$get = <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">lab</span><span style="color: #b58900;">){</span> <span style="color: #859900;">return</span> BBB<span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
myApp.config<span style="color: #657b83;">(</span><span style="color: #859900;">function</span><span style="color: #2aa198;">(</span><span style="color: #6c71c4;">AAAProvider</span><span style="color: #2aa198;">){</span>&#57344;&#57345;&#57345;
    AAAProvider.configFunc<span style="color: #b58900;">(</span>...<span style="color: #b58900;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
myApp.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'CCC'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">(</span><span style="color: #6c71c4;">AAA</span><span style="color: #2aa198;">){</span> <span style="color: #93a1a1; font-style: italic;">/*</span><span style="color: #93a1a1; font-style: italic;">AAA is BBB*/</span><span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<i>provider</i> 只能在config里面,而在run里面,只能用非 <i>provider</i>.
</p>
</li>
<li>Constant Recipe
Constant在config和run的过程中都存在(在他们之前).用
<code>myApp.constant</code> 来注册.
</li>
<li>Special Purpose Objects
包括controller, directive, filter, animation.
</li>
</ul>
</div>
<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> Service</h3>
<div class="outline-text-3" id="text-4-1">
<p>
服务都是惰性加载和单例,通过 <i>factory</i> 注册.服务本身对于html是不可
见的.在JS里面引用其功能.
除了用工厂方法意外,还可以在模组的config方法中通过 <i>$provie.factory</i> 来
注册服务.这里的Service和前面Provider段落中的不是一个概念.
</p>
</div>
</div>
<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> Controller</h3>
<div class="outline-text-3" id="text-4-2">
<p>
控制器是用于连接上下文和服务的,通过 <i>controller</i> 注册,对于html可见,通
过 <i>ng-controller</i> 来进行绑定.本身也可以定义一些行为.不需要返回什
么东西.
</p>
</div>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Directive</h2>
<div class="outline-text-2" id="text-5">
<p>
Directive提供自己定义的HTML标记,基于AngularJS HTML compiler
(<code>$compile</code>). <i>ngApp</i>, <i>ngRepeat</i> 等等就是AngularJS自带的
directive,这些directive通过 <i>ng-app</i>, <i>ng-repeat</i> 标记在HTML文件中
改变元素的行为模式.当然,这里的compile并不是真正意义上的编
译,AngularJS只是将事件监听器绑定到HTML元素上,使得这些元素可以互动.
在 <code>$compile</code> 的API中可以找到directive的各种option的详细说明.
</p>

<p>
命名方面, <code>-,:,_</code> 都可以作为分隔符, <code>ng-model</code> 和 <code>ng:model</code> 是等
效的.同时还可以在前面加上 <code>x-</code> 或者 <code>data-</code> 前缀, <code>ng-model</code> 和
<code>data-ng:model</code> 是等效的.
</p>

<p>
使用directive可以将它作为tag name, attribute name, comment 或者
class name.
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">my-dir</span>&gt;&lt;/<span style="color: #b58900;">my-dir</span>&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">span</span> <span style="color: #6c71c4;">my-dir</span>=<span style="color: #2aa198;">"exp"</span>&gt;&lt;/<span style="color: #b58900;">span</span>&gt;&#57344;&#57345;&#57345;
<span style="color: #93a1a1; font-style: italic;">&lt;!-- </span><span style="color: #93a1a1; font-style: italic;">directive:my-dir exp</span><span style="color: #93a1a1; font-style: italic;">--&gt;</span>&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">span</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"my-dir: exp"</span>&gt;&lt;/<span style="color: #b58900;">span</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
以上三种标记方式是等效的.当然,推荐使用tag name和attribute name.
</p>

<p>
<i>ngAttr</i> 能够绕过浏览器限制使用AngularJS的表达式设定attribute.
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">circle</span> <span style="color: #6c71c4;">cx</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">circle</span>&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">circle</span> <span style="color: #6c71c4;">ng-attr-cx</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">circle</span>&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">svg</span> <span style="color: #6c71c4;">viewBox</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">svg</span>&gt;&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">svg</span> <span style="color: #6c71c4;">ng-attr-view-box</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">svg</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>

<p>
<b>Directive返回固定的option.如果说Service(Factory)是注册名字和对应的属性,函数;Directive则是将值和函数绑定到预先定义好的选项</b>
</p>
</div>
<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> 注册Directive</h3>
<div class="outline-text-3" id="text-5-1">
<p>
module.directive 函数注册directive,它接受一个名字和一个工厂方法.方
法返回template,用其填充directive元素的内容.
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> restrict option</h3>
<div class="outline-text-3" id="text-5-2">
<p>
值为 &#8216;A&#8217; (match attribute), &#8216;E&#8217; (match element),
&#8216;C&#8217; (match class).指定这个directive被用作元素的属性,元素名或类
</p>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> link option</h3>
<div class="outline-text-3" id="text-5-3">
<p>
操作DOM.这个option需要指定一个函数,函数的参数为
scope (上下文),element (当前元素),attrs (当前元素的属性), ctrl
(array of controllers required by the directive).
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'docsTimeDirective'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'Controller'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
  $scope.format = <span style="color: #2aa198;">'M/d/yy h:mm:ss a'</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.directive<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myCurrentTime'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$interval'</span>, <span style="color: #2aa198;">'dateFilter'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$interval</span>, <span style="color: #6c71c4;">dateFilter</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #859900;">function</span> <span style="color: #b58900;">link</span><span style="color: #859900;">(</span><span style="color: #6c71c4;">scope</span>, <span style="color: #6c71c4;">element</span>, <span style="color: #6c71c4;">attrs</span>, <span style="color: #6c71c4;">ctrl</span><span style="color: #859900;">)</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">var</span> <span style="color: #6c71c4;">format</span>,&#57344;&#57345;&#57345;
        timeoutId;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #859900;">function</span> <span style="color: #b58900;">updateTime</span><span style="color: #268bd2;">()</span> <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
      element.text<span style="color: #657b83;">(</span>dateFilter<span style="color: #2aa198;">(</span><span style="color: #859900;">new</span> <span style="color: #268bd2;">Date</span><span style="color: #b58900;">()</span>, format<span style="color: #2aa198;">)</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">}</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    scope.$watch<span style="color: #268bd2;">(</span>attrs.myCurrentTime, <span style="color: #859900;">function</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">value</span><span style="color: #657b83;">)</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
      format = value;&#57344;&#57345;&#57345;
      updateTime<span style="color: #2aa198;">()</span>;&#57344;&#57345;&#57345;
    <span style="color: #657b83;">}</span><span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    element.on<span style="color: #268bd2;">(</span><span style="color: #2aa198;">'$destroy'</span>, <span style="color: #859900;">function</span><span style="color: #657b83;">()</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
      $interval.cancel<span style="color: #2aa198;">(</span>timeoutId<span style="color: #2aa198;">)</span>;&#57344;&#57345;&#57345;
    <span style="color: #657b83;">}</span><span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">start the UI update process; save the timeoutId for canceling</span>&#57344;&#57345;&#57345;
    timeoutId = $interval<span style="color: #268bd2;">(</span><span style="color: #859900;">function</span><span style="color: #657b83;">()</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
      updateTime<span style="color: #2aa198;">()</span>; <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">update DOM</span>&#57344;&#57345;&#57345;
    <span style="color: #657b83;">}</span>, 1000<span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
  <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #859900;">return</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
    link: link&#57344;&#57345;&#57345;
  <span style="color: #859900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
设定函数 <i>updateTime</i> 直接操纵元素内容,通过 <i>$watch</i> 将元素中的属
性变动跟操作函数绑定在一起. 通过 <i>$interval</i> 来实现自动读秒更新时
间. 绑定 <i>$destroy</i> 来终止 <i>$interval</i> 读秒.
</p>
</div>
</div>

<div id="outline-container-sec-5-4" class="outline-3">
<h3 id="sec-5-4"><span class="section-number-3">5.4</span> isolate scope</h3>
<div class="outline-text-3" id="text-5-4">
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'docsIsolateScopeDirective'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'Controller'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
  $scope.naomi = <span style="color: #859900;">{</span> name: <span style="color: #2aa198;">'Naomi'</span>, address: <span style="color: #2aa198;">'1600 Amphitheatre'</span> <span style="color: #859900;">}</span>;&#57344;&#57345;&#57345;
  $scope.igor = <span style="color: #859900;">{</span> name: <span style="color: #2aa198;">'Igor'</span>, address: <span style="color: #2aa198;">'123 Somewhere'</span> <span style="color: #859900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.directive<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myCustomer'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">()</span> <span style="color: #2aa198;">{</span>&#57344;&#57345;&#57345;
  <span style="color: #859900;">return</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    restrict: <span style="color: #2aa198;">'E'</span>,&#57344;&#57345;&#57345;
    scope: <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      customerInfo: <span style="color: #2aa198;">'=info'</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>,&#57344;&#57345;&#57345;
    templateUrl: <span style="color: #2aa198;">'my-customer-iso.html'</span>&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">div</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"Controller"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">my-customer</span> <span style="color: #6c71c4;">info</span>=<span style="color: #2aa198;">"naomi"</span>&gt;&lt;/<span style="color: #b58900;">my-customer</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">hr</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">my-customer</span> <span style="color: #6c71c4;">info</span>=<span style="color: #2aa198;">"igor"</span>&gt;&lt;/<span style="color: #b58900;">my-customer</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">div</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
controller里面绑定了 <i>naomi</i> 和 <i>ingor</i> 的值,html里面将directive
元素中的 <i>info</i> 绑定为 <i>naomi</i> 或 <i>ingor</i>. directive里面定义独立
上下文,将 <i>customerInfo</i> 绑定到元素里的
<i>info</i>. my-customer-iso.html 里面引用 customerInfo 的内容. 如果要
引用 <code>&lt;div bind-to-this="thing"&gt;</code>,
在directive里面应该用
<code>=bindToThis</code>.如果isolate scope里的
属性名跟directive标签中的一样,则可以缩写为 <code>XXX:
'='</code>.
<b>注意:如同之前提到过的,isolate scope没有继承高级上下文的内容,在这
里面调用高级上下文中的变量,只能是空</b>
<b>template里面或者templateUrl引用的html里面的内容继承的是directive
的上下文</b>
</p>
</div>
</div>

<div id="outline-container-sec-5-5" class="outline-3">
<h3 id="sec-5-5"><span class="section-number-3">5.5</span> <i>transclude</i></h3>
<div class="outline-text-3" id="text-5-5">
<p>
给予外部上下文访问能力.同时也意味着之前isolate scope
被遮盖了,无法访问.
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'docsIsoFnBindExample'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'Controller'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #2aa198;">'$timeout'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span>, <span style="color: #6c71c4;">$timeout</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
  $scope.name = <span style="color: #2aa198;">'Tobias'</span>;&#57344;&#57345;&#57345;
  $scope.hideDialog = <span style="color: #859900;">function</span> <span style="color: #859900;">()</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
    $scope.dialogIsHidden = <span style="color: #268bd2;">true</span>;&#57344;&#57345;&#57345;
    $timeout<span style="color: #268bd2;">(</span><span style="color: #859900;">function</span> <span style="color: #657b83;">()</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
      $scope.dialogIsHidden = <span style="color: #268bd2;">false</span>;&#57344;&#57345;&#57345;
    <span style="color: #657b83;">}</span>, 2000<span style="color: #268bd2;">)</span>;&#57344;&#57345;&#57345;
  <span style="color: #859900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.directive<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myDialog'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">()</span> <span style="color: #2aa198;">{</span>&#57344;&#57345;&#57345;
  <span style="color: #859900;">return</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    restrict: <span style="color: #2aa198;">'E'</span>,&#57344;&#57345;&#57345;
    transclude: <span style="color: #268bd2;">true</span>,&#57344;&#57345;&#57345;
    scope: <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      <span style="color: #2aa198;">'close'</span>: <span style="color: #2aa198;">'&amp;onClose'</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>,&#57344;&#57345;&#57345;
    templateUrl: <span style="color: #2aa198;">'&lt;div class="alert"&gt;&lt;a href class="close" ng-click="close()"&gt;&amp;times;&lt;/a&gt;&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;'</span>&#57344;&#57345;
  <span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">div</span> <span style="color: #6c71c4;">ng-controller</span>=<span style="color: #2aa198;">"Controller"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">my-dialog</span> <span style="color: #6c71c4;">ng-hide</span>=<span style="color: #2aa198;">"dialogIsHidden"</span> <span style="color: #6c71c4;">on-close</span>=<span style="color: #2aa198;">"hideDialog()"</span>&gt;&#57344;&#57345;&#57345;
    Check out the contents, !&#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">my-dialog</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">div</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
点击动作为<code>ng-click="close()"</code>,而
<code>close</code> 动作被绑定到 <code>&amp;onClose</code> 这个directive. <code>on-close</code> 又在
html里面绑定到 <code>hideDialog</code> 函数上. 这个示例中显示了如何将函数表
达式传递给directive,让directive在一定时候选择执行这个函数.scope中
读取值用&#8217;@XX&#8217;,读取表达式结果用&#8217;=XX&#8217;,读取表达式但不执行用&#8217;&amp;XX&#8217;.
</p>
</div>
</div>

<div id="outline-container-sec-5-6" class="outline-3">
<h3 id="sec-5-6"><span class="section-number-3">5.6</span> scope</h3>
<div class="outline-text-3" id="text-5-6">
<p>
不管是template还是templateUrl都是在directive的上下文下.当没有
isolate scope的时候,直接访问外部上下文.有isolate scope的时候,只能
访问isolate scope.这个时候html里面元素的内容,比如
<code>&lt;AA&gt;blabla&lt;/AA&gt;</code> 里面的 <i>blabla</i> 是被忽略/覆盖的.
当在template中加入一个含有transclude的元素的时候,html里面的
<i>blabla</i> 会被显示在这个元素之中,而这个含有transclude的元素的内容
却不会被显示,同时html里面的表达式无法访问isolate scope.
</p>
<div class="org-src-container">

<pre class="src src-javascript">...&#57344;&#57345;&#57345;
<span style="color: #859900;">return</span> <span style="color: #657b83;">{</span>&#57344;&#57345;&#57345;
    template: &lt;div&gt;CONTENT IN JAVASCRIPT <span style="color: #2aa198;">(</span>DIRECTIVE SCOPE <span style="color: #b58900;">(</span>OUTER/ISOLATE SCOPE<span style="color: #b58900;">)</span><span style="color: #2aa198;">)</span>&lt;/div&gt;&lt;div ng-transclude&gt;CONTENT FROM HTML <span style="color: #2aa198;">(</span>OUTER SCOPE<span style="color: #2aa198;">)</span>&lt;/div&gt;&#57344;&#57345;
<span style="color: #657b83;">}</span>&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5-7" class="outline-3">
<h3 id="sec-5-7"><span class="section-number-3">5.7</span> controller in directive.</h3>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Filters</h2>
<div class="outline-text-2" id="text-6">
<p>
在html里面用的时候 <code></code>
在JS里面使用一个叫做 filter 的过滤器
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'FilterInControllerModule'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>.&#57344;&#57345;&#57345;
controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'FilterController'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'filterFilter'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">filterFilter</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
  <span style="color: #268bd2;">this</span>.array = <span style="color: #859900;">[</span>&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Tobias'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Jeff'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Brian'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Igor'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'James'</span><span style="color: #268bd2;">}</span>,&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">{</span>name: <span style="color: #2aa198;">'Brad'</span><span style="color: #268bd2;">}</span>&#57344;&#57345;&#57345;
  <span style="color: #859900;">]</span>;&#57344;&#57345;&#57345;
  <span style="color: #268bd2;">this</span>.filteredArray = filterFilter<span style="color: #859900;">(</span><span style="color: #268bd2;">this</span>.array, <span style="color: #2aa198;">'a'</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
创建过滤器
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'myReverseFilterApp'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
.filter<span style="color: #657b83;">(</span><span style="color: #2aa198;">'reverse'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">()</span> <span style="color: #2aa198;">{</span>&#57344;&#57345;&#57345;
  <span style="color: #859900;">return</span> <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">input</span>, <span style="color: #6c71c4;">uppercase</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    input = input || <span style="color: #2aa198;">''</span>;&#57344;&#57345;&#57345;
    <span style="color: #859900;">var</span> <span style="color: #6c71c4;">out</span> = <span style="color: #2aa198;">""</span>;&#57344;&#57345;&#57345;
    <span style="color: #859900;">for</span> <span style="color: #859900;">(</span><span style="color: #859900;">var</span> <span style="color: #6c71c4;">i</span> = 0; i &lt; input.length; i++<span style="color: #859900;">)</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      out = input.charAt<span style="color: #268bd2;">(</span>i<span style="color: #268bd2;">)</span> + out;&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
    <span style="color: #93a1a1; font-style: italic;">// </span><span style="color: #93a1a1; font-style: italic;">conditional based on optional argument</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">if</span> <span style="color: #859900;">(</span>uppercase<span style="color: #859900;">)</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      out = out.toUpperCase<span style="color: #268bd2;">()</span>;&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> out;&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>$filter</code> 服务通过名字调用相应的过滤器.
</p>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Forms</h2>
</div>


<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Expressions</h2>
</div>




<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> HTML Compiler</h2>
</div>


<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> Security</h2>
</div>


<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> i18n and l10n</h2>
</div>


<div id="outline-container-sec-12" class="outline-2">
<h2 id="sec-12"><span class="section-number-2">12</span> Accessibility</h2>
</div>


<div id="outline-container-sec-13" class="outline-2">
<h2 id="sec-13"><span class="section-number-2">13</span> Bootstrap</h2>
</div>


<div id="outline-container-sec-14" class="outline-2">
<h2 id="sec-14"><span class="section-number-2">14</span> Running in Production</h2>
</div>


<div id="outline-container-sec-15" class="outline-2">
<h2 id="sec-15"><span class="section-number-2">15</span> Animations</h2>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Tutorial 入门教程学习笔记]]></title>
    <link href="http://xiaoliuai.github.io/blog/2014-12-24-angularjs-tutorial-.html"/>
    <updated>2014-12-24T00:00:00+01:00</updated>
    <id>http://xiaoliuai.github.io/blog/angularjs-tutorial-</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 01和02,静态模板和AngularJS模板</a></li>
<li><a href="#sec-2">2. 03 迭代器</a></li>
<li><a href="#sec-3">3. 04双向绑定</a></li>
<li><a href="#sec-4">4. 05XHR和依赖注入</a></li>
<li><a href="#sec-5">5. 06链接与图片模板</a></li>
<li><a href="#sec-6">6. 07路由与多视图 &amp; 08更多模板</a></li>
<li><a href="#sec-7">7. 09过滤器</a></li>
<li><a href="#sec-8">8. 10事件</a></li>
<li><a href="#sec-9">9. 11Rest和定制服务</a></li>
<li><a href="#sec-10">10. 12 Animations</a></li>
</ul>
</div>
</div>


<p>
学习<a href="http://angularjs.cn/T006">AngularJS入门教程</a>, <a href="https://docs.angularjs.org/tutorial">英文版</a>
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a href="xiaoliuai.github.io/blog/categories/web/atom.xml"><span class="section-number-2">1</span> 01和02,静态模板和AngularJS模板</a></h2>
<div class="outline-text-2" id="text-1">
<p>
在HTML里面用np-app来定义Angular的上下文,可以用
<code>ng-app="AAA"</code> 来制定一个名字空间.JS中
通过这个名字来获取HTML里的上下文 <code>var AAA = angular.module('AAA',
   []);</code>.
</p>

<p>
在HTML中Angular的范围内,用
<code>ng-controller="BBB"</code>标记一个div,在里
面用一些Angular命令(ng-repeat)和表达式设定显示方式.在JS里面用
<code>AAA.controller('BBB',function ...)</code> 给Angular表达式中的域赋值.
</p>

<p>
<i>AAA</i> 中的 <code>$scope$</code> 是AAA的根作用域,控制器的作用域则在 <i>BBB</i> 之中.也
就是说,如果在AAA下面有多个 <i>controller</i>, <i>controller X</i> 的数据绑定
在 <i>controller Y</i> 下是无效的. <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope">AngularJS作用域文档</a>.
</p>

<p>
略:AngularJS的开发者倾向于使用 <i>Jasmine</i> 行为驱动开发(BBD)框架进行
测试.
</p>

<p>
<i><b>写在后面,对angular.module是所有JS中创建,注册和获取模组的地方.HTML里
面通过ng-app=&#8221;AA&#8221;来绑定模组AA的上下文</b></i>
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 03 迭代器</h2>
<div class="outline-text-2" id="text-2">
<p>
建立输入表单 <code>&lt;input
ng-model="query"&gt;</code> ,修改 <code>ng-repeat</code> 为
<code>&lt;li ng-repeat="x in
list|filter:query"&gt;</code>.只要在输入框里输入文本,就会自动
地修改列表,只显示包含这个文本的项目.这代表两点:1. 数据绑定同名变量
query,值的同步是实时的; 2.filter过滤器,生成新数组,自动更新视图.
</p>

<p>
略:Angular端到端测试.
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 04双向绑定</h2>
<div class="outline-text-2" id="text-3">
<p>
在HTML里面添加选择器
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">select</span> <span style="color: #6c71c4;">ng-model</span>=<span style="color: #2aa198;">"orderProp"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">option</span> <span style="color: #6c71c4;">value</span>=<span style="color: #2aa198;">"name"</span>&gt;Alphabetical&lt;/<span style="color: #b58900;">option</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">option</span> <span style="color: #6c71c4;">value</span>=<span style="color: #2aa198;">"age"</span>&gt;Newest&lt;/<span style="color: #b58900;">option</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">select</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
同时在迭代器中加入条件
<code>&lt;li ng-repeat="phone in phones | filter:query |
orderBy:orderProp"&gt;</code>
</p>

<p>
JS中给每个数据加上 <i>age</i> 这个属性,同时设定
<code>$scope.orderProp = 'age'</code>设定选择器
的默认值.
</p>

<p>
<code>select</code> 的元素和 <code>orderProp</code> 之间建立了双向绑定.
</p>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 05XHR和依赖注入</h2>
<div class="outline-text-2" id="text-4">
<p>
通过 <code>$http.get(AA/BB.json)</code> 来读取json文件. <i>$http</i> 是AngularJS提
供的内建服务,通过依赖注入DI子系统.
</p>
<div class="org-src-container">

<pre class="src src-javascript">phonecatApp.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'PhoneListCtrl'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #2aa198;">'$http'</span>, <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span>, <span style="color: #6c71c4;">$http</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;
    $http.get<span style="color: #859900;">(</span><span style="color: #2aa198;">'phones/phones.json'</span><span style="color: #859900;">)</span>.success<span style="color: #859900;">(</span><span style="color: #859900;">function</span><span style="color: #268bd2;">(</span><span style="color: #6c71c4;">data</span><span style="color: #268bd2;">)</span> <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
        $scope.phones = data;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
<span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 06链接与图片模板</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">ul</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"phones"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">li</span> <span style="color: #6c71c4;">ng-repeat</span>=<span style="color: #2aa198;">"phone in phones | filter:query | orderBy:orderProp"</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"thumbnail"</span>&gt;&#57344;&#57345;
    &lt;<span style="color: #b58900;">a</span> <span style="color: #6c71c4;">href</span>=<span style="color: #2aa198;">"#/phones/"</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"thumb"</span>&gt;&lt;<span style="color: #b58900;">img</span> <span style="color: #6c71c4;">ng-src</span>=<span style="color: #2aa198;">""</span>&gt;&lt;/<span style="color: #b58900;">a</span>&gt;&#57344;&#57345;
    &lt;<span style="color: #b58900;">a</span> <span style="color: #6c71c4;">href</span>=<span style="color: #2aa198;">"#/phones/"</span>&gt;&lt;/<span style="color: #b58900;">a</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">p</span>&gt;&lt;/<span style="color: #b58900;">p</span>&gt;&#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">li</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 07路由与多视图 &amp; 08更多模板</h2>
<div class="outline-text-2" id="text-6">
<p>
用 <code>$routeProvider</code> 重定向url,把某个url路径定向到某个HTML模板上去,
并指定相对应的controller. <i>index.html</i> 中定义一个域,加载所有JS文件.加
载的 <i>app.js</i> 设定重定向规则.
</p>
<div class="org-src-container">

<pre class="src src-javascript">phonecatApp.config<span style="color: #657b83;">(</span><span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$routeProvider'</span>,&#57344;&#57345;&#57345;
  <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$routeProvider</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    $routeProvider.&#57344;&#57345;&#57345;
      when<span style="color: #859900;">(</span><span style="color: #2aa198;">'/phones'</span>, <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
        templateUrl: <span style="color: #2aa198;">'partials/phone-list.html'</span>,&#57344;&#57345;&#57345;
        controller: <span style="color: #2aa198;">'PhoneListCtrl'</span>&#57344;&#57345;&#57345;
      <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>.&#57344;&#57345;&#57345;
      when<span style="color: #859900;">(</span><span style="color: #2aa198;">'/phones/:phoneId'</span>, <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
        templateUrl: <span style="color: #2aa198;">'partials/phone-detail.html'</span>,&#57344;&#57345;&#57345;
        controller: <span style="color: #2aa198;">'PhoneDetailCtrl'</span>&#57344;&#57345;&#57345;
      <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>.&#57344;&#57345;&#57345;
      otherwise<span style="color: #859900;">(</span><span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
        redirectTo: <span style="color: #2aa198;">'/phones'</span>&#57344;&#57345;&#57345;
      <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>:phoneId</code> 是从将URL路径的对应部分作为变量.这个变量通过
<code>$routeParams</code> 来访问.
</p>

<p>
最后,在index.html里面加上 <code>&lt;div ng-view&gt;&lt;/div&gt;</code> 来为当前路由把对应
视图加上去.
</p>

<p>
<i>08更多模板</i> 之中用 <i>$http</i> 加载不同的json文件来根据phoneId生成每
部手机的细节说明网页.
</p>
</div>
</div>




<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 09过滤器</h2>
<div class="outline-text-2" id="text-7">
<p>
建立自己的 <i>filter FF</i>,实现更复杂的规则,然后像之前使用 <code>| filter:query</code>
一样用类似pipe的语法把输出传给自己的filter <code>| FF</code>.filter并不限定在
<i>ng-repeat</i> 中使用.
</p>
<div class="org-src-container">

<pre class="src src-javascript">angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'phonecatFilters'</span>, <span style="color: #2aa198;">[]</span><span style="color: #657b83;">)</span>.filter<span style="color: #657b83;">(</span><span style="color: #2aa198;">'checkmark'</span>, <span style="color: #859900;">function</span><span style="color: #2aa198;">()</span> <span style="color: #2aa198;">{</span>&#57345;
  <span style="color: #859900;">return</span> <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">input</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> input ? <span style="color: #2aa198;">'</span><span style="color: #6c71c4;">\u</span><span style="color: #2aa198;">2713'</span> : <span style="color: #2aa198;">'</span><span style="color: #6c71c4;">\u</span><span style="color: #2aa198;">2718'</span>;&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span>;&#57344;&#57345;&#57345;
<span style="color: #2aa198;">}</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>

<p>
<a href="http://code.angularjs.org/1.1.0/docs/api/ng.$filter">AngularJS内置过滤器</a> <i>uppercase</i>, <i>json</i>, <i>date</i>,
<i>date:&#8221;MM/dd/yyy@ h:mma&#8221;</i>.
</p>
</div>
</div>




<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> 10事件</h2>
<div class="outline-text-2" id="text-8">
<p>
通过JS在上下文中定义函数,通过 <code>ng-click</code> 来设定点击事件,调用函数.
</p>
<div class="org-src-container">

<pre class="src src-javascript">phonecatControllers.controller<span style="color: #657b83;">(</span><span style="color: #2aa198;">'PhoneDetailCtrl'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$scope'</span>, <span style="color: #2aa198;">'$routeParams'</span>, <span style="color: #2aa198;">'$http'</span>,&#57344;&#57345;
  <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$scope</span>, <span style="color: #6c71c4;">$routeParams</span>, <span style="color: #6c71c4;">$http</span><span style="color: #b58900;">)</span> <span style="color: #b58900;">{</span>&#57344;&#57345;&#57345;
    $http.get<span style="color: #859900;">(</span><span style="color: #2aa198;">'phones/'</span> + $routeParams.phoneId + <span style="color: #2aa198;">'.json'</span><span style="color: #859900;">)</span>.success<span style="color: #859900;">(</span><span style="color: #859900;">function</span><span style="color: #268bd2;">(</span><span style="color: #6c71c4;">data</span><span style="color: #268bd2;">)</span> <span style="color: #268bd2;">{</span>&#57344;&#57345;
      $scope.phone = data;&#57344;&#57345;&#57345;
      $scope.mainImageUrl = data.images<span style="color: #657b83;">[</span>0<span style="color: #657b83;">]</span>;&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
    $scope.setImage = <span style="color: #859900;">function</span><span style="color: #859900;">(</span><span style="color: #6c71c4;">imageUrl</span><span style="color: #859900;">)</span> <span style="color: #859900;">{</span>&#57344;&#57345;&#57345;
      $scope.mainImageUrl = imageUrl;&#57344;&#57345;&#57345;
    <span style="color: #859900;">}</span>&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
<code>$scope.setImage</code> 就是绑定的函数.
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #b58900;">img</span> <span style="color: #6c71c4;">ng-src</span>=<span style="color: #2aa198;">""</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"phone"</span>&gt;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
...&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
&lt;<span style="color: #b58900;">ul</span> <span style="color: #6c71c4;">class</span>=<span style="color: #2aa198;">"phone-thumbs"</span>&gt;&#57344;&#57345;&#57345;
  &lt;<span style="color: #b58900;">li</span> <span style="color: #6c71c4;">ng-repeat</span>=<span style="color: #2aa198;">"img in phone.images"</span>&gt;&#57344;&#57345;&#57345;
    &lt;<span style="color: #b58900;">img</span> <span style="color: #6c71c4;">ng-src</span>=<span style="color: #2aa198;">""</span> <span style="color: #6c71c4;">ng-click</span>=<span style="color: #2aa198;">"setImage(img)"</span>&gt;&#57344;&#57345;&#57345;
  &lt;/<span style="color: #b58900;">li</span>&gt;&#57344;&#57345;&#57345;
&lt;/<span style="color: #b58900;">ul</span>&gt;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
点击图片的时候调用函数,把 <code>mainImageUrl</code> 的值设定为当前图片.
</p>
</div>
</div>




<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> 11Rest和定制服务</h2>
<div class="outline-text-2" id="text-9">
<p>
依赖为 <i>angular-resource/angular-resource.js</i>.一般我们的JS相应功能
命名为 <i>XXXService</i>.首先注册 <i>Service</i> 模块.
</p>
<div class="org-src-container">

<pre class="src src-javascript"><span style="color: #859900;">var</span> <span style="color: #6c71c4;">phonecatServices</span> = angular.module<span style="color: #657b83;">(</span><span style="color: #2aa198;">'phonecatServices'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'ngResource'</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;
&#57344;&#57345;&#57345;
phonecatServices.factory<span style="color: #657b83;">(</span><span style="color: #2aa198;">'Phone'</span>, <span style="color: #2aa198;">[</span><span style="color: #2aa198;">'$resource'</span>,&#57344;&#57345;&#57345;
  <span style="color: #859900;">function</span><span style="color: #b58900;">(</span><span style="color: #6c71c4;">$resource</span><span style="color: #b58900;">){</span>&#57344;&#57345;&#57345;
    <span style="color: #859900;">return</span> $resource<span style="color: #859900;">(</span><span style="color: #2aa198;">'phones/:phoneId.json'</span>, <span style="color: #268bd2;">{}</span>, <span style="color: #268bd2;">{</span>&#57344;&#57345;&#57345;
      query: <span style="color: #657b83;">{</span>method:<span style="color: #2aa198;">'GET'</span>, params:<span style="color: #2aa198;">{</span>phoneId:<span style="color: #2aa198;">'phones'</span><span style="color: #2aa198;">}</span>, isArray:<span style="color: #268bd2;">true</span><span style="color: #657b83;">}</span>&#57344;&#57345;&#57345;
    <span style="color: #268bd2;">}</span><span style="color: #859900;">)</span>;&#57344;&#57345;&#57345;
  <span style="color: #b58900;">}</span><span style="color: #2aa198;">]</span><span style="color: #657b83;">)</span>;&#57344;&#57345;&#57345;
</pre>
</div>
<p>
建立一个 <i>Phone</i> 工厂,用 <i>$resource</i> 来取得数据.相应的controller改
为<code>$scope.phone =
Phone.get({phoneId:$routeParams.phoneId})</code>和
<code>$scope.phones = Phone.query()</code>.
</p>

<p>
<code>query</code> 方法是自己声明和定义的 <code>query: {method:'GET', params:{phoneId:'phones'}, isArray:true}</code>.
</p>
</div>
</div>




<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> 12 Animations</h2>
<div class="outline-text-2" id="text-10">
<p>
TODO
</p>

<p>
更多的教程 <a href="http://angularjs.cn/tag/AngularJS_%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97">开发指南</a> 和 <a href="http://docs.angularjs.org/cookbook/index">Cookbook</a>. 推荐使用<a href="https://github.com/angular/angular-seed">AngularJS种子项目</a>来引导开发新项目
</p>
</div>
</div>

]]></content>
  </entry>
  
</feed>
